#!/usr/bin/env ruby
# frozen_string_literal: true

# Script inputs a XHTML file consisting of Alt text
# and outputs a CSV with NOID,File Name, Alternate Text
# columns.

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} alt_text_file [alt_text_file...]"
  opts.on('-m', '--monograph_link', 'Use monograph link as resource') do |flag|
    options.use_monograph_link = true
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end
alt_text_file_list = ARGV

require 'nokogiri'

require_relative File.join(root_dir, "lib", "fulcrum")

# Create the serivce for retrieving the NOID.
service = UMPTG::Services::Heliotrope.new(
                :fulcrum_host => options.fulcrum_host
              )

alt_text_file_list.each do |alt_text_file|
  alt_text_file = File.expand_path(alt_text_file)
  unless File.exist?(alt_text_file)
    script_logger.error("invalid alt text file path #{alt_text_file}.")
    next
  end
  script_logger.info("*** processing #{File.basename(alt_text_file)} ***")
  STDOUT.flush

  alt_text_doc = Nokogiri::XML(File.open(alt_text_file))

  # First assume the monograph ID is a book key.
  node_list = alt_text_doc.xpath("//*[local-name()='section' and @class='Heading2']")
  if node_list.empty?
    script_logger.warn("Alt text sections not found for #{File.basename(alt_text_file)}.")
    next
  end
  script_logger.info("Alt text sections found for #{File.basename(alt_text_file)}.")

  csv_file = File.join(File.dirname(alt_text_file), File.basename(alt_text_file, ".*") + ".csv")
  CSV.open(
          csv_file,
          "w",
          :write_headers=> true,
          #:force_quotes => true,
          :headers => ["File Name", "Alternative Text"]
        ) do |csv|

    node_list.each do |node|
      img_node = node.xpath("./*[local-name()='h4']").first
      if img_node.nil?
        script_logger.warn("img name not found for #{node}.")
        next
      end
      img_name = img_node.text.gsub("\n"," ").strip

      alt_text_node = node.xpath("./*[local-name()='p']").first
      if alt_text_node.nil?
        script_logger.warn("alt text not found for #{node}.")
        next
      end
      alt_text = alt_text_node.text.gsub("\n"," ").strip

      row = {
          "File Name" => img_name,
          "Alternative Text" => alt_text
      }
      csv << row
      script_logger.info("#{img_name},#{alt_text}")
    end
  end
  script_logger.info("Wrote file #{File.basename(csv_file)}.")
end

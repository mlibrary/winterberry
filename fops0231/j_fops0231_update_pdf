#!/usr/bin/env ruby
# frozen_string_literal: true

# Script used for FOPS-0231 HEB Round 19
# to cache original representatives and properly rename
# new representatives.

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
options.output_dir = Dir.pwd()
options.fulcrum_host = 'production'
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} <pdf_file> [<pdf_file>...]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end

# Process the command line parameters.
pdf_file_list = ARGV

require 'fileutils'

pdf_file_list.each do |pdf_file|
  pdf_file = File.expand_path(pdf_file)
  unless File.exists?(pdf_file)
    script_logger.error("invalid PDF file #{pdf_file}")
    next
  end

  heb_id = File.basename(pdf_file, ".*")[0..16]
  monograph_dir = File.expand_path(File.join(File.dirname(pdf_file), "..", "processing", heb_id))
  script_logger.info("#{heb_id}:#{monograph_dir},#{File.directory?(monograph_dir)}")
  unless File.directory?(monograph_dir)
    script_logger.warn("no monograph directory #{File.basename(pdf_file)}")
    next
  end
  script_logger.info("processing PDF File #{File.basename(pdf_file)}")

  monograph_pdf_file_list = Dir.glob(File.join(monograph_dir, "*.pdf"))
  unless monograph_pdf_file_list.empty?
    archive_dir = File.join(monograph_dir, "archive")
    FileUtils.mkdir_p(archive_dir)

    monograph_pdf_file_list.each do |f|
      v = 1
      loop do
        archived_file = File.join(archive_dir, File.basename(f, ".*") + "_version#{v}" + File.extname(f))
        unless File.exists?(archived_file)
          script_logger.info("mv #{f} #{archived_file}")
          FileUtils.mv(f, archived_file)
          break
        end
        v +=1
      end
    end
  end

  new_pdf_file = File.join(monograph_dir, heb_id + File.extname(pdf_file))
  script_logger.info("cp #{pdf_file} #{new_pdf_file}")
  FileUtils.cp(pdf_file, new_pdf_file)
  #break
end

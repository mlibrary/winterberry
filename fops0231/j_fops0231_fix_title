#!/usr/bin/env ruby
# encoding: utf-8

require 'optparse'
require 'ostruct'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)}  <csv_file> heb_id [<heb_id>..]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    puts opts
    exit(0)
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 2
  puts option_parser.help
  exit(0)
end

csv_file = File.expand_path(ARGV[0])
heb_id_list = ARGV[1..-1]

unless File.exist?(csv_file)
  script_logger.error("CSV \"#{File.basename(csv_file)}\" does not exist.")
  exit(1)
end
script_logger.info("using CSV file \"#{File.basename(csv_file)}\"")

require 'csv'

require_relative File.join(root_dir, 'lib', 'fulcrum')

fm_csv = CSV.parse(
          File.read(csv_file),
          :headers => true,
          #:header_converters=> lambda {|f| fm_header_convert(f)},
          :return_headers => false
        )


# Create the serivce for retrieving the NOID manifest.
service = UMPTG::Services::Heliotrope.new()

monograph_row_list = []

heb_id_list.each do |heb_id|
  # Use the HEB ID to retrieve the monograph NOID from Fulcrum.
  identifier = "heb_id:#{heb_id}"
  noid_list = service.monograph_noid(identifier: identifier)
  if noid_list.nil? or noid_list.empty?
    script_logger.error("no NOID found for HEB ID #{heb_id}")
    next
  end
  monograph_noid = noid_list[identifier].first
  script_logger.info("found NOID #{monograph_noid} for HEB ID #{heb_id}")

  monograph_row = { 'NOID' => monograph_noid }

  # Search CSV for monograph metadata. Search HEB ID field (ID).
  fm_row_list = fm_csv.select {|row| !row['HEBID'].nil? and row['HEBID'].strip.downcase == heb_id.downcase }
  if fm_row_list.empty?
    script_logger.error("no CSV row found for #{heb_id}.")
    #next
  else
    script_logger.info("found CSV row for #{heb_id}.")
  end
  fm_row = fm_row_list.first

  monograph_row['Title'] = fm_row['Main title']
  unless fm_row['Subtitle'].nil? or fm_row['Subtitle'].empty?
    monograph_row['Title'] += ': ' + fm_row['Subtitle']
  end
  monograph_row_list << monograph_row
  STDOUT.flush
end

fulcrum_body = CSV.generate(
        :headers => [ "NOID", "Title"],
        :write_headers => true
      ) do |csv|

  monograph_row_list.each do |monograph_row|
    csv << monograph_row
  end
end

# Save the Fulcrum metadata CSV file.
fulcrum_file = File.join(File.dirname(csv_file), File.basename(csv_file, ".*") + "_fulcrum.csv")
script_logger.info("creating metadata file #{fulcrum_file}")
File.write(fulcrum_file, fulcrum_body)

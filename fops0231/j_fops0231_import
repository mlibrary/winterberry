#!/usr/bin/env ruby
# frozen_string_literal: true

# Script used for FOPS-0231 HEB Round 19
# to cache original representatives and properly rename
# new representatives.

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
options.output_dir = Dir.pwd()
options.fulcrum_host = 'production'
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} <monograph_dir> [<monograph_dir>...]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end

# Process the command line parameters.
monograph_dir_list = ARGV

require 'fileutils'

monograph_dir_list.each do |monograph_dir|
  monograph_dir = File.expand_path(monograph_dir)
  unless File.directory?(monograph_dir)
    script_logger.error("invalid HEB directory #{monograph_dir}")
    next
  end

  monograph_name = File.basename(monograph_dir)

  migrate_epub_file = nil?
  epub_file_list = Dir.glob(File.join(monograph_dir, "*.epub"))
  migrate_epub_file = epub_file_list.select {|f| File.basename(f, ".*").end_with?("_migrate") }.first \
                        unless epub_file_list.empty?
  if migrate_epub_file.nil? or !migrate_epub_file
    script_logger.warn("skipping HEB directory #{File.basename(monograph_dir)}")
    next
  end

  script_logger.info("processing HEB directory #{File.basename(monograph_dir)}")

  # Create archive directory if needed
  archive_dir = File.join(monograph_dir, "archive_twb")
  FileUtils.mkdir_p archive_dir

  epub_file_list.each do |f|
    unless f == migrate_epub_file
      v = 1
      loop do
        archived_file = File.join(archive_dir, File.basename(f, ".*") + "_version#{v}" + File.extname(f))
        unless File.exists?(archived_file)
          FileUtils.mv(f, archived_file)
          break
        end
        v +=1
      end
    end
  end
  FileUtils.mv(migrate_epub_file, File.join(monograph_dir, monograph_name + ".epub"))
end

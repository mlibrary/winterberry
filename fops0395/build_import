#!/usr/bin/env ruby
# encoding: utf-8

require 'optparse'
require 'ostruct'

# Process the script parameters.
options = OpenStruct.new
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)}  <csv_file> monograph_dir [<monograph_dir>..]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    puts opts
    exit(0)
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 2
  puts option_parser.help
  exit(0)
end

csv_file = ARGV[0]
monograph_dir_list = ARGV[1..-1]

unless File.exist?(csv_file)
  puts "Error: CSV \"#{File.basename(csv_file)}\" does not exist."
  exit(1)
end
puts "Using CSV file \"#{File.basename(csv_file)}\""

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require 'csv'

require_relative File.join(root_dir, 'lib', 'fulcrum')

FULCRUM_MONOGRAPH_HEADERS = UMPTG::Fulcrum::Manifest::Validation::CollectionSchema.headers()

fm_csv = CSV.parse(
          File.read(csv_file),
          :headers => true,
          :header_converters=> lambda {|f| f.strip},
          :return_headers => false
        )

def convert_isbn(isbn, row_format = nil, format_default = nil)
  unless isbn.nil? or isbn.strip.empty?
    isbn = isbn.strip.gsub(/\-/, '')
  end
  if row_format.nil? or row_format.strip.empty?
    format = format_default
  else
    format = row_format.strip.downcase.gsub(/\-/, '')
    format = 'ebook' if format.downcase == 'ebk'
    format = 'paper' if format.downcase == 'paperback'
  end
  return isbn, format
end

monograph_dir_list.each do |monograph_dir|
  monograph_dir = File.expand_path(monograph_dir)
  unless File.directory?(monograph_dir)
    puts "Error: path \"#{File.basename(monograph_dir)}\" is not an existing directory."
    next
  end
  puts "Processing directory \"#{File.basename(monograph_dir)}\""

=begin
  title_id = File.basename(monograph_dir)[0..12]
  title_id = File.basename(monograph_dir)
=end
  epub_file = Dir.glob(File.join(monograph_dir, "*.epub")).first
  title_id = File.basename(epub_file, ".*")
  puts "title_id: #{title_id}"

  file_list = Dir.glob(File.join(monograph_dir, "*"))
  rep_row_list = []
  file_list.each do |fl|
    file_name = File.basename(fl)
    ext = File.extname(file_name)
    next if ext.nil? or ext.strip.empty?

    case ext.strip.downcase
    when '.jpg', '.png', '.bmp', '.jpeg'
      rep_kind = 'cover'
    when '.epub'
      rep_kind = 'epub'
    when '.pdf'
      rep_kind = 'pdf_ebook'
    else
      puts "Skipping file #{file_name}"
      next
    end

    rep_row_list << {
          'File Name' => file_name,
          'Title' => file_name,
          'Representative Kind' => rep_kind
      }
  end

  monograph_row = { 'File Name' => '://:MONOGRAPH://:' }

  # Search CSV for monograph metadata. Directory name
  # is the search key.
  title_isbn = title_id[0..12]

  fm_row_list = []
  fm_csv.each do |row|
    s = row['ISBN(s)']
    next if s.nil?
    isbns = s.split(';')
    isbns.each do |r|
      if r.strip.gsub(/\-/,'').start_with?(title_isbn)
        fm_row_list << row
      end
    end
  end

  if fm_row_list.empty?
    puts "Warning: no CSV row found for #{title_id}. Skipping."
    #next
  else
    puts "Found CSV row for #{title_id}."
  end
  fm_row = fm_row_list.first

  # Make sure required fields are filled in:
  #   Title, Publisher (citation), Creator(s), Pub Year,
  #   Pub Location, Handle, Identifier(s), ISBN(s)
  unless fm_row.nil?
    fm_row.each do |key,val|
      next if key.nil? or key.strip.empty?

      case key
      when 'File Name'
        monograph_row['File Name'] = UMPTG::Fulcrum::Manifest.MONOGRAPH_FILE_NAME
      when 'Copyright Holder'
        monograph_row['Rightsholder'] = val
      when 'DOI'
        monograph_row[key] = val.delete_prefix("https://doi.org/")
      else
        monograph_row[key] = val
      end
    end
  end

  fulcrum_body = CSV.generate(
          :headers => FULCRUM_MONOGRAPH_HEADERS,
          :write_headers => true
        ) do |csv|

    csv << { "File Name" => "***row left intentionally blank***" }
    rep_row_list.each {|rep_row| csv << rep_row }
    csv << monograph_row
  end

  # Save the Fulcrum metadata CSV file.
  fulcrum_file = File.join(monograph_dir, title_id + "_fulcrum.csv")
  puts "Creating metadata file #{fulcrum_file}"
  File.write(fulcrum_file, fulcrum_body)
end

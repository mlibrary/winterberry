#!/usr/bin/env ruby
# frozen_string_literal: true

# Script parses ACLS HEB 2021 Status spreadsheet
# and generates a TMM Import spreadsheet

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

require_relative File.join(root_dir, "lib", "fulcrum")

# Process the script parameters.
options = OpenStruct.new
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} <heb_status_file> <dir_path> [<dir_path>...]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 2
  script_logger.info(option_parser.help)
  exit 0
end

# Process the command line parameters.
heb_status_file = ARGV[0]
dir_path_list = ARGV[1..-1]

heb_status_file = File.expand_path(heb_status_file)
unless File.exists?(heb_status_file)
  script_logger.error("HEB status file does not exist (#{heb_status_file}).")
  exit 0
end

require 'csv'
require 'fileutils'

status_row_list = CSV.parse(File.read(heb_status_file), {:headers => true})

isbn2hebid = {}
status_row_list.each do |status_row|
  #next unless status_row["Round"] == "18" and !status_row["Accepted/Rejected"].nil? and status_row["Accepted/Rejected"].downcase == "accepted"

  #heb_id = status_row["HEB ID"]
  heb_id = status_row["HEBID"]
  if heb_id.nil? or heb_id.empty?
    script_logger.warn("missing HEB ID: #{status_row}")
    next
  end

=begin
  ["HC ISBN","PB ISBN", "Ebk ISBN"].each do |key|
    isbn_value = status_row[key]
    unless isbn_value.nil? or isbn_value.strip.empty?
      isbn_list = isbn_value.split(';')
      isbn_list.each do |isbn|
        isbn2hebid[isbn.strip] = heb_id
      end
    end
  end
=end

  isbns = status_row["ISBN-13"]
  unless isbns.nil? or isbns.strip.empty?
    isbn_list = isbns.split(';')
    isbn_list.each do |isbn|
      b = isbn.strip[0..12]
      script_logger.info("#{b}=#{heb_id}")
      isbn2hebid[b] = heb_id
    end
  end

end

dir_path_list.each do |dir_path|
  dir_path = File.expand_path(dir_path)
  unless File.exists?(dir_path)
    script_logger.error("Directory path does not exist (#{dir_path}).")
    next
  end

  isbn = File.basename(dir_path, ".*")
  unless isbn2hebid.key?(isbn)
    script_logger.info("#{isbn}=#(not found)")
    next
  end

  heb_id = isbn2hebid[isbn].downcase
  script_logger.info("moving #{isbn} to #{heb_id}")
  Dir.glob(File.join(dir_path, "#{isbn}*")).each do |f|
    FileUtils.mv(f, File.join(File.dirname(f), heb_id + File.basename(f).delete_prefix(isbn)))
  end
  FileUtils.mv(dir_path, File.join(File.dirname(dir_path), heb_id))
end


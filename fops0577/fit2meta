#!/usr/bin/env ruby
# frozen_string_literal: true

# Script transforms FIT row to OPF metadata.

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
options.manifest_file = nil
options.normalize = false
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} csv_file [csv_file...]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end

# Process the command line parameters.
csv_file_list = ARGV

require 'csv'
require 'htmlentities'

OPF_TEMPLATE = <<-OPFTEMP
<?xml version='1.0' encoding='utf-8'?>
<package xmlns="http://www.idpf.org/2007/opf" version="3.0" unique-identifier="pub-id" dir="ltr" xml:lang="en">
<metadata xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:opf="http://www.idpf.org/2007/opf">
%s
<meta property="schema:accessMode">textual</meta>
<meta property="schema:accessMode">visual</meta>
<meta property="schema:accessModeSufficient">textual</meta>
%s
<meta property="schema:accessibilityHazard">none</meta>
<meta property="schema:accessibilitySummary">A complex book with images, list items, and complex formatting, which are defined with accessible structural markup. This book contains various accessibility features such as alternative text and extended descriptions for images, table of contents, page-list, landmarks, reading order, Structural Navigation, Index, and semantic structure.</meta>
<meta property="dcterms:conformsTo" id="conf">EPUB Accessibility 1.1 - WCAG 2.1 Level AA</meta>
<meta refines="#conf" property="a11y:certifiedBy" id="certifier">Benetech</meta>
<meta refines="#certifier" property="a11y:certifierCredential">https://bornaccessible.org/certification/gca-credential</meta>
</metadata>
</package>
OPFTEMP

TITLE_TEMPLATE = <<-TITLETEMP
<dc:title id="%s">%s</dc:title>
<meta refines="#%s" property="title-type">%s</meta>
<meta refines="#%s" property="display-seq">%s</meta>
TITLETEMP

LANG_TEMPLATE = <<-LANGTEMP
<dc:language id="%s">%s</dc:language>
<meta refines="#%s" property="display-seq">%s</meta>
LANGTEMP

AUTH_TEMPLATE = <<-AUTHTEMP
<dc:creator id="%s">%s</dc:creator>
<meta refines="#%s" property="file-as">%s</meta>
<meta refines="#%s" property="role" scheme="marc:relators">%s</meta>
AUTHTEMP

AF_TEMPLATE = <<-AFTEMP
<meta property="schema:accessibilityFeature">%s</meta>
AFTEMP

SUBJ_TEMPLATE = <<-SJTEMP
<dc:subject>%s</dc:subject>
SJTEMP

FEATURES = [
    "tableOfContents",
    "readingOrder",
    "ARIA",
    "pageBreakMarkers",
    "pageNavigation",
    "alternativeText",
    "printPageNumbers",
    "index",
    "structuralNavigation",
    "displayTransformability",
    "longDescription"
  ]

def title_markup(val, id, type, seq, encoder)
  val = val.nil? ? "" : val.strip
  return val.strip.empty? ? "" : sprintf(TITLE_TEMPLATE, id, encoder.encode(val), id, type, id, seq)
end

def lang_markup(val, id, seq)
  val = val.nil? ? "" : val.strip
  return val.strip.empty? ? "" : sprintf(LANG_TEMPLATE, id, val, id, seq)
end

def auth_markup(row, n)
  creator = ""
  val = row["AuthorTitle#{n}"]
  creator += val + " " unless val.nil? or val.empty?
  val = row["AuthorFirstName#{n}"]
  creator += val + " " unless val.nil? or val.empty?
  val = row["AuthorMiddleName#{n}"]
  creator += val + " " unless val.nil? or val.empty?
  val = row["AuthorLastName#{n}"]
  creator += val + " " unless val.nil? or val.empty?
  val = row["AuthorSuffix#{n}"]
  creator += val + " " unless val.nil? or val.empty?
  creator = creator.strip

  id = "creator#{n}"
  val = row["AuthorDisplayName#{n}"]
  file_as = val.nil? ? "" : val.strip
  val = row["AuthorType#{n}"]
  role = val.nil? ? "" : val.strip
  return creator.empty? ? "" : sprintf(AUTH_TEMPLATE, id, creator, id, file_as, id, role)
end

encoder = HTMLEntities.new
csv_file_list.each do |csv_file|
  csv_file = File.expand_path(csv_file)
  unless File.file?(csv_file)
    script_logger.error("CSV file #{csv_file} does not exist.")
    next
  end
  script_logger.info("processing CSV file #{File.basename(csv_file)}")
  
  CSV::Converters[:strip_field] = ->(value) { value.strip rescue value }
  csv_input = CSV.parse(
            File.read(csv_file),
            headers: true,
            converters: :strip_field,
            return_headers: false
          )
  ndx = 0
  csv_input.each do |row|
    ndx += 1
    markup_str = ""
    markup_str += title_markup(row['Title'], "title", "main", "1", encoder)
    markup_str += title_markup(row['Subtitle'], "subtitle", "subtitle", "2", encoder)
    markup_str += lang_markup(row['PrimaryLanguage'], "lang1", "1")
    markup_str += lang_markup(row['SecondaryLanguage'], "lang2", "2")

    (1..4).each {|n| markup_str += auth_markup(row, n) }

    val = row["LongDescription"]
    longd = val.nil? ? "" : val.strip
    unless longd.empty?
      markup_str += "<dc:description>#{encoder.encode(longd)}</dc:description>"
    end

    val = row["PubDate"]
    val = val.nil? ? "" : val.strip
    markup_str += "<dc:date>#{val}</dc:date>" unless val.empty?

    features = {}
    FEATURES.each {|f| features[f] = true}
    features['longDescription'] = !longd.empty?
    feature_str = ""
    features.each {|k,v| feature_str += sprintf(AF_TEMPLATE, k) if v }

    val = row["All Subjects"]
    val = "Subject 1;Subject 2"
    val = val.nil? ? "" : val.strip
    val.split(';').each {|s| markup_str += sprintf(SUBJ_TEMPLATE, s.strip) unless s.strip.empty? }

    csv_output = sprintf(OPF_TEMPLATE, markup_str, feature_str)

    # Save the Fulcrum metadata CSV file.
    new_csv_file = File.join(
          File.dirname(csv_file),
          "xml",
          File.basename(csv_file, ".*") + "_#{ndx}_opf.xml"
          )
    script_logger.info("Creating metadata file #{new_csv_file}")
    File.write(new_csv_file, csv_output)
  end
end

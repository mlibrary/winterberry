#!/usr/bin/env ruby
# frozen_string_literal: true

# Script generates an EPUB from a manuscript directory.

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
options.manifest_file = nil
options.normalize = false
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} manuscript_dir [manuscript_dir...]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end

# Process the command line parameters.
manuscript_dir_list = ARGV

require_relative File.join(root_dir, "lib", "epub")
require_relative File.join(root_dir, "fops0275", "lib", "manuscript")

class Entry < UMPTG::Object
  attr_reader :name, :doc

  def initialize(args = {})
    super(args)
    @name = @properties[:name]
    @doc = @properties[:doc]
  end
end

CSS_FILE = File.join(root_dir, "fops0275", "default.css")

manuscript_dir_list.each do |manuscript_dir|
  manuscript_dir = File.expand_path(manuscript_dir)
  unless File.directory?(manuscript_dir)
    script_logger.error("directory #{manuscript_dir} does not exist.")
    next
  end
  script_logger.info("processing manuscript directory #{File.basename(manuscript_dir)}")

  manuscript = UMPTG::Manuscript.new(manuscript_dir)
  manuscript.generate_xml_doc()
  manuscript_xml_doc = manuscript.xml_doc

  manuscript_file = File.join(
            manuscript.path,
            File.basename(manuscript.path, ".*") + ".xhtml"
            )

  UMPTG::XML.save(manuscript_xml_doc, manuscript_file)
  script_logger.info("Saved #{manuscript_file}.")

  entry_list = []
  id_map = {}
  section_cntr = 0
  manuscript_xml_doc.xpath("//*[local-name()='body']/*[local-name()='section']").each do |section_node|
    section_cntr += 1

    template_doc = manuscript.template_doc()

    template_body_node = template_doc.xpath("//*[local-name()='body']").first
    section_node = template_body_node.add_child(section_node)
    section_id = section_node["id"]
    epub_type = section_node["epub:type"]

    title = ""
    head_title_node = template_doc.xpath("//*[local-name()='head']/*[local-name()='title']").first
    head_title = head_title_node.nil? ? "" : head_title_node.content.strip.gsub(/\s+/, " ")

    section_title_node = section_node.xpath("./*[local-name()='header' or local-name()='h1']").first
    if section_title_node.nil?
      section_title = ""
    else
      hn = section_title_node.dup(1)
      hn.xpath(".//*[local-name()='span']").each {|n| n.remove}
      section_title = hn.content.strip.gsub(/\s+/, " ")
    end

    case epub_type
    when "frontmatter", "cover"
      title = section_title.empty? ? "Cover" : section_title
    when "titlepage"
      title = "Title Page"
    else
      title = section_title
    end
    unless title.empty?
      script_logger.info("adding title #{title}")
      head_title_node.content = title
    end

    entry_base_name = "#{section_cntr.to_s.rjust(3, "0")}_section.xhtml"
    #puts "#{entry_base_name}:#{epub_type}"
    entry_name = "OEBPS/" + entry_base_name

    section_node.xpath("//*[@id]").each do |node|
      id = node["id"]
      id_map[id] = entry_base_name + "#" + id
    end

    e = Entry.new(name: entry_name, doc: template_doc)
    entry_list << e
  end

  script_logger.info("updating IDs")
  entry_list.each do |entry|
    script_logger.info(entry.name)
    body_node = entry.doc.xpath("//*[local-name()='body']").first
    body_node.xpath(".//*[@href]").each do |n|
      href = n["href"]
      href_key = href[1..-1]
      if href.start_with?('#') and id_map.key?(href_key)
        new_href = id_map[href_key]
        n["href"] = new_href
        #script_logger.info("replace @href #{href} with #{new_href}")
      else
        script_logger.warn("no replacement for @href #{href}") if href.start_with?("#")
      end
    end
  end

  epub = UMPTG::EPUB::Archive.new

  doc_title = manuscript_xml_doc.xpath("//*[local-name()='head']/*[local-name()='title']").first.content

  opf_metadata_node = epub.opf_doc.root.xpath("./*[local-name()='metadata']").first
  unless opf_metadata_node.nil?
    opf_metadata_node.add_child("<dc:title>#{doc_title}</dc:title>")
    opf_metadata_node.add_child("<dc:language>en</dc:language>")

    mod_time = Time.now.strftime("%FT%H:%M:%SZ")
    opf_metadata_node.add_child("<meta property=\"dcterms:modified\">#{mod_time}</meta>")
  end

  entry_list.each do |entry|
    section_node = entry.doc.xpath("//*[local-name()='body']/*[local-name()='section']").first
    epub_type = section_node["epub:type"]

    title = ""
    unless epub_type.nil? or epub_type.strip.empty?
      title_node = entry.doc.xpath("//*[local-name()='head']/*[local-name()='title']").first
      title = title_node.content.strip.gsub(/\s+/, " ")
    end

    script_logger.info("adding entry #{entry.name}, #{title}")
    epub.add(
        entry_name: entry.name,
        entry_content: UMPTG::XML.doc_to_xml(entry.doc),
        media_type: "application/xhtml+xml",
        toc_title: title,
        epub_type: epub_type,
        spine_loc: -1
      )
  end

  entry_list.each do |entry|
    entry.doc.xpath("//*[local-name()='img']").each do |img_node|
      img_src = img_node["src"]
      img_file = File.join(manuscript.path, img_src)
      if File.file?(img_file)
        entry_name = "OEBPS/images/" + File.basename(img_file)
        entry_content = File.read(img_file, mode: "rb")
        extname = File.extname(img_file)
        case extname
        when '.jpg', '.jpeg'
          media_type = "image/jpeg"
        when '.db'
          next
        else
          media_type = "image/#{extname[1..-1]}"
        end
        script_logger.info("adding file #{entry_name},#{media_type}")
        epub.add(
            entry_name: entry_name,
            entry_content: entry_content,
            media_type: media_type
          )
      end
    end
  end

  entry_name = "OEBPS/default.css"
  media_type = "text/css"
  script_logger.info("adding file #{entry_name},#{media_type}")
  epub.add(
      entry_name: entry_name,
      entry_content: File.read(CSS_FILE),
      media_type: media_type
    )

  epub_file = File.join(
            manuscript.path,
            File.basename(manuscript.path, ".*") + ".epub"
          )

  epub.save(epub_file: epub_file)
  script_logger.info("Saved #{epub_file}.")
end

#!/usr/bin/env ruby
# frozen_string_literal: true

# Test script for embedding resource links

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
options.manifest_file = nil
options.normalize = false
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} epub_file [epub_file...]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end

# Process the command line parameters.
epub_file_list = ARGV

require_relative File.join(root_dir, "lib", "epub")

TEMPLATE_FILE = File.join(root_dir, "fops0275", "template.xhtml")

EXCLUDE_XPATH = <<-EXPATH
//*[
@epub:type='pagebreak'
] | //*[
local-name()!='section' and @class
] | //*[
local-name()='a' and @href
]
EXPATH

SECTION_EXCLUDE_XPATH = <<-EXPATH
.//*[
@epub:type='pagebreak'
] | .//*[
@class
]
EXPATH

exclude_sections = [
        "cover",
        "halftitlepage",
        "titlepage",
        "copyright-page",
        "toc",
        "frontmatter"
    ]

epub_file_list.each do |epub_file|
  unless File.file?(epub_file)
    script_logger.error("invalid EPUB file #{epub_file}")
    next
  end
  script_logger.info("processing EPUB file #{File.basename(epub_file)}")

  logger_file =  File.join(
            File.dirname(epub_file),
            File.basename(epub_file, ".*") + ".log"
            )
  file_logger = UMPTG::Logger.create(logger_file: logger_file)

  epub = UMPTG::EPUB::Archive.new(epub_file: epub_file)

  template_doc = UMPTG::XML.parse(xml_file: TEMPLATE_FILE)

  template_doc.xpath("//*[local-name()='head']/*[@type='text/css' or @name='viewport' or @charset]").each do |n|
    file_logger.info("removing CSS link #{n['href']}") if n['type'] == 'text/css'
    file_logger.info("removing meta #{n['name']}") if n['name'] == 'viewport'
    file_logger.info("removing meta #{n['charset']}") if n.key?('charset')
    n.remove
  end

  template_body_node = template_doc.xpath("//*[local-name()='body']").first

  metadata_doc = UMPTG::XML.parse(xml_file: TEMPLATE_FILE)
  metadata_body_node = metadata_doc.xpath("//*[local-name()='body']").first
  metadata_section_node = metadata_body_node.add_child("<section role=\"metadata\"/>").first
  epub.opf_doc.xpath("//*[local-name()='metadata']").each do |opf_metadata_node|
    node_list = opf_metadata_node.xpath("./*[name()='dc:title']")
    if node_list.count > 0
      div_node = metadata_section_node.add_child("<div role=\"title\"/>").first
      f = true
      node_list.each do |n|
        r = f ? "main-title" : "sub-title"
        f = false
        div_node.add_child("<p role=\"#{r}\">#{n.content}</p>")
      end
      title_node = template_doc.xpath("//*[local-name()='head']/*[local-name()='title']").first
      unless title_node.nil?
        t = node_list.first.content
        file_logger.info("adding title #{t}")
        title_node.content = t
      end
    end
    node_list = opf_metadata_node.xpath("./*[name()='dc:creator']")
    if node_list.count > 0
      div_node = metadata_section_node.add_child("<div role=\"contributors\"/>").first
      node_list.each do |n|
        div_node.add_child("<p role=\"creator\">#{n.content}</p>")
      end
    end
    div_node = metadata_section_node.add_child("<div role=\"publishing\"/>").first
    opf_metadata_node.xpath("./*[name()='dc:publisher']").each do |n|
      div_node.add_child("<p role=\"publisher_name\">#{n.content}</p>")
    end
    opf_metadata_node.xpath("./*[name()='dc:date']").each do |n|
      div_node.add_child("<p role=\"publishing_date\">#{n.content}</p>")
    end
  end
  template_body_node.add_child(metadata_body_node.inner_html)

  id_map = {}
  full_id_map = {}
  epub.spine.each_index do |ndx|
    entry = epub.spine[ndx]

    xml_doc = UMPTG::XML.parse(xml_content: entry.content)

    body_node = xml_doc.xpath("//*[local-name()='body']").first

    section_node = body_node.xpath("./*[local-name()='section'][1]").first
    unless section_node.nil?
      section_type = section_node["epub:type"]
      if exclude_sections.include?(section_type)
        t = section_type.nil? ? "(empty)" : section_type
        file_logger.info("skipping entry #{entry.name}, type:#{t}")
        next
      end
    end
    file_logger.info("merging entry #{entry.name}, type:#{section_type}")

    entry_base_name = entry.name.split('/').last

    body_node.xpath(".//*[@id]").each do |n|
      id = n["id"]
      next if id.nil? or id.strip.empty?

      full_id = entry_base_name + "#" + id
      new_id = "sect#{ndx}_#{id}"
      full_id_map[full_id] = new_id
      id_map[id] = new_id
      n["id"] = new_id
      file_logger.info("replaced @id #{id} with #{new_id}")
    end

    file_logger.info("removing @aria-labelledby")
    body_node.xpath("descendant-or-self::*[@class or @aria-labelledby or @data-locator or @aria-label or @epub:type or (local-name()='header' and @id)]").each do |n|
      n.content = "" if n["epub:type"] == "pagebreak"

      n.remove_attribute("id") if n.name == 'header'
      n.remove_attribute("class")
      n.remove_attribute("aria-labelledby")
      n.remove_attribute("aria-label")
      n.remove_attribute("data-locator")
      n.remove_attribute("role")

      unless n["epub:type"].nil?
        n["role"] = n["epub:type"]
        #n.remove_attribute("epub:type")
        n.remove_attribute("type")
      end
    end

    template_body_node.add_child(body_node.inner_html)
  end

  full_id_map.each do |k,v|
    x = ".//*[@href='#{k}']"
    file_logger.info("searching for @href #{k},count:#{template_body_node.xpath(x).count},#{x}")
    template_body_node.xpath(x).each do |n|
      if n.key?("href")
        href = n["href"]
        n["href"] = "#" + v
        file_logger.info("replaced @href #{href} with #{v}")
      end
    end
  end

  merged_epub_file = File.join(
            File.dirname(epub_file),
            File.basename(epub_file, ".*") + ".xhtml"
            )

  UMPTG::XML.save(template_doc, merged_epub_file)
  file_logger.info("Saved #{merged_epub_file}.")
  script_logger.info("Saved #{merged_epub_file}.")
end

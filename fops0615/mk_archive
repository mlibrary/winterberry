#!/usr/bin/env ruby
# frozen_string_literal: true

# FOPS-615 script that archives HEB Round 21 representatives

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
options.manifest_file = nil
options.normalize = false
options.previous = false
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} monograph_dir [monograph_dir...]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end

# Process the command line parameters.
monograph_dir_list = ARGV

require 'fileutils'

monograph_dir_list.each do |monograph_dir|
  monograph_dir = File.expand_path(monograph_dir)
  unless File.directory?(monograph_dir)
    script_logger.error("invalid monograph directory #{monograph_dir}")
    exit 1
  end
  script_logger.info("processing monograph directory #{File.basename(monograph_dir)}")

  archive_dir = File.join(monograph_dir, "archive")
  if Dir.exist?(archive_dir)
    script_logger.info("archive directory exists. Skipping.")
    next
  end

  Dir.mkdir(archive_dir)
  script_logger.info("created directory #{archive_dir}")

  vers_num = 0
  Dir.glob(File.join(monograph_dir, "*.epub")).each do |epub_file|
    vers_num += 1
    new_epub_file = File.join(archive_dir, File.basename(epub_file, ".*") + "_version#{vers_num}" + File.extname(epub_file))
    FileUtils.cp(epub_file, new_epub_file)
    script_logger.info("copied EPUB file #{epub_file} to #{new_epub_file}")
  end
end

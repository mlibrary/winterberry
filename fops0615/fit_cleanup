#!/usr/bin/env ruby
# frozen_string_literal: true

# Script cleans up HEB FIT files.

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} fit_file [fit_file...]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  exit 0
end

# Process the command line parameters.
fit_file_list = ARGV

require 'csv'
require 'xsv'

fit_csv_list = {}
fit_file_list.each do |fit_file|
  fit_file = File.expand_path(fit_file)
  unless File.exist?(fit_file)
    script_logger.error("invalid FIT file #{fit_file}.")
    next
  end
  script_logger.info("*** processing #{File.basename(fit_file)} ***")
  STDOUT.flush

  xsv = Xsv::Workbook.open(fit_file)

  sheet_row_list = []
  row_cnt = 0
  xsv.sheets[0].each do |row|
    row_cnt += 1
    next if [1,3,4].include?(row_cnt)
    next if row.compact.empty? or row.compact.join == "0"
    sheet_row_list << CSV.generate_line(row)
  end

=begin
  sheet_row_list.delete_at(3)
  sheet_row_list.delete_at(2)
  sheet_row_list.delete_at(0)
=end

  csv = CSV.parse(
            sheet_row_list.join,
            headers: true,
            return_headers: false,
            strip: true
          )
  fit_csv_list[File.basename(fit_file)] = csv
end

total_headers = nil
fit_csv_list.each do |bname,csv|
  total_headers = csv.headers if total_headers.nil? or csv.headers.count > total_headers.count
  #script_logger.info("#{bname}:#{csv.headers.count}")
end

total_fit_file = File.join(File.dirname(fit_file_list[0]), "HEB_Round21_FIT.csv")
CSV.open(
        total_fit_file,
        "w",
        :write_headers=> true,
        :headers => total_headers
      ) do |csv|
  fit_csv_list.each do |bname,fcsv|
    fcsv.each do |r|
      row = {}
      r.each {|c,v| row[c] = v}
      csv << row
    end
  end
end
script_logger.info("save CSV file #{total_fit_file}")

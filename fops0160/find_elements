#!/usr/bin/env ruby
# frozen_string_literal: true

# Script to find JATS table-wrap//caption/title

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} jats_file [jats_file...]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end

# Process the command line parameters.
jats_file_list = ARGV
require_relative File.join(root_dir, "lib", "xml", "pipeline")

TITLE_XPATH = <<-SXPATH
//*[
local-name()='table-wrap'
]/*[
local-name()='caption'
]/*[
local-name()='title'
]
SXPATH

EMAIL_XPATH = <<-SXPATH
//*[
local-name()='email'
]
SXPATH

class ElementFilter < UMPTG::XML::Pipeline::Filter
  def create_actions(args = {})
    a = args.clone

    # Element
    reference_node = a[:reference_node]

    # Calculate child count
    c_list = reference_node.xpath("./*")
    c_name_list = c_list.collect {|c| c.name}
    action_list = [
          UMPTG::XML::Pipeline::Action.new(
                reference_node: reference_node,
                info_message: "found element #{reference_node.name}, children #{c_list.count}: #{c_name_list.join(',')}"
              )
        ]

    return action_list
  end
end

element_processor = UMPTG::XML::Pipeline::Processor.new(
      name: "JATS_elements",
      filters: {
        elements: ElementFilter.new(
                  name: :elements,
                  xpath: EMAIL_XPATH
               )
      },
      options: {
        elements: true
      }
    )

jats_file_list.each do |jats_file|
  unless File.file?(jats_file)
    script_logger.error("invalid JATS file #{jats_file}")
    exit 1
  end
  script_logger.info("processing JATS file #{File.basename(jats_file)}")

  logger_file =  File.join(
            File.dirname(jats_file),
            File.basename(jats_file, ".*") + "_" + File.basename(__FILE__) + ".log"
            )
  element_processor.logger = UMPTG::Logger.create(logger_file: logger_file)
  element_processor.logger.info("Processing JATS file #{File.basename(jats_file)}")

  jats_doc = Nokogiri::XML(File.read(jats_file))

  element_processor.run(
        jats_doc,
        {
            normalize: false
        }
      )
end

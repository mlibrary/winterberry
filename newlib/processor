#!/usr/bin/env ruby
# frozen_string_literal: true

# Test script for EPUB::NCX::Pipeline class

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
options.normalize = false
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-n] file [file...]"
  opts.on('-n', '--normalize', 'Use which link as resource') do |flag|
    options.normalize = true
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end

# Process the command line parameters.
file_list = ARGV

require 'nokogiri'
require 'mime/types'

require_relative File.join(root_dir, "newlib", "lib", "epub")

PROCESSORS = {
      "application/x-dtbncx+xml" => UMPTG::EPUB::NCX::Processor(
                                        name: "NCXProcessor",
                                        options: {
                                            epub_ncx_test: true
                                        }
                                      ),
      "application/oebps-package+xml" => UMPTG::EPUB::OEBPS::Processor(
                                             name: "OEBPSProcessor",
                                             options: {
                                                 epub_oebps_test: true
                                             }
                                           ),
      "application/xhtml+xml" => UMPTG::EPUB::XHTML::Processor(
                                    name: "XHTMLProcessor",
                                    options: {
                                        epub_xhtml_test: false,
                                        html_img_alttext: true,
                                        html_extdescr: true
                                    }
                                  ),
      "application/epub+zip" => UMPTG::EPUB::Processor(
                                    name: "EPUBProcessor",
                                    options: {
                                        epub_ncx_test: false,
                                        epub_oebps_test: false,
                                        epub_oebps_accessible: true,
                                        epub_xhtml_test: false,
                                        html_img_alttext: true,
                                        html_extdescr: true
                                    }
                                  )
    }

file_list.each do |f|
  unless File.file?(f)
    script_logger.error("invalid file #{f}")
    exit 1
  end

  mime_type = MIME::Types.type_for(f).first

  processor = PROCESSORS[mime_type.to_s]
  if processor.nil?
    script_logger.error("no support for file #{mime_type} #{File.basename(f)}")
    next
  end
  script_logger.info("processing file #{mime_type} #{File.basename(f)}")

  logger_file =  File.join(
            File.dirname(f),
            File.basename(f, ".*") + "_" + File.basename(__FILE__) + ".log"
            )
  processor.logger = UMPTG::Logger.create(logger_file: logger_file)
  processor.logger.info("processing file #{mime_type} #{File.basename(f)}")

  new_f = File.join(
          File.dirname(f),
          File.basename(f, ".*") + File.basename(__FILE__) + File.extname(f)
          )

  case mime_type
  when "application/epub+zip"
    epub = UMPTG::EPUB(epub_path: f)
    result = processor.run(
              epub,
              {
                  normalize: options.normalize
              }
           )
    modified = epub.modified
    epub.save(epub_file: new_f) if modified
  else
    doc = Nokogiri::XML(File.read(f))
    result = processor.run(
              doc,
              {
                  normalize: options.normalize
              }
            )
    modified = result.modified
    UMPTG::XML.save(doc, new_f) if modified
  end
  script_logger.info("Saved File #{new_f}.") if modified
end

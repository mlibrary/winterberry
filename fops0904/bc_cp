#!/usr/bin/env ruby
# frozen_string_literal: true

# FOPS-904
# Script inputs a list of bar codes, searches the
# specific directories for a directory containing
# page scans for that code, and copies the directory.
#

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
options.file_dir_list = [
      "I:/MPublishing/ump2ht/phase\ 1/originals\ from\ Trigonix",
      "I:/MPublishing/ump2ht/phase\ 2/b1b2/originals",
      "I:/MPublishing/ump2ht/phase\ 2/b3/original",
      "I:/MPublishing/ump2ht/phase\ 2/b4/originals",
      "I:/MPublishing/ump2ht/phase\ 2/b5/originals",
      "I:/MPublishing/ump2ht/phase\ 2/b6/originals",
      "I:/MPublishing/ump2ht/phase\ 2/b7/originals",
      "I:/MPublishing/ump2ht/phase\ 2/b8/originals",
      "I:/MPublishing/ump2ht/phase\ 2/b9/originals",
      "I:/MPublishing/ump2ht/phase\ 2/b10/originals",
      "I:/MPublishing/ump2ht/phase\ 2/b11/originals",
      "I:/MPublishing/ump2ht/phase\ 2/b12/originals",
      "I:/MPublishing/ump2ht/phase\ 2/b13/originals",
      "I:/MPublishing/ump2ht/phase\ 2/b14/originals",
      "I:/MPublishing/ump2ht/phase\ 2/b15/originals",
      "I:/MPublishing/ump2ht/phase\ 2/b16/done",
    ]
options.output_dir = "s:/Information\ Management/Fulcrum/UMP_backlist/Round_3_2025/Scans/Batch05"

option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-d <file_dir>] [-o <output_dir>] bar_code [bar_code...]"
  opts.on('-o', '--output_dir [DIRECTORY]', 'Output directory') do |file_dir|
    options.output_dir = file_dir
  end
  opts.on('-d', '--directory [DIRECTORY]', 'File directory') do |file_dir|
    options.file_dir_list << file_dir
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end

# Process the command line parameters.
bar_code_list = ARGV

file_dir_list = []
options.file_dir_list.each do |file_dir|
  file_dir = File.expand_path(file_dir)
  unless File.directory?(file_dir)
    script_logger.error("invalid file directory #{file_dir}.")
    exit(1)
  end
  file_dir_list << file_dir
end

output_dir = File.expand_path(options.output_dir)
unless File.directory?(output_dir)
  script_logger.error("invalid output directory #{output_dir}.")
  exit(1)
end

require 'fileutils'
require_relative File.join(root_dir, "lib", "csvfile")

bc_dir_path = {}
file_dir_list.each do |file_dir|
  break unless bc_dir_path.count < bar_code_list.count

  dir_list = Dir.glob(File.join(file_dir, "*"))
  script_logger.info("#{file_dir}:#{dir_list.count}")
  bar_code_list.each do |bar_code|
    next unless bc_dir_path[bar_code].nil?

    bc_dir = dir_list.find {|r| File.basename(r, ".*") == bar_code }
    unless bc_dir.nil?
      script_logger.info("#{bar_code}:#{bc_dir}")
      bc_dir_path[bar_code] = bc_dir
    end
    STDOUT.flush
  end
end

script_logger.info("Found: #{bc_dir_path.count}")
bar_code_list.each do |bar_code|
  dpath = bc_dir_path[bar_code]
  if dpath.nil?
    script_logger.warn("#{bar_code}:no path")
    next
  end

  new_dpath = File.join(output_dir, bar_code)
  script_logger.info("#{bar_code}:#{dpath} -> #{new_dpath}")
  STDOUT.flush
  FileUtils.cp_r(dpath, new_dpath)
end
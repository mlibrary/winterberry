#!/usr/bin/env ruby
# frozen_string_literal: true

# Determine if the specified monograph IDs have
# been tombstoned.

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

require 'optparse'
require 'ostruct'

require_relative File.join(root_dir, "lib", "press")

# Process the script parameters.
options = OpenStruct.new
options.fulcrum_host = nil
options.press = UMPTG::Press.default
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-f production|preview|staging] [-p #{UMPTG::Press.press_list}] <monograph_id> [<monograph_id>..]"
  opts.on('-f', '--fulcrum_host host', 'Fulcrum environment') do |fulcrum_host|
    options.fulcrum_host = fulcrum_host
  end
  opts.on('-p', '--press press', "Press") do |press|
    options.press = press.to_sym
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end

monograph_id_list = ARGV

unless UMPTG::Press.valid(options.press)
  script_logger.error("invalid press #{options.press}")
  exit 1
end

require_relative File.join(root_dir, "lib", "fulcrum")
require_relative File.join(root_dir, "lib", "services")

# Create the serivce for retrieving the NOID manifest.
service = UMPTG::Services::Heliotrope.new(
                :fulcrum_host => options.fulcrum_host
              )

headers = [ "Identifier", "Tombstone?" ]

csv_file = File.join(Dir.pwd, options.press.to_s + "_tombstone.csv")
CSV.open(
        csv_file,
        "w",
        :write_headers=> true,
        :force_quotes => true,
        :headers => headers
      ) do |csv|
  monograph_id_list.each do |monograph_id|
    # Use the monograph ID to retrieve the NOID from Fulcrum.
    script_logger.info("*" * 10 + " #{monograph_id} " + "*" * 10)

    # For HEB and BAR, prefix the monograph_id
    case options.press
    when :bar
      identifier = "bar_number:#{monograph_id.upcase}"
    when :heb
      identifier = "heb_id:#{monograph_id}"
    else
      identifier = monograph_id
    end

    # Use the monograph NOID to retrieve the monograph manifest from Fulcrum.
    id2csv_body_list = service.monograph_export(identifier: identifier)
    if id2csv_body_list.empty?
      script_logger.error("no manifest found for id #{monograph_id}")
      next
    end
    STDOUT.flush

    id2csv_body_list.each do |id, csv_body_list|
      if [:heb,:bar].include?(options.press)
        identifier = id.split(':')[1]
      else
        identifier = id
      end
      
      csv_body_list.each do |csv_body|
        csv_row = { "Identifier" => identifier }

        manifest = UMPTG::Fulcrum::Manifest::Document.new(
                      csv_body: csv_body
                    )
        if manifest.nil?
          script_logger.error("no manifest found for id #{monograph_id}")
        else
          monograph_row = manifest.monograph_row
          if monograph_row.nil?
            script_logger.error("no monograph row found for id #{monograph_id}")
          else
            noid = monograph_row["noid"]
            script_logger.info("manifest found for id #{monograph_id}, NOID #{noid}")
            tombstoned = monograph_row["tombstone?"]
            csv_row["Tombstone?"] = tombstoned.nil? ? false : tombstoned.strip.downcase == 'yes'
            csv << csv_row
          end
        end
      end
    end
  end
end
script_logger.info("Saved CSV file #{csv_file}.")

#!/usr/bin/env ruby
# frozen_string_literal: true

# FOPS-745 Migrate EPUB 3.x to pass EPUBCheck v5.2.1.

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
options.manifest_file = nil
options.normalize = false
options.previous = false
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-n] epub_file [epub_file...]"
  opts.on('-n', '--normalize', 'Normalize EPUB') do |flag|
    options.normalize = true
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end

# Process the command line parameters.
epub_file_list = ARGV

require_relative File.join(root_dir, "lib", "epub")

unless options.previous
  migrator_processor = UMPTG::EPUB::ECheck(
        options: {
          ncx: true,
=begin
          opf: true,
=end
          xhtml: true
        }
      )

  epub_processor = UMPTG::EPUB::Processor(
        xml_processor: migrator_processor
      )
end

epub_file_list.each do |epub_file|
  unless File.file?(epub_file)
    script_logger.error("invalid EPUB file #{epub_file}")
    exit 1
  end
  script_logger.info("processing EPUB file #{File.basename(epub_file)}")

  epub = UMPTG::EPUB(epub_file: epub_file)

  epub_version = epub.version
  epub_version = epub_version.nil? ? "" : epub_version
  script_logger.info("version: #{epub_version}")
  STDOUT.flush
=begin
  if epub_version.start_with?("3.")
    script_logger.info("EPUB 3.x compliant. Skipping")
    next
  end
=end

  logger_file =  File.join(
            File.dirname(epub_file),
            File.basename(epub_file, ".*") + "_" + File.basename(__FILE__) + ".log"
            )
  migrator_logger = UMPTG::Logger.create(logger_file: logger_file)

  epub_processor.logger = migrator_logger
  epub_processor.logger.info("Processing EPUB file #{File.basename(epub_file)}")

  xhtml_entries = epub.xhtml
  epub_processor.run(
        epub,
        {
            spine_entries: xhtml_entries,
            normalize: options.normalize
        }
      )

  if options.normalize
=begin
    unless epub.navigation.count > 0
      # Generate XHTML navigation file
      ncx_doc = Nokogiri::XML::Document.parse(epub.ncx.first.content)
      toc_doc = UMPTG::EPUB::Migrator.ncx_to_xhtml(ncx_doc)

      ncx_name = epub.ncx.last.name
      toc_name = File.join(File.dirname(ncx_name), File.basename(ncx_name, ".*") + "_navigation.xhtml")
      epub.add(
            entry_name: toc_name,
            entry_content: UMPTG::XML.doc_to_xml(toc_doc),
            media_type: "application/xhtml+xml",
            properties: "nav"
          )
    end

    # Update file name extensions
    xhtml_entries.each do |entry|
      next if entry.nil?

      nme = entry.name
      new_name = UMPTG::EPUB::Migrator.fix_ext(entry.name)
      unless nme == new_name
        epub.remove(entry_name: nme)
        epub.add(
            entry_name: new_name,
            entry_content: entry.content
          )
        epub_processor.logger.info("renamed entry #{nme} to #{new_name}")
      end
    end
=end
  end

  if epub.modified
    new_epub_file = File.join(
            File.dirname(epub_file),
            File.basename(epub_file, ".*") + "_" + File.basename(__FILE__) + File.extname(epub_file)
            )
    epub.save(epub_file: new_epub_file)
    script_logger.info("Saved #{new_epub_file}.")
  end
end

#!/usr/bin/env ruby
# frozen_string_literal: true

# Script inputs a list of bookmared PDFs and
# locates their folder, archives the current PDF,
# then renames the bookmarked PDF.

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
options.mode = :test
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} -m [:exec|:test] pdf_file [pdf_file...]"
  opts.on_tail('-m', '--mode exec|test', 'Execution mode exec|test') do |m|
    options.mode = m.to_sym
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  exit 0
end

# Process the command line parameters.
pdf_file_list = ARGV

unless [:exec,:test].include?(options.mode)
  script_logger.error("invalid mode #{options.mode}")
  exit(1)
end
script_logger.info("Execution mode:#{options.mode}")

require 'fileutils'

pdf_file_list.each do |pdf_file|
  pdf_file = File.expand_path(pdf_file)
  unless File.exist?(pdf_file)
    script_logger.error("*** invalid PDF file #{pdf_file} ***")
    next
  end
  script_logger.info("*** processing PDF file #{pdf_file} ***")
  STDOUT.flush

  pdir = File.dirname(pdf_file)
  archive_dir = File.join(pdir, "archive")

  unless File.directory?(archive_dir)
    script_logger.info("creating archive directory")
    FileUtils.mkdir_p(archive_dir) unless options.mode == :test
  end

  pbase = File.basename(pdf_file, ".*")[0..12]
  ext = File.extname(pdf_file)

  archived_pdf_list = Dir.glob(File.join(archive_dir, pbase + "*"))
  script_logger.info("archived:#{archived_pdf_list.count}")

  pfile = File.join(pdir, pbase + ext)
  archived_pfile = File.join(archive_dir, pbase + "_version#{archived_pdf_list.count + 1}" + ext)

  script_logger.info("mv #{pfile} #{archived_pfile}")
  FileUtils.mv(pfile, archived_pfile) unless options.mode == :test

  script_logger.info("mv #{pdf_file} #{pfile}")
  FileUtils.mv(pdf_file, pfile) unless options.mode == :test
end
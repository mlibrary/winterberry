#!/usr/bin/env ruby
# frozen_string_literal: true

# Script builds Fulcrum import CSVs from one
# or more FIT files.

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} fit_file [fit_file...]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  exit 0
end

# Process the command line parameters.
fit_file_list = ARGV

require_relative File.join(root_dir, 'lib', 'fmsl')
require_relative File.join(root_dir, 'lib', 'fulcrum', 'manifest')

MONOGRAPH_HEADERS = UMPTG::Fulcrum::Manifest::Validation::CollectionSchema.headers()

require 'csv'

CSV::Converters[:strip_field] = ->(value) { value.strip rescue value }

fit_csv_list = []
fit_file_list.each do |fit_file|
  fit_file = File.expand_path(fit_file)
  unless File.exist?(fit_file)
    script_logger.error("invalid FIT file #{fit_file}.")
    exit(1)
  end
  script_logger.info("using FIT file #{File.basename(fit_file)}")

  fit_csv_body = UMPTG::FMSL.load(fmsl_file: fit_file)
  begin
    fit_csv_list << CSV.parse(
              fit_csv_body.join,
              headers: true,
              converters: :strip_field,
              return_headers: false)
  rescue Exception => e
    #raise e.message
    script_logger.warn(e.message)
  end
end

csv_rows = []
csv_headers = []
fit_csv_list.each do |fit_csv|
  fit_csv.each do |row|
    hrow = {}
    row.each do |k,v|
      csv_headers << k unless csv_headers.include?(k)
      hrow[k] = v
    end
    csv_rows << hrow
  end
end

csv_file = "fit_spreadsheet.csv"
CSV.open(
        csv_file,
        "w",
        force_quotes: true,
        write_headers: true,
        headers: csv_headers
      ) do |csv|
  csv_rows.each {|r| csv << r }
end
script_logger.info("saved CSV file #{csv_file}")

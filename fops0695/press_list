#!/usr/bin/env ruby
# frozen_string_literal: true

# Script displays a list of press monographs

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} press [press..]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 0
  script_logger.info(option_parser.help)
  return
end

press_list = ARGV
if press_list.empty?
  press_list = [
        "asp",
        "cjs",
        "csas",
        "cseas",
        "gabii",
        "lrccs",
        "michigan",
        "ummaa",
      ]
end

#require_relative File.join(root_dir, 'lib', 'services')
require_relative File.join(root_dir, 'lib', 'fulcrum')

# Create the serivce for retrieving the NOID.
service = UMPTG::Services::Heliotrope.new(
                :fulcrum_host => options.fulcrum_host
              )

monographs_list = service.monographs(press_list: press_list)
noid_list = []
monographs_list.each do |monograph|
  noid = monograph["id"]
  script_logger.info("*** #{noid} #{monograph['title']} ***")

  manifest = UMPTG::Fulcrum::Manifest::Document.new(
                monograph_id: noid
              )
  open_access = manifest.monograph_row['open_access?'] || "no"
  is_open_access = open_access.strip.downcase == "yes"
  unless is_open_access
    script_logger.warn("not open access, skipping")
    next
  end

  ebook_representatives = manifest.representatives().select {|k,r| k == 'epub' or k == 'pdf_ebook' }
  if ebook_representatives.empty?
    script_logger.warn("no ebooks, skipping")
    next
  end
  script_logger.info("#{ebook_representatives.count} ebooks found.")
  script_logger.info("formats:#{manifest.isbn.keys.join(',')}")

  format_isbn = {}
  ["hardcover", "paper", "paperback"].each do |f|
    format_isbn = manifest.isbn.select {|k,v| k.strip.downcase == f }
    if format_isbn.empty?
      script_logger.warn("no #{f} found.")
    elsif
      script_logger.info("found #{f}.")
      break
    end
  end
  next if format_isbn.empty?

  noid_list << noid

  script_logger.info(format_isbn)
  isbn = format_isbn.values.first.gsub(/\-/, '')
  ebook_representatives.each do |f,r|
    src_name = r['title']
    dest_name = isbn + File.extname(src_name)
    script_logger.info("mv \"#{src_name}\" \"#{dest_name}\"")
  end

=begin
  isbn = manifest.isbn['open access'] if manifest.isbn.key?('open access')
  isbn = manifest.isbn['ebook'] if isbn.nil?
  isbn = manifest.isbn['oa ebook'] if isbn.nil?
  isbn = manifest.isbn['epub'] if isbn.nil?
  isbn = manifest.isbn['pdf'] if isbn.nil?
  if isbn.nil?
    script_logger.error("no ISBN for #{noid}")
    next
  end

  doi = manifest.monograph_row['doi']
  if doi.nil?
    script_logger.error("no DOI for #{noid}")
    next
  end
  noid_list << "#{noid},#{isbn},#{doi.strip.delete_prefix("https://doi.org/")},#{manifest.monograph_row['link'][12..-3]}"
  next

  nlist = service.monograph_noid(identifier: isbn)
  STDOUT.flush
  next unless nlist.count == 1

  noid_list << noid
  #rep_list = manifest.representatives()
  #next if rep_list.key?('pdf_ebook')
  #puts noid
  #STDOUT.flush
=end
end
File.write(File.join(script_dir, "noid_list_line.txt"), noid_list.join(" "))
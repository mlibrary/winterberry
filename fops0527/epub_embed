#!/usr/bin/env ruby
# frozen_string_literal: true

# Test script for new EPUB::XProcessor class

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
options.manifest_file = nil
options.normalize = false
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-n] [-m manifest_file] epub_file [epub_file...]"
  opts.on('-m', '--manifest manifest_file', 'Resource manifest file') do |manifest_file|
    options.manifest_file = manifest_file
  end
  opts.on('-n', '--normalize', 'Use which link as resource') do |flag|
    options.normalize = true
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end

# Process the command line parameters.
epub_file_list = ARGV

require_relative File.join(root_dir, "lib", "epub")
require_relative File.join(root_dir, "lib", "fulcrum", "manifest")
require_relative File.join(root_dir, "lib", "xml", "pipeline")

manifest = nil
unless options.manifest_file.nil?
  manifest_file = File.expand_path(options.manifest_file)
  unless File.file?(manifest_file)
    script_logger.error("#{manifest_file} is not a file.")
    exit 1
  end
  manifest = UMPTG::Fulcrum::Manifest::Document.new(
        csv_file: manifest_file
      )
end

CAPTION_URL_XPATH = <<-SXPATH
//*[
local-name()='figure' and @data-fulcrum-embed-filename
]/*[
local-name()='figcaption'
]
SXPATH

class CaptionURLFilter < UMPTG::XML::Pipeline::Filter
  def create_actions(args = {})
    a = args.clone

    # figcaption, figure
    reference_node = a[:reference_node]
    parent_node = reference_node.parent

    # Resource name
    fname = reference_node.parent['data-fulcrum-embed-filename']
    a[:info_message] = "found resource reference #{fname}"

    # Manifest file
    manifest = @properties[:manifest]

    # Resource manifest entry
    resource = manifest.fileset(fname) unless manifest.nil?

    # Determine the markup to insert, if possible
    action_list = []
    if resource["noid"].empty?
      a[:warning_message] = "#{fname}: no resource found"
      action_list << UMPTG::XML::Pipeline::Action.new(a)
    else
      # Insert resource image
      image_name = "../images/" + File.basename(fname, ".*") + ".jpg"
      image_alt = resource['alternative_text']
      unless image_alt.nil? or image_alt.empty?
        image_ctr = UMPTG::XML::Pipeline::Actions::EmbedAction.default_container(reference_node)
        image_ctr.add_child("<img src=\"#{image_name}\" alt=\"#{image_alt}\"/>")
        image_markup = image_ctr.to_xml
        #image_markup = "<a href=\"#{manifest.fileset_link(fname)}\"><img src=\"#{image_name}\" alt=\"#{image_alt}\"/></a>"
        a[:markup] = image_markup
        a[:action] = :add_previous
        action_list << UMPTG::XML::Pipeline::Actions::MarkupAction.new(a)
      end

      # Embed links
      node = reference_node.first_element_child

      n1 = node.dup
      n1.add_class("figh")
      n1.add_class("enhanced-media-display")
      n1.content=""
      n1.add_child(manifest.fileset_caption(fname))

      link_markup = manifest.fileset_link_markup(fname, manifest.fileset_caption(fname))
      n2 = node.dup(0)
      n2.add_class("figh")
      n2.add_class("default-media-display")
      n2.add_child(link_markup)
      caption_markup = n1.to_xml + n2.to_xml
      #caption_markup = n2.to_xml

      a = args.clone
      a[:markup] = caption_markup

      # Embed links
      a[:action] = :replace_content
      action_list << UMPTG::XML::Pipeline::Actions::MarkupAction.new(a)

      a = args.clone
      a[:reference_node] = reference_node.parent
      a[:attribute_name] = "style"
      action_list << UMPTG::XML::Pipeline::Actions::RemoveAttributeAction.new(a)
      a[:attribute_name] = "class"
      a[:attribute_value] = "figure"
      a[:attribute_append] = true
      action_list << UMPTG::XML::Pipeline::Actions::SetAttributeValueAction.new(a)
    end

    return action_list
  end
end

CSS_XPATH = <<-SXPATH
/*[
local-name()='html'
]/*[
local-name()='head'
]/*[
local-name()='link' and position()=last()
]
SXPATH

class CSSFilter < UMPTG::XML::Pipeline::Filter
  def create_actions(args = {})
    a = args.clone

    # last CSS link
    reference_node = a[:reference_node]

    action_list = []
    a[:markup] = '<link href="../styles/fulcrum_default.css" rel="stylesheet" type="text/css"/>'
    action_list << UMPTG::XML::Pipeline::Actions::NormalizeInsertMarkupAction.new(a)

    return action_list
  end
end

fixer_processor = UMPTG::XML::Pipeline::Processor.new(
      name: "Fixer",
      filters: {
        caption_url: CaptionURLFilter.new(
                  name: :caption_url,
                  xpath: CAPTION_URL_XPATH,
                  manifest: manifest
               )
      },
      options: {
        caption_url: true
      }
    )

css_processor = UMPTG::XML::Pipeline::Processor.new(
      name: "CSS",
      filters: {
        css: CSSFilter.new(
                  name: :css,
                  xpath: CSS_XPATH
               )
      },
      options: {
        css: true
      }
    )

epub_processor = UMPTG::EPUB::XProcessor.new(
      xml_processor: fixer_processor
    )

epub_file_list.each do |epub_file|
  unless File.file?(epub_file)
    script_logger.error("invalid EPUB file #{epub_file}")
    exit 1
  end
  script_logger.info("processing EPUB file #{File.basename(epub_file)}")

  epub = UMPTG::EPUB::Archive.new(epub_file: epub_file)

  logger_file =  File.join(
            File.dirname(epub_file),
            File.basename(epub_file, ".*") + "_" + File.basename(__FILE__) + ".log"
            )
  epub_processor.logger = UMPTG::Logger.create(logger_file: logger_file)
  epub_processor.logger.info("Processing EPUB file #{File.basename(epub_file)}")
  epub_processor.run(
        epub,
        {
            normalize: options.normalize
        }
      )

  if epub.modified
    css_file = File.join(root_dir, "lib", "css", "fulcrum_default.css")
    epub.add(
          entry_name: "OEBPS/styles/fulcrum_default.css",
          entry_content: File.read(css_file),
          media_type: "text/css"
        )

    spine_entries = epub.spine.select {|entry| entry.modified}
    epub_processor.xml_processor = css_processor
    epub_processor.run(
          epub,
          {
              normalize: options.normalize,
              spine_entries: spine_entries
          }
        )

    new_epub_file = File.join(
            File.dirname(epub_file),
            File.basename(epub_file, ".*") + "_fixed" + File.extname(epub_file)
            )
    epub.save(epub_file: new_epub_file)
    script_logger.info("Saved #{new_epub_file}.")
  end
end

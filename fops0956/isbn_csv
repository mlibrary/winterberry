#!/usr/bin/env ruby
# frozen_string_literal: true

# Script reads a CSV file and produces a new
# CSV with eISBN and printISBN associated.

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} csv_file [csv_file..]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end

csv_file_list = ARGV

class Info
  attr_accessor :title, :row_list

  def initialize(title:)
    @title = title
    @row_list = []
  end
end

require 'csv'

CSV::Converters[:strip_field] = ->(value) { value.strip rescue value }

csv_file_list.each do |csv_file|
  unless File.file?(csv_file)
    script_logger.error("invalid CSV file #{csv_file}")
    exit 1
  end
  script_logger.info("processing CSV file #{File.basename(csv_file)}")

  csv_data = CSV.parse(
            File.read(csv_file),
            headers: true,
            converters: :strip_field,
            return_headers: false
          )

  title2rowlist = {}
  csv_data.each do |row|
    title = (row['Cover Title'] || "")
    if title.empty?
      script_logger.warn("missing cover title #{row}")
      next
    end
    subtitle = (row['Subtitle'] || "")
    title += ": " + subtitle unless subtitle.empty?

    key = title.strip.downcase
    info = title2rowlist[key]
    if info.nil?
      info = Info.new(title: title)
      title2rowlist[key] = info
    end
    info.row_list << row
  end
  script_logger.info("count:#{title2rowlist.count}")

  new_csv_file_name = File.basename(csv_file, ".*") + "_" + File.basename(__FILE__) + ".csv"
  new_csv_file = File.join(File.dirname(csv_file), new_csv_file_name)
  CSV.open(
          new_csv_file,
          "w",
          force_quotes: true,
          write_headers: true,
          headers: ["Title", "eISBN", "printISBN" ],
        ) do |csv|
    title2rowlist.each do |k,v|
      row = {
              "Title" => v.title
          }
      v.row_list.each do |r|
        row['eISBN'] = r['ISBN'] if r['Format'].downcase == "epub"
        row['printISBN'] = r['ISBN'] if r['Format'].downcase == "epdf"
      end
      #eisbn = v.row_list.collect {|r| r["ISBN"] if r["Format"].downcase == "epub" }.first
      #pisbn = v.row_list.collect {|r| r["ISBN"] if r["Format"].downcase == "epdf" }.first
      csv << row
    end
  end
  script_logger.info("saved CSV file #{new_csv_file}")
end

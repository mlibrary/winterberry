#!/usr/bin/env ruby
# frozen_string_literal: true

# This script list monographs within a product.

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} product [product...]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  exit 0
end
product_list = ARGV

require_relative File.join(root_dir, 'lib', 'fulcrum')

# Create the serivce for retrieving the manifest.
service = UMPTG::Services::Heliotrope.new(
                fulcrum_host: options.fulcrum_host
              )

noids1 = %w[
    4j03d2382
    c247ds81x
    pc289j87g
    w95051381
    r207tq11v
    jq085k76t
    r207tq09t
    g158bk93d
    dn39x227r
    8p58pg271
    9c67wq53h
    js956j488
    t722hc735
  ]
noids2 = %w[
    mw22v807s
    dz010s88c
    1j92gb16q
    j3860998n
    37720g463
    wm117r72c
    f4752k752
    fb494c13t
    h128nh45m
    df65vb73h
    rv042x00z
    0c483n16m
    xs55mg010
  ]

product_list.each do |product|
  products = service.connection.get("products").body
  #script_logger.info("#{product}:#{products.count},#{products.first}")
  bigten = products.find {|p| p['identifier'] == 'bigten'}

  components = service.connection.get("products/#{bigten['id']}/components").body
  script_logger.info("#{product}:#{components.count}")
  components.each do |c|
    if noids2.include?(c['noid'])
      script_logger.info("found NOID #{c['noid']}")
    else
      #script_logger.info("not found NOID #{c['noid']}")
    end
  end
  STDOUT.flush
end


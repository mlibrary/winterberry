#!/usr/bin/env ruby
# frozen_string_literal: true

# This script produces a CSV containing
# the non-EBC Big Ten Fulcrum URLs

require 'optparse'
require 'ostruct'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
options.fulcrum_host = nil
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-f production|preview|staging] [press...]"
  opts.on('-f', '--fulcrum_host [production|preview|staging]', 'Fulcrum environment') do |fulcrum_host|
    options.fulcrum_host = fulcrum_host
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  exit 0
end
press_list = ARGV

require 'csv'

require_relative File.join(root_dir, 'lib', 'fulcrum')

# Create the serivce for retrieving the manifest.
service = UMPTG::Services::Heliotrope.new(
                fulcrum_host: options.fulcrum_host
              )

press_list.each do |press|
  monographs = service.connection.get("presses/#{press}/monographs").body
  script_logger.info("#{press}:#{monographs.count}")
  STDOUT.flush

  skipped = 0
  published = 0

  # Write CSV file.
  url_file = File.join(Dir.pwd, press + "_urls.csv")
  CSV.open(
          url_file,
          "w",
          headers: ["Title", "Link", "Rightsholder"],
          write_headers: true
        ) do |csv|
    monographs.each do |m|
      manifest = UMPTG::Fulcrum::Manifest::Document.new(
                    monograph_id: m['id']
                  )
      if manifest.monograph_row['published?'].downcase == 'true'
        script_logger.warn("monograph published.")
        published += 1
      end

      isbn = manifest.isbn.values.first.gsub(/\-/, '')

      noid_list = service.monograph_noid(identifier: isbn)
      script_logger.info("#{isbn}:#{noid_list.count}")
      STDOUT.flush

      if noid_list[isbn].count != 1
        script_logger.warn("multiple NOIDs. skipping #{m['id']}")
        skipped += 1
        next
      end

      url = m['url'].delete_suffix('.json')
      title = m['title'].join(': ').gsub(/\"/,'""')
      csv << {
            "Title" => "=HYPERLINK(\"#{url}\",\"#{title}\")",
            "Link" => url,
            "Rightsholder" => manifest.monograph_row['rightsholder']
            }

    end
  end
  script_logger.info("Saved URLs #{url_file}")
  script_logger.info("Skipped:#{skipped}")
  script_logger.info("Published: #{published}")
  STDOUT.flush
end

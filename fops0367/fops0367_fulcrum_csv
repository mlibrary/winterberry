#!/usr/bin/env ruby
# frozen_string_literal: true

# This script produces a CSV containing
# the non-EBC Big Ten Fulcrum metadata

require 'optparse'
require 'ostruct'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
options.fulcrum_host = nil
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-f production|preview|staging] csv_file [csv_file...]"
  opts.on('-f', '--fulcrum_host [production|preview|staging]', 'Fulcrum environment') do |fulcrum_host|
    options.fulcrum_host = fulcrum_host
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  exit 0
end
csv_file_list = ARGV

require_relative File.join(root_dir, 'lib', 'csvfile')
require_relative File.join(root_dir, 'lib', 'fulcrum')

# Create the serivce for retrieving the manifest.
service = UMPTG::Services::Heliotrope.new(
                fulcrum_host: options.fulcrum_host
              )

csv_file_list.each do |csv_file|
  csv_file = File.expand_path(csv_file)
  unless File.exists?(csv_file)
    script_logger.error("invalid EPUB file path #{csv_file}.")
    next
  end
  script_logger.info("*** processing #{File.basename(csv_file)} ***")
  STDOUT.flush

  csv = UMPTG::CSVFile.read(csv_path: csv_file)
  monograph_rows = []
  resource_rows = []
  csv.each do |row|
    next if row['Main Title'].nil? or row['Main Title'].empty?

    isbn = row['ISBN13']
    isbn = isbn.gsub(/\-/, '')[0..12]
    script_logger.info(isbn)

    manifest_list = service.monograph_export(identifier: isbn)
    if manifest_list.count != 1
      script_logger.warn("#{isbn}: #{manifest_list.count}, skipping")
      next
    end

    manifest_body = manifest_list[isbn].first
    if manifest_body.nil?
      script_logger.warn("#{isbn}: no manifest found.")
      next
    end
    STDOUT.flush

    manifest = UMPTG::Fulcrum::Manifest::Document.new(
                  csv_body: manifest_body
                )
    noid = manifest.monograph_row['noid']
    monograph_rows << {
        "NOID" => noid,
        "DOI" => row['DOI'],
        "Buy Book URL" => row['Buy Book Link'],
        "Funder" => row['Funder'],
        "Funder Display" => row['Funder Display']
      }

    manifest.representatives.each do |kind,rep_row|
      kind = rep_row['representative_kind']
      next if kind.strip.downcase == 'cover'

      resource_rows << {
          "NOID" => rep_row['noid'],
          "Representative Kind" => kind,
          "Allow Download?" => row['Allow Download']
        }
    end
  end

  monograph_csv_file = File.join(File.dirname(csv_file), File.basename(csv_file, ".*") + "_monograph.csv")
  CSV.open(
          monograph_csv_file,
          "w",
          headers: [
              "NOID",
              "DOI",
              "Buy Book URL",
              "Funder",
              "Funder Display"
              ],
          write_headers: true
        ) do |fulcrum_csv|
    monograph_rows.each do |row|
      fulcrum_csv << row
    end
  end
  script_logger.info("Saved CSV #{monograph_csv_file}")

  resource_csv_file = File.join(File.dirname(csv_file), File.basename(csv_file, ".*") + "_resource.csv")
  CSV.open(
          resource_csv_file,
          "w",
          headers: [
              "NOID",
              "Representative Kind",
              "Allow Download?"
              ],
          write_headers: true
        ) do |fulcrum_csv|
    resource_rows.each do |row|
      fulcrum_csv << row
    end
  end
  script_logger.info("Saved CSV #{resource_csv_file}")
end

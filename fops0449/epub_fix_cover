#!/usr/bin/env ruby
# frozen_string_literal: true

# Script to fix HEB EPUB covers,
# transforming svg to HTML.

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
options.normalize = false
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-n] epub_file [epub_file...]"
  opts.on('-n', '--normalize', 'Use which link as resource') do |flag|
    options.normalize = true
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end

# Process the command line parameters.
epub_file_list = ARGV

require_relative File.join(root_dir, "lib", "epub")
require_relative File.join(root_dir, "lib", "xml", "pipeline")

class FixCoverAction < UMPTG::XML::Pipeline::Actions::NormalizeAction
  def process(args = {})
    super(args)

    # Should be svg:image. Parent should be svg:svg
    svg_image_node = @properties[:reference_node]
    svg_node = reference_node.parent

    href = svg_image_node['xlink:href']
    href = "" if href.nil? or href.strip.empty?
    if href.strip.empty?
      add_error_msg("no xlink:href value found.")
      return
    end
    width = svg_image_node['width']
    width = "" if width.nil? or width.strip.empty?
    height = svg_image_node['height']
    height = "" if height.nil? or height.strip.empty?

    # Use value of html/head/title for the image alt text
    title_node = svg_image_node.document.xpath("//*[local-name()='head']/*[local-name()='title']").first
    if title_node.nil? or title_node.content.strip.empty?
      alt_text = "Cover image"
    else
      alt_text = "Cover image for #{title_node.content}"
    end

    # Build the markup
    markup = "<div><img src=\"#{href}\""
    markup += " width=\"#{width}\"" unless width.empty?
    markup += " height=\"#{height}\"" unless height.empty?
    markup += " alt=\"#{alt_text}\"/></div>"

    svg_parent_node = svg_node.parent
    fragment = svg_node.fragment(markup)
    svg_node.replace(fragment)

    add_info_msg("content action: #{svg_parent_node.inner_html}")

    # Remove the xlink and svg namespaces
    add_ns = {}
    reference_node.document.namespaces.each do |prefix,url|
      if url.end_with?("/svg") or url.end_with?("/xlink")
        add_info_msg("removing namespace #{url}")
      else
        add_ns[prefix] = url
      end
    end
    reference_node.document.remove_namespaces!
    add_ns.each do |prefix,url|
      puts "#{prefix}:#{url}"
      reference_node.document.root.add_namespace(nil, url)
    end

    @status = UMPTG::XML::Pipeline::Action.COMPLETED
  end
end

CAPTION_URL_XPATH = <<-SXPATH
//*[
local-name()='svg'
]/*[
local-name()='image'
]
SXPATH

class FixCoverFilter < UMPTG::XML::Pipeline::Filter
  def create_actions(args = {})
    action = FixCoverAction.new(args)
    return [ action ]
  end
end

fixer_processor = UMPTG::XML::Pipeline::Processor.new(
      name: "Fixer",
      filters: {
        fix_cover: FixCoverFilter.new(
                  name: :fix_cover,
                  xpath: CAPTION_URL_XPATH
               )
      },
      options: {
        fix_cover: true
      }
    )

epub_processor = UMPTG::EPUB::XProcessor.new(
      xml_processor: fixer_processor
    )

epub_file_list.each do |epub_file|
  unless File.file?(epub_file)
    script_logger.error("invalid EPUB file #{epub_file}")
    exit 1
  end
  script_logger.info("processing EPUB file #{File.basename(epub_file)}")

  epub = UMPTG::EPUB::Archive.new(epub_file: epub_file)

  logger_file =  File.join(
            File.dirname(epub_file),
            File.basename(epub_file, ".*") + "_" + File.basename(__FILE__) + ".log"
            )
  epub_processor.logger = UMPTG::Logger.create(logger_file: logger_file)
  epub_processor.logger.info("Processing EPUB file #{File.basename(epub_file)}")
  epub_processor.run(
        epub,
        {
            normalize: options.normalize
        }
      )

  if epub.modified
    # Need to update the OPF, removing svg properties
    xp = "//*[local-name()='manifest']/*[local-name()='item' and contains(concat(' ',@properties,' '), ' svg ')]"
    epub.opf_doc.xpath(xp).each do |n|
      n.kwattr_remove('properties', 'svg')
    end
    epub.add(
          entry_name: epub.opf.name,
          entry_content: UMPTG::XML.doc_to_xml(epub.opf_doc)
      )

    new_epub_file = File.join(
            File.dirname(epub_file),
            File.basename(epub_file, ".*") + "_fixed" + File.extname(epub_file)
            )
    epub.save(epub_file: new_epub_file)
    script_logger.info("Saved #{new_epub_file}.")
  end
end

#!/usr/bin/env ruby
# frozen_string_literal: true

# From a press CSV listing,
# generate CSV with following columns:
# ID,Link (url,title)

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

require 'optparse'
require 'ostruct'

# Process the script parameters.
options = OpenStruct.new
options.fulcrum_host = nil
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-f production|preview|staging] <csv_file> [<csv_file>..]"
  opts.on('-f', '--fulcrum_host [production|preview|staging]', 'Fulcrum environment') do |fulcrum_host|
    options.fulcrum_host = fulcrum_host
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end

csv_list = ARGV

require_relative File.join(root_dir, "lib", "fulcrum")
require_relative File.join(root_dir, "lib", "services")

# Create the serivce for retrieving the NOID manifest.
service = UMPTG::Services::Heliotrope.new(
                :fulcrum_host => options.fulcrum_host
              )

headers = [ "ISBN", "Monograph Link", "Pub Year" ]
CSV::Converters[:strip_field] = ->(value) { value.strip rescue value }

csv_list.each do |csv_file|
  csv_file = File.expand_path(csv_file)
  unless File.exists?(csv_file)
    puts "Error: invalid EPUB file path #{csv_file}."
    next
  end
  puts "Processing #{File.basename(csv_file)}"

  begin
    csv = CSV.parse(
              File.read(csv_file),
              headers: true,
              converters: :strip_field,
              return_headers: false)
  rescue Exception => e
    raise e.message
  end

  ctr = 0
  new_csv_file = File.join(File.dirname(csv_file), File.basename(csv_file, ".*") + "_new.csv")
  CSV.open(
          new_csv_file,
          "w",
          :write_headers=> true,
          :force_quotes => true,
          :headers => headers
        ) do |new_csv|
    csv.each do |row|
      noid = row['NOID']
      isbns = row["ISBN(s)"]
      title = row["Title"]
      pub_year = row["Pub Year"]

      if noid.nil? or isbns.nil?
        script_logger.warn("no noid or isbns")
        next
      end

      isbn = isbns.split(';').find {|i| i.end_with?(' (ebook)') or i.end_with?(' (e-book)') or i.end_with?(' (open access)')}
      if isbn.nil?
        script_logger.warn("no ebook found for #{isbns} for noid #{noid}")
        next
      end

      m_list = isbn.match(/^[ ]*([^ ]+)[ ]+\((ebook|e-book|open access)\)/)
      if m_list.nil?
        script_logger.error("parsing isbn #{isbn} for #{noid}")
        next
      end
      isbn = m_list[1].gsub(/\-/,'')

      # Use the monograph ID to retrieve the NOID from Fulcrum.
      script_logger.info("*" * 10 + " #{isbn} " + "*" * 10)
      STDOUT.flush

      new_csv << {
              "ISBN" => isbn,
              "Monograph Link" => "=HYPERLINK(\"https://www.fulcrum.org/concern/monographs/#{noid}\",\"#{title}\")",
              "Pub Year" => "#{pub_year}"
      }
      #break if ctr > 5
      ctr += 1
    end
  end
  script_logger.info("Saved CSV file #{File.basename(new_csv_file)}.")
end



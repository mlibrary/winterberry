#!/usr/bin/env ruby
# frozen_string_literal: true

# This script tests the Heliotrope service.

require 'optparse'
require 'ostruct'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
options.fulcrum_host = nil
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-f production|preview|staging] [press...]"
  opts.on('-f', '--fulcrum_host [production|preview|staging]', 'Fulcrum environment') do |fulcrum_host|
    options.fulcrum_host = fulcrum_host
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  exit 0
end
press_list = ARGV

require 'csv'

require_relative File.join(root_dir, 'lib', 'services')

# Create the serivce for retrieving the manifest.
service = UMPTG::Services::Heliotrope.new(
                fulcrum_host: options.fulcrum_host
              )

press_list.each do |press|
  monographs = service.monographs(press: press)
  script_logger.info("#{press}:#{monographs.count}")
end

service.products.each do |product|
  components = service.product_components(product: product)
  script_logger.info("#{product['identifier']}:#{components.count}")
  components.each {|c| puts c['noid'] }
end

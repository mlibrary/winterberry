#!/usr/bin/env ruby
# frozen_string_literal: true

# Script used for FOPS-0153 to split a CSV
# with each row being a new CSV file with
# a new 'File Name' column and set to
# '://:MONOGRAPH://:'

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
options.output_dir = Dir.pwd()
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} -d <directory> <csv_file> [<csv_file>...]"
  opts.on('-d', '--directory [DIRECTORY]', 'Output directory') do |output_dir|
    options.output_dir = output_dir
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end

# Process the command line parameters.
csv_file_list = ARGV

require_relative File.join(root_dir, "lib", "csvfile")
require_relative File.join(root_dir, "lib", "fulcrum", "manifest")

csv_file_list.each do |csv_file|
  csv_file = File.expand_path(csv_file)
  unless File.file?(csv_file)
    script_logger.error("invalid CSV file #{csv_file}.")
    next
  end
  script_logger.info("processing CSV file #{File.basename(csv_file)}.")

  manifest = CSVFile.read(csv_path: csv_file)
  #csv = UMPTG::Fulcrum::Manifest::Document.new(csv_file: csv_file)
  if manifest.nil?
    script_logger.error("Reading FMSL #{File.basename(csv_file)}.")
    next
  end

  manifest.select do |row|
    heb_id = row['Identifier'][7..-1].strip

    output_dir = File.join(File.dirname(csv_file), heb_id)
    FileUtils.mkdir_p output_dir
    path = File.join(output_dir, heb_id + ".csv")
    script_logger.info(path)

    headers = manifest.headers - [ 'Press', 'Status' ]
    CSV.open(
            path,
            "w",
            :write_headers=> true,
            :headers => [ 'File Name' ] + headers
          ) do |csv|
      # Make sure the blank row exists, otherwise
      # first resource will not be loaded by
      # the importer.
      script_logger.info("No blank row found. Inserting one.")
      csv << {
          'File Name' => UMPTG::Fulcrum::Manifest.BLANK_ROW_FILE_NAME
        }

      new_row = {
            'File Name' => UMPTG::Fulcrum::Manifest.MONOGRAPH_FILE_NAME
          }
      row.each do |key,value|
        next if [ 'Press', 'Status'].include?(key)
        new_row[key] = value.force_encoding("UTF-8") if value != nil
      end
      csv << new_row
    end
  end
end

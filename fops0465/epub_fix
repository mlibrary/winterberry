#!/usr/bin/env ruby
# frozen_string_literal: true

# Test script for new EPUB::XProcessor class

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
options.normalize = false
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-n] xml_file [xml_file...]"
  opts.on('-n', '--normalize', 'Use which link as resource') do |flag|
    options.normalize = true
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end

# Process the command line parameters.
xml_file_list = ARGV

require_relative File.join(root_dir, "lib", "epub")
require_relative File.join(root_dir, "lib", "xml", "pipeline")
require_relative File.join(root_dir, "lib", "xml", "util")

class URLClassAction < UMPTG::XML::Pipeline::Actions::NormalizeAction
  def process(args = {})
    super(args)

    reference_node = @properties[:reference_node]

    reference_node.add_class("url")
    add_info_msg("added URL class to #{reference_node}")

    @status = UMPTG::XML::Pipeline::Action.COMPLETED
  end
end

URL_XPATH = <<-SXPATH
//*[
local-name()='a'
]
SXPATH

class URLClassFilter < UMPTG::XML::Pipeline::Filter
  def create_actions(args = {})
    name = args[:name]
    reference_node = args[:reference_node]
    action = URLClassAction.new(args)

    return [ action ]
  end
end

fixer_processor = UMPTG::XML::Pipeline::Processor.new(
      name: "Fixer",
      filters: {
        url_class: URLClassFilter.new(
                  name: :caption_url,
                  xpath: URL_XPATH
               )
      },
      options: {
        url_class: true
      }
    )

xml_file_list.each do |xml_file|
  unless File.file?(xml_file)
    script_logger.error("invalid EPUB file #{xml_file}")
    exit 1
  end
  script_logger.info("processing EPUB file #{File.basename(xml_file)}")

  logger_file =  File.join(
            File.dirname(xml_file),
            File.basename(xml_file, ".*") + "_" + File.basename(__FILE__) + ".log"
            )
  fixer_processor.logger = UMPTG::Logger.create(logger_file: logger_file)
  fixer_processor.logger.info("Processing XML file #{File.basename(xml_file)}")

  xml_doc = Nokogiri::XML(File.read(xml_file))
  entry_actions = fixer_processor.run(
        xml_doc,
        {
            normalize: options.normalize
        }
      )

  new_xml_file = File.join(
          File.dirname(xml_file),
          File.basename(xml_file, ".*") + "_fixed" + File.extname(xml_file)
          )
  UMPTG::XML.save(xml_doc, new_xml_file)
  script_logger.info("Saved #{new_xml_file}.")
end

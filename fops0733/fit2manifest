#!/usr/bin/env ruby
# frozen_string_literal: true

# Script builds Fulcrum import CSVs from one
# or more FIT files.

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} fulcrum_import_dir fit_file"
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  exit 0
end

# Process the command line parameters.
fulcrum_import_dir = ARGV[0]
fit_file = ARGV[1]

fulcrum_import_dir = File.expand_path(fulcrum_import_dir)
unless Dir.exist?(fulcrum_import_dir)
  script_logger.error("invalid Fulcrum directory #{fulcrum_import_dir}.")
  exit(1)
end
script_logger.info("using Fulcrum directory #{fulcrum_import_dir}")

if fit_file.nil?
  script_logger.warn("no FIT file specified. No monograph row will be generated.")
else
  fit_file = File.expand_path(fit_file)
  unless File.exist?(fit_file)
    script_logger.error("invalid FIT file #{fit_file}.")
    exit(1)
  end
  script_logger.info("using FIT file #{File.basename(fit_file)}")
end
STDOUT.flush

require 'csv'

require_relative File.join(root_dir, 'lib', 'fulcrum', 'manifest')

MONOGRAPH_HEADERS = UMPTG::Fulcrum::Manifest::Validation::CollectionSchema.headers()
MONOGRAPH_HEADERS.delete('NOID')

unless fit_file.nil?
  CSV::Converters[:strip_field] = ->(value) { value.strip rescue value }
  begin
    fit_csv = CSV.parse(
              File.read(fit_file),
              headers: true,
              converters: :strip_field,
              return_headers: false)
  rescue Exception => e
    raise e.message
  end
end

zero_cnt = 0
Dir.glob(File.join(fulcrum_import_dir, "*")).each do |import_dir|
  next unless File.directory?(import_dir)

  isbn = File.basename(import_dir)

  if fit_file.nil?
    monograph_row = nil
  else
    isbn_dashes = isbn[0..2] + "-" + isbn[3] + "-" + isbn[4..6] + "-" + isbn[7..11] + "-" + isbn[12]
    isbn_title_rows = fit_csv.select {|r| r['EAN'] == isbn or r['EAN'] == isbn_dashes }
    script_logger.info("#{isbn}:#{isbn_dashes}:#{isbn_title_rows.count}")

    zero_cnt += 1 if isbn_title_rows.count == 0
    next if isbn_title_rows.count == 0

    title_pre = isbn_title_rows[0]['TitlePrefix'] || ""
    title_pre = title_pre.strip
    title = title_pre.empty? ? "" : title_pre + " "
    title += isbn_title_rows[0]['Title']
    subtitle = isbn_title_rows[0]['Subtitle']
    title += ": " + subtitle unless subtitle.nil? or subtitle.strip.empty?

    isbns = []
    isbn_title_rows.each do |r|
      format = r['Format'].downcase
      case format
      when "all ebooks (oa)"
        format = "open access"
      when "all ebooks"
        format = "ebook"
      end
      isbns << "#{r['EAN']} (#{format})"
    end

    author_list = []
    4.times do |i|
      author_name = isbn_title_rows[0]["AuthorLastName#{i}"] || ""
      author_name += ", " + isbn_title_rows[0]["AuthorFirstName#{i}"].strip unless isbn_title_rows[0]["AuthorFirstName#{i}"].nil?
      author_name += " " + isbn_title_rows[0]["AuthorMiddleName#{i}"].strip unless isbn_title_rows[0]["AuthorMiddleName#{i}"].nil?

      unless author_name.empty?
        author_role = isbn_title_rows[0]["AuthorType#{i}"]
        author_role = author_role.nil? ? "" : author_role.strip.downcase

        author_entry = (author_role.empty? or author_role == "author") ? author_name : "#{author_name} (#{author_role})"
        author_list << author_entry
      end
    end

    languages = []
    planguage = isbn_title_rows[0]["PrimaryLanguage"]
    slanguage = isbn_title_rows[0]["SecondaryLanguage"]
    languages << planguage unless planguage.nil? or planguage.strip.empty?
    languages << slanguage unless slanguage.nil? or slanguage.strip.empty?

    monograph_row = {
          "File Name" => UMPTG::Fulcrum::Manifest.MONOGRAPH_FILE_NAME,
          "Title" => title,
          "ISBN(s)" => isbns.join(';'),
          "Creator(s)" => author_list.join(';'),
          "Language" => languages.join(';'),
          "Pub Year" => isbn_title_rows[0]['CopyrightYear'],
          "Publisher" => isbn_title_rows[0]['Publisher'],
          "Pub Location" => isbn_title_rows[0]['Publisher Location'],
          "Rightsholder" => isbn_title_rows[0]['Copyright Holder'],
          "Description" => isbn_title_rows[0]['LongDescription'],
          "Keywords" => isbn_title_rows[0]['Keywords'],
          "Subject" => isbn_title_rows[0]['All Subjects'],
          "DOI" => isbn_title_rows[0]['DOI'],
          "Series" => isbn_title_rows[0]['Series']
        }
  end

  file_list = Dir.glob(File.join(import_dir, "*"))
  rep_row_list = []
  file_list.each do |fl|
    file_name = File.basename(fl)
    ext = File.extname(file_name)
    next if ext.nil? or ext.strip.empty?

    case ext.strip.downcase
    when '.jpg', '.png', '.bmp', '.jpeg'
      rep_kind = 'cover'
    when '.epub'
      rep_kind = 'epub'
    when '.pdf'
      rep_kind = 'pdf_ebook'
    else
      script_logger.warn("Skipping file #{file_name}")
      next
    end

    rep_row_list << {
          'File Name' => file_name,
          'Title' => file_name,
          'Representative Kind' => rep_kind
      }
  end

  manifest_file = File.join(import_dir, "manifest.csv")
  CSV.open(
          manifest_file,
          "w",
          write_headers: true,
          headers: MONOGRAPH_HEADERS
        ) do |csv|
    csv << { "File Name" => "***row left intentionally blank***" }
    rep_row_list.each {|r| csv << r }
    csv << monograph_row unless monograph_row.nil?
  end
  script_logger.info("saved manifest file #{manifest_file}")
end
script_logger.info("zero count:#{zero_cnt}")

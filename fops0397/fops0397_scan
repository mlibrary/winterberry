#!/usr/bin/env ruby
# frozen_string_literal: true

# Script inputs a TMM DOI Report xml file and look
# for items that do not have full text on Fulcrum
# but have a Fulcrum URL.

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
options.use_monograph_link = false
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} doi_report_file"
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end

# Process the command line parameters.
doi_report_file_list = ARGV

require 'nokogiri'
require_relative File.join(root_dir, 'lib', 'xslt')

doi_report_file_list.each do |doi_report_file|
  doi_report_file = File.expand_path(doi_report_file)
  if !File.file?(doi_report_file)
    script_logger.error("invalid DOI Report file #{doi_report_file}")
    exit 1
  end
  script_logger.info("processing DOI Report file #{File.basename(doi_report_file)}")

  doi_report_doc = Nokogiri::XML(File.open(doi_report_file))
  book_list = doi_report_doc.xpath("//*[local-name()='book' and *[local-name()='ftf' and text()='N'] and *[local-name()='fulcrumurl']]")
  script_logger.info("found #{book_list.count} records for  DOI Report file #{File.basename(doi_report_file)}")
  book_list.each do |n|
    book_key = n.xpath("./*[local-name()='bookkey']").first.content
    ftf = n.xpath("./*[local-name()='ftf']").first.content
    furl = n.xpath("./*[local-name()='fulcrumurl']").first.content
    doi = n.xpath("./*[local-name()='doi']").first.content

    purl_node = n.xpath("./*[local-name()='resource']").first
    purl = purl_node.content
    #purl_node.content = furl

    title = n.xpath("./*[local-name()='titleprefixandtitle']").first.content
    subtitle_node = n.xpath("./*[local-name()='subtitle']").first
    t = title
    t += ": #{subtitle_node.content}" unless subtitle_node.nil?

    puts("Title: #{t}")
    puts("DOI:   #{doi}")
    puts("FURL:  #{furl}")
    puts("PURL:  #{purl}")

    new_node = n.document.create_element("purl")
    new_node.content = purl
    n.add_child(new_node)
    #script_logger.info("bookkey:#{book_key},#{ftf},#{doi},#{furl},#{purl}")
    #script_logger.info("#{doi},#{furl}")
  end

  crossref_doc = Nokogiri::XML('<?xml version="1.0" encoding="utf-8"?><root></root>')
  root_node = crossref_doc.first_element_child
  book_list.each do |book_node|
    root_node.add_child(book_node)
  end

  doi_report_edit_file = File.join(File.dirname(doi_report_file), File.basename(doi_report_file, ".*") + "_edited" + File.extname(doi_report_file))
  File.write(doi_report_edit_file, crossref_doc.to_xml)
  script_logger.info("wrote XML file #{File.basename(doi_report_edit_file)}.")

  crossref_xsl_file = File.join(root_dir, "lib", "xsl", "tmm_to_crossref_5_3_1.xsl")
  crossref_xml_file = File.join(File.dirname(doi_report_edit_file), File.basename(doi_report_edit_file, ".*") + "_crossref" + File.extname(doi_report_edit_file))

  script_logger.info("transforming XML file #{File.basename(doi_report_edit_file)} to #{File.basename(crossref_xml_file)} using XSL #{File.basename(crossref_xsl_file)}.")
  UMPTG::XSLT.transform(
          xslpath: crossref_xsl_file,
          srcpath: doi_report_edit_file,
          destpath: crossref_xml_file
          )
end

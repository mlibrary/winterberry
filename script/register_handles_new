#!/usr/bin/env ruby
# frozen_string_literal: true

HOST="tang"
if !ENV['HOSTNAME'].start_with?(HOST)
  puts "Hey, you must use #{HOST} to run this script!!"
  #exit
end

require 'optparse'
require 'ostruct'

# Process the script parameters.
options = OpenStruct.new
options.output_dir = Dir.pwd
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-d output_dir] monograph_noid [monograph_noid...]"
  opts.on('-d', '--output_dir [DIRECTORY]', 'Output directory') do |output_dir|
    options.output_dir = output_dir
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    puts opts
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  puts option_parser.help
  exit 0
end

monograph_noid_list = ARGV

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

output_dir = File.expand_path(options.output_dir)
fail "Error: output directory #{output_dir} is not valid." unless File.directory?(output_dir)

require 'date'
require 'fileutils'

require_relative File.join(root_dir, 'lib', 'manifestNEW')

monograph_noid_list.each do |monograph_noid|
  puts "*" * 10 + " #{monograph_noid} " + "*" * 10
  STDOUT.flush

  manifest = Manifest.new(:noid => monograph_noid)
  raise "Error: creating manifest from noid #{noid}" if manifest.nil?

  unless manifest.monograph_row.nil?

    link = manifest.monograph_row['link'].match('^[^\(]+\(\"([^\"]+)\".*') {|m| m[1] }
    link.delete_prefix!('https://www.fulcrum.org')

    row_list =  [
                  "#{manifest.monograph_row['noid']},#{link}"
                ]

    manifest.csv.each do |row|
      next if row == manifest.monograph_row
      next if row['noid'].downcase.start_with?('translation')

      link = row['link'].match('^[^\(]+\(\"([^\"]+)\".*') {|m| m[1] }
      link.delete_prefix!('https://www.fulcrum.org')
      row_list << "#{row['noid']},#{link}"
    end

    # Write the temp file. system command may strip out the newlines
    resource_file = File.join(output_dir, "resourcesNEW.csv")
    File.open(resource_file, "w") do |fp|
      row_list.each do |row|
        fp.puts row
      end
    end

    # Making Fulcrum handles
    bname = "batch." + DateTime.now.strftime("%Y-%m-%d")
    hdl_file = File.join(output_dir,  bname + ".hdl")
    log_file = File.join(output_dir,  bname + ".log")
    #ok = system("cat resources.csv | /quod-dev/bin/f/fulcrum_helpers/makeFulcrumHandles.pl -h -d \"#{output_dir}\"")
    ok = true
    puts "cat resources.csv | /quod-dev/bin/f/fulcrum_helpers/makeFulcrumHandles.pl -h -d \"#{output_dir}\""
    status = $?
    #FileUtils.rm_f resource_file

    case ok
    when true
    else
      puts "System call failed (status = #{status})"
      next
    end

    # Rename the output file from makeFulcrumHandles.pl
    # to avoid it from being overwritten
    new_hdl_file = File.join(output_dir, bname + "_#{monograph_noid}" + ".hdl")
    new_log_file = File.join(output_dir, bname + "_#{monograph_noid}" + ".log")
    if File.exists?(hdl_file)
      FileUtils.mv(hdl_file, new_hdl_file)
    end
    if File.exists?(log_file)
      FileUtils.mv(log_file, new_log_file)
    end
  end
end

#!/usr/bin/env ruby
# encoding: utf-8

# Script that loads a CSV consisting of HEB metadata for a round
# of titles and generates a Fulcrum monograph metadata CSV for
# each title.

require 'optparse'
require 'ostruct'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)}  <csv_file> monograph_dir [<monograph_dir>..]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    puts opts
    exit(0)
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 2
  puts option_parser.help
  exit(0)
end

csv_file = ARGV[0]
monograph_dir_list = ARGV[1..-1]

unless File.exist?(csv_file)
  script_logger.error("CSV \"#{File.basename(csv_file)}\" does not exist.")
  exit(1)
end
script_logger.info("Using CSV file \"#{File.basename(csv_file)}\"")

require 'csv'

require_relative File.join(root_dir, "lib", "fulcrum", "manifest")

FULCRUM_MONOGRAPH_HEADERS = UMPTG::Fulcrum::Manifest::Validation::CollectionSchema.headers()

fm_csv = CSV.parse(
          File.read(csv_file),
          :headers => true,
          #:header_converters=> lambda {|f| fm_header_convert(f)},
          :return_headers => false
        )

monograph_dir_list.each do |monograph_dir|
  monograph_dir = File.expand_path(monograph_dir)
  unless File.directory?(monograph_dir)
    script_logger.error("directory \"#{File.basename(monograph_dir)}\" does not exist.")
    next
  end
  script_logger.info("processing directory \"#{File.basename(monograph_dir)}\"")

  isbn = File.basename(monograph_dir)[0..12]
  #script_logger.info("isbn: #{isbn}")

  file_list = Dir.glob(File.join(monograph_dir, "*"))
  rep_row_list = []
  file_list.each do |fl|
    file_name = File.basename(fl)
    ext = File.extname(file_name)
    next if ext.nil? or ext.strip.empty?

    case ext.strip.downcase
    when '.jpg', '.png', '.bmp', '.jpeg', '.tif'
      rep_kind = 'cover'
    when '.epub'
      rep_kind = 'epub'
    when '.pdf'
      rep_kind = 'pdf_ebook'
    else
      script_logger.warn("skipping file #{file_name}")
      next
    end

    rep_row_list << {
          'File Name' => file_name,
          'Title' => file_name,
          'Representative Kind' => rep_kind
      }
  end

  monograph_row = { 'File Name' => '://:MONOGRAPH://:' }

  # Search CSV for monograph metadata. Directory name
  # is the search key. First, search HEBID field (HEBID).
  # If fails, then search the ISBN fields (ISBN[1-3]_13).
  fm_row_list = fm_csv.select {|row| !row['File Name'].nil? and row['File Name'].strip == isbn }
  if fm_row_list.empty?
    script_logger.warn("no CSV row found for #{isbn}. Skipping.")
    next
  else
    script_logger.info("Found CSV row for #{isbn}.")
  end
  fm_row = fm_row_list.first

  # Make sure required fields are filled in:
  #   Title, Publisher (citation), Creator(s), Pub Year,
  #   Pub Location, Handle, Identifier(s), ISBN(s)
  unless fm_row.nil?
    pdf_file = isbn + ".pdf"
    fm_row.each do |key,val|
      next if key == 'File Name'

      case key
      when "Pub Date"
        monograph_row["Pub Year"] = Date.strptime(val, "%m/%d/%Y").strftime("%Y-%m-%d")
      when "Title"
        new_val = fm_row[key].strip + ": " + fm_row["Sub-Title"] unless fm_row["Sub-Title"].nil? or fm_row["Sub-Title"].empty?
        new_val = fm_row[key] if fm_row["Sub-Title"].nil? or fm_row["Sub-Title"].empty?
      when "Identifier(s)"
        new_val = "bar_number:#{fm_row['Bar No']};" + fm_row[key]
      else
        new_val = fm_row[key]
      end
      monograph_row[key] = new_val
    end
  end

  fulcrum_body = CSV.generate(
          :headers => FULCRUM_MONOGRAPH_HEADERS,
          :write_headers => true
        ) do |csv|

    csv << { "File Name" => "***row left intentionally blank***" }
    rep_row_list.each do |rep_row|
      csv << rep_row
    end
    csv << monograph_row
  end

  # Save the Fulcrum metadata CSV file.
  fulcrum_file = File.join(monograph_dir, isbn + "_fulcrum.csv")
  script_logger.info("Creating metadata file #{fulcrum_file}")
  File.write(fulcrum_file, fulcrum_body)
end

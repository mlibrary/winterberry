#!/usr/bin/env ruby
# frozen_string_literal: true

# Script performs a specified set of markup reviews for one
# or more specified EPUBs.

require 'optparse'
require 'ostruct'

# Process the script parameters.
options = OpenStruct.new
options.publisher_dir = Dir.pwd
options.reviews = {
        package: true,
        figure: false,
        image: true,
        link: false,
        list: false,
        resources: true,
        table: true
    }
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-k] [-l] epub_file [epub_file...]"
  opts.on('-k', '--link', 'Review links.') do |da|
    options.reviews[:link] = true
  end
  opts.on('-l', '--list', 'Review lists.') do |da|
    options.reviews[:list] = true
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    puts opts
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  puts option_parser.help
  return
end

epub_file_list = ARGV

require 'logger'

script_logger = Logger.new(STDOUT)
script_logger.formatter = proc do |severity, datetime, progname, msg|
  "#{severity}: #{msg}\n"
end

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "review_new")
require_relative File.join(root_dir, "lib", "epub")

review_processors = {}
review_processors[:link] = UMPTG::Review::LinkProcessor.new if options.reviews[:link]
review_processors[:list] = UMPTG::Review::ListProcessor.new if options.reviews[:list]
review_processors[:package] = UMPTG::Review::PackageProcessor.new if options.reviews[:package]
review_processors[:resources] = UMPTG::Review::ResourceProcessor.new if options.reviews[:resources]
review_processors[:table] = UMPTG::Review::TableProcessor.new if options.reviews[:table]

epub_file_list.each do |epub_file|
  epub_file = File.expand_path(epub_file)
  unless File.exists?(epub_file)
    puts "Error: invalid EPUB file path #{epub_file}."
    next
  end
  puts "Processing #{File.basename(epub_file)}"

  epub = UMPTG::EPUB::Archive.new(epub_file: epub_file)
  epub_modified = false

  # Process the epub and generate the image information.
  action_map = UMPTG::EPUB::Processor.process(
        epub: epub,
        entry_processors: review_processors,
        process_opf: options.reviews[:package],
        pass_xml_doc: true,
        logger: script_logger
      )
  action_map.each do |entry_name,proc_map|
    script_logger.info(entry_name)
    update_entry = false
    proc_map.each do |key,action_list|
      next if action_list.nil?
      action_list.each do |action|
        if action.status == UMPTG::Review::NormalizeAction.NORMALIZED
          update_entry = true
        end
        action.review_msg_list.each do |msg|
          case msg.level
          when UMPTG::Message.INFO
            script_logger.info(msg.text)
          when UMPTG::Message.WARNING
            script_logger.warn(msg.text)
          when UMPTG::Message.ERROR
            script_logger.error(msg.text)
          when UMPTG::Message.FATAL
            script_logger.fatal(msg.text)
          end
        end
      end
    end
    if update_entry
      xml_doc = proc_map[:xml_doc]
      epub.add(entry_name: entry_name, entry_content: UMPTG::XMLUtil.doc_to_xml(xml_doc))
      epub_modified = true
    end
  end
  if epub_modified
    epub_normalized_file = File.join(File.dirname(epub_file), File.basename(epub_file, ".*") + "_normal.epub")
    epub.save(epub_file: epub_normalized_file)
  end
end

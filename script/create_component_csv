#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'ostruct'

# Process the script parameters.
options = OpenStruct.new
options.output_dir = Dir.pwd
options.press = "ebc"
options.fulcrum_host = nil
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-d output_dir] [-f production|preview|staging] monograph_id [monograph_id...]"
  opts.on('-d', '--output_dir [DIRECTORY]', 'Output directory') do |output_dir|
    options.output_dir = output_dir
  end
  opts.on('-f', '--fulcrum_host [production|preview|staging]', 'Fulcrum environment') do |fulcrum_host|
    options.fulcrum_host = fulcrum_host
  end
  opts.on('-p', '--press [bar|ebc]', 'Press') do |press|
    options.press = press.downcase
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    puts opts
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  puts option_parser.help
  exit 0
end

fail "Error: invalid press #{options.press}" unless ["bar", "ebc"].include?(options.press)

# Rest of the parameters is a list of monograph noids.
monograph_id_list = ARGV

output_dir = File.expand_path(options.output_dir)
fail "Error: output directory #{output_dir} is not valid." unless File.directory?(output_dir)

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "services")
require_relative File.join(root_dir, "lib", "manifest")

# Create the serivce for retrieving the NOID.
service = UMPTG::Services::Heliotrope.new(
                :fulcrum_host => options.fulcrum_host
              )

components_list = []
monograph_id_list.each do |monograph_id|
  puts "*" * 10 + " #{monograph_id} " + "*" * 10

  # Retrieve the monograph manifest.
  csv_body = service.monograph_export(identifier: monograph_id)
  if csv_body.nil? or csv_body.empty?
    puts "Error: no manifest found for noid #{monograph_id}"
    next
  end
  manifest = UMPTG::Manifest::Document.new(
                :csv_body => csv_body
              )

  unless manifest.monograph_row.nil?
    sales_id = "**UKNOWN**"

    case options.press
    when "bar"
      identifier = manifest.monograph_row['identifier(s)']
      puts "Warning: no identifier value for BAR noid #{monograph_noid}" if identifier.nil?

      unless identifier.nil?
        identifier_list = identifier.split(';')

        found = false
        identifier_list.each do |id|
          id.strip.downcase!
          if id.start_with?('bar_number:')
            sales_id = id.split(':')[1].strip
            found = true
            break
          end
        end
        puts "Warning: no sails_id found for BAR noid #{monograph_noid}" unless found
      end
    when "ebc"
      sales_id = manifest.monograph_row['doi']
    end

    components_row = [
                "#{manifest.monograph_row['noid']},#{sales_id}"
              ]
    components_list << components_row
  end
end

# Write the temp file. system command may strip out the newlines
components_file = File.join(output_dir, "components.csv")
File.open(components_file, "w") do |fp|
  components_list.each do |row|
    fp.puts row
  end
end

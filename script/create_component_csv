#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'ostruct'

# Process the script parameters.
options = OpenStruct.new
options.output_dir = Dir.pwd
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-d output_dir] monograph_noid [monograph_noid...]"
  opts.on('-d', '--output_dir [DIRECTORY]', 'Output directory') do |output_dir|
    options.output_dir = output_dir
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    puts opts
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  puts option_parser.help
  exit 0
end

monograph_noid_list = ARGV

output_dir = File.expand_path(options.output_dir)
fail "Error: output directory #{output_dir} is not valid." unless File.directory?(output_dir)

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "manifest_new")

components_list = []
monograph_noid_list.each do |monograph_noid|
  puts "*" * 10 + " #{monograph_noid} " + "*" * 10

  manifest = Manifest.new(:noid => monograph_noid)
  raise "Error: creating manifest from noid #{noid}" if manifest.nil?

  unless manifest.monograph_row.nil?
    components_row = [
                "#{manifest.monograph_row['noid']},#{manifest.monograph_row['doi']}"
              ]
    components_list << components_row
  end
end

# Write the temp file. system command may strip out the newlines
components_file = File.join(output_dir, "components.csv")
File.open(components_file, "w") do |fp|
  components_list.each do |row|
    fp.puts row
  end
end

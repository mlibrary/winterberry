#!/usr/bin/env ruby
# frozen_string_literal: true

# Script updates resource 'View asset' links
# for the specified host monograph.

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
options.output_dir = Dir.pwd()
options.fulcrum_host = 'production'
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-f production|preview|staging] <noid> <xhtml_file> [<xhtml_file>...]"
  opts.on('-f', '--fulcrum_host [production|preview|staging]', 'Fulcrum environment') do |fulcrum_host|
    options.fulcrum_host = fulcrum_host
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 2
  script_logger.info(option_parser.help)
  return
end

# Process the command line parameters.
monograph_id = ARGV[0]
xhtml_file_list = ARGV[1..-1]

require_relative File.join(root_dir, "lib", "xml", "util")
require_relative File.join(root_dir, "lib", "services")
require_relative File.join(root_dir, "lib", "fulcrum", "manifest")

script_logger.info("*" * 10 + " #{options.fulcrum_host} #{monograph_id} " + "*" * 10)

service = UMPTG::Services::Heliotrope.new(
                fulcrum_host: options.fulcrum_host
              )

manifest_body = service.monograph_export(noid: monograph_id)

# Use the monograph ID to retrieve the manifest from Fulcrum.
manifest = UMPTG::Fulcrum::Manifest::Document.new(
              csv_body: manifest_body
            )
if manifest.nil?
  script_logger.error("no manifest found for id #{monograph_id}")
  exit(0)
end

xhtml_file_list.each do |xhtml_file|
  xhtml_file = File.expand_path(xhtml_file)
  unless File.file?(xhtml_file)
    script_logger.error("invalid XHTML file #{xhtml_file}")
    next
  end
  script_logger.info("processing XHTML #{File.basename(xhtml_file)}")

  xml_doc = UMPTG::XML.parse(xml_content: File.read(xhtml_file))
  if xml_doc.nil?
    script_logger.error("unable to parse XHTML #{File.basename(xhtml_file)}")
    next
  end
  script_logger.info("setting links in XHTML #{File.basename(xhtml_file)}")

  set_links_cnt = 0
  nlist = xml_doc.xpath("//*[local-name()='a' and @target='_blank']")
  nlist.each do |anode|
    link = ""
    img_list = anode.xpath("./ancestor::*[local-name()='figure'][1]//*[local-name()='img']")
    img_list.each do |inode|
      src = inode['src']
      if src.nil? or src.empty?
        script_logger.error("no @src for image #{inode['id']}")
        next
      end
      resource_name = File.basename(src)
      fileset = manifest.fileset(resource_name)
      if fileset['noid'].empty?
        #script_logger.warn("no fileset found for image #{resource_name}")

        resource_name = File.basename(src, ".*") + "-lg" + File.extname(src)
        fileset = manifest.fileset(resource_name)
        if fileset['noid'].empty?
          script_logger.error("no fileset found for image #{resource_name}")
          next
        end
      end
      link = fileset['link'].nil? ? "" : fileset['link'].strip[12..-3]
      script_logger.info("name:#{resource_name}  #{link}")
    end
    if link.empty?
      script_logger.error("no link found for image #{node['id']}")
      next
    end
    anode['href'] = link
    set_links_cnt += 1
  end

=begin
  nlist = xml_doc.xpath("//*[local-name()='figure']")
  nlist.each do |node|
    link = ""
    img_list = node.xpath(".//*[local-name()='img']")
    img_list.each do |inode|
      src = inode['src']
      if src.nil? or src.empty?
        script_logger.error("no @src for image #{inode['id']}")
        next
      end
      resource_name = File.basename(src)
      fileset = manifest.fileset(resource_name)
      if fileset['noid'].empty?
        #script_logger.warn("no fileset found for image #{resource_name}")

        resource_name = File.basename(src, ".*") + "-lg" + File.extname(src)
        fileset = manifest.fileset(resource_name)
        if fileset['noid'].empty?
          script_logger.error("no fileset found for image #{resource_name}")
          next
        end
      end
      link = fileset['link'].nil? ? "" : fileset['link'].strip[12..-3]
      script_logger.info("name:#{resource_name}  #{link}")
    end
    if link.empty?
      script_logger.error("no link found for image #{node['id']}")
      next
    end

    figcap_list = node.xpath(".//*[@target='_blank']")
    if figcap_list.empty?
      script_logger.error("no anchor found for image #{node['id']}")
      next
    end
    a_node = figcap_list.first
    a_node['href'] = link
    set_links_cnt += 1
  end
=end

=begin
    figcap_list = node.xpath("./*[local-name()='figcaption']")
    if figcap_list.empty?
      figcap_node = node.document.create_element("figcaption")
      node.add_child(figcap_node)

      p_node = figcap_node.document.create_element("p")
      a_node = p_node.document.create_element("a")

      p_node.add_child(a_node)
      p_node['class'] = 'figcap'
      figcap_node.add_child(p_node)
    else
      a_node_list = figcap_list.first.xpath(".//*[local-name()='a']")
      if a_node_list.empty?
        script_logger.error("no anchor found for image #{inode['id']}")
        next
      end
      a_node = a_node_list.first
    end
    a_node.content = "Image information"
    a_node['href'] = link
=end

  if set_links_cnt > 0
    new_xhtml_file = File.join(File.dirname(xhtml_file), \
          File.basename(xhtml_file, ".*") + "_" + File.basename(__FILE__) + File.extname(xhtml_file))
    File.write(new_xhtml_file, xml_doc)
  end
end

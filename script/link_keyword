#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'ostruct'

# Process the script parameters.
options = OpenStruct.new
#options.publisher_dir = Dir.pwd
options.publisher_dir = "s:/Information\ Management/Fulcrum/UMP"
#options.publisher_dir = "c:/Users/tbelc/Documents/winterberry_production/Information\ Management/Fulcrum/UMP/"
options.vendor = "default"
options.fulcrum_host = nil
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} noid <epub_file>"
  opts.on_tail('-h', '--help', 'Print this help message') do
    puts opts
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  puts option_parser.help
  return
end

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require 'erb'
require 'nokogiri'

require_relative File.join(root_dir, 'lib', 'keywords')

noid = ARGV[0]
epub_file = ARGV[1]

epub_file = File.expand_path(epub_file)
unless File.file?(epub_file)
  puts "Error: invalid EPUB file #{epub_file}"
  exit 1
end
puts "Processing file #{File.basename(epub_file)}"

# Create a new EPUB with the resource references detailed
# in the resource map processed.
processed_epub = UMPTG::Keywords::EpubKeywordProcessor.process(
      epub_file: epub_file,
      noid: noid
    )

# Remove the old one if it exists.
processed_epub_file = File.join(File.dirname(epub_file), File.basename(epub_file, ".*") + "_keyword.epub")
FileUtils.remove_file(processed_epub_file, true)

# Save the processed EPUB in the processing directory.
processed_epub.save(epub_file: processed_epub_file)

#!/usr/bin/env ruby
# frozen_string_literal: true

# Script creates a FMSL from the current template.
# If one or more resource directories are specified,
# then entries are added to the FMSL.

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
options.output_file = File.join(File.expand_path("~/Downloads"), "metadata_template.xlsx")
options.fmsl_template_file = File.join(root_dir, "lib", "templates", "Metadata Template v7.xlsx")
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-o output_file] [-t fmsl_template_file] [resource_dir...]"
  opts.on('-o', '--output_file [output_file]', 'FMSL output file') do |output_file|
    options.output_file = output_file
  end
  opts.on('-t', '--fmsl_template [fmsl_template_file]', 'FMSL template file path') do |fmsl_template_file|
    options.fmsl_template_file = fmsl_template_file
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)

resource_dir_list = ARGV

require 'rubyXL'
require 'rubyXL/convenience_methods'

RESOURCE_SHEET_NAME = "USE THIS FOR RESOURCES"

unless File.extname(options.fmsl_template_file) == ".xlsx" \
    or File.extname(options.fmsl_template_file) == ".xls"
  script_logger.error("invalid FMSL template #{options.fmsl_template_file}")
  exit(1)
end

fmsl_xls = RubyXL::Parser.parse(options.fmsl_template_file)

resource_worksheet = fmsl_xls[RESOURCE_SHEET_NAME]
if resource_worksheet.nil?
  script_logger.error("missing resource sheet \"#{RESOURCE_SHEET_NAME}\" #{options.fmsl_template_file}")
  exit(1)
end
script_logger.info("processing sheet \"#{resource_worksheet.sheet_name}\".")

header_row = resource_worksheet[0]
puts header_row.size
headers = []
(0..header_row.size-1).each {|n| headers << header_row[n].value }
file_name_ndx = headers.index("File Name")
title_ndx = headers.index("Title")
resource_type_ndx = headers.index("Resource Type")
max_ndx = title_ndx > file_name_ndx ? title_ndx : file_name_ndx
max_ndx = resource_type_ndx > max_ndx ? resource_type_ndx : max_ndx

row_ndx = 2
resource_dir_list.each do |resource_dir|
  resource_dir = File.expand_path(resource_dir)
  unless Dir.exist?(resource_dir)
    script_logger.error("invalid resource directory \"#{resource_dir}\".")
    next
  end
  script_logger.info("processing resource directory \"#{resource_dir}\".")

  Dir.glob(File.join(resource_dir, "*")).each do |resource_file|
    resource_worksheet.add_row(row_ndx) if resource_worksheet[row_ndx].nil?

    while resource_worksheet[row_ndx].size <= max_ndx
      resource_worksheet.add_cell(row_ndx, resource_worksheet[row_ndx].size)
    end

    case File.extname(resource_file)
    when '.jpg', '.bmp', '.png', '.tif'
      resource_type = 'image'
    when '.zip'
      resource_type = 'interactive map'
    when '.mp3', '.wma', '.wav'
      resource_type = 'audio'
    else
      resource_type = ''
    end

    resource_worksheet[row_ndx][file_name_ndx].change_contents(File.basename(resource_file))
    resource_worksheet[row_ndx][title_ndx].change_contents(File.basename(resource_file))
    resource_worksheet[row_ndx][resource_type_ndx].change_contents(resource_type)

    row_ndx += 1
  end
end

fmsl_xls.write(options.output_file)

#!/usr/bin/env ruby
# frozen_string_literal: true

# Test script for XML::Reviewer class

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
options.normalize = false
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-n] xml_file [xml_file...]"
  opts.on('-n', '--normalize', 'Use which link as resource') do |flag|
    options.normalize = true
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end

# Process the command line parameters.
xml_file_list = ARGV

require 'nokogiri'

require_relative File.join(root_dir, "lib", "xmlutil")
require_relative File.join(root_dir, "lib", "xml", "reviewer")

reviewer = UMPTG::XML::Reviewer::Processor.new(
      name: "XMLProcessor1",
      options: {
          link: false,
          package: false,
          resource: true
      }
    )

xml_file_list.each do |xml_file|
  unless File.file?(xml_file)
    script_logger.error("invalid XML file #{xml_file}")
    exit 1
  end
  script_logger.info("processing XML file #{File.basename(xml_file)}")

  xml_doc = Nokogiri::XML(File.read(xml_file))
  result = reviewer.run(
        xml_doc,
        {
          normalize: options.normalize
        }
      )

  # Report results
  UMPTG::XML::Processor::Action.report_actions(
        actions: result.actions,
        logger: script_logger
        )

  if result.modified
    new_xml_file = File.join(
            File.dirname(xml_file),
            File.basename(xml_file, ".*") + "_reviewed" + File.extname(xml_file)
            )
    UMPTG::XMLUtil.save(xml_doc, new_xml_file)
    script_logger.info("Saved #{new_xml_file}.")
  end
end

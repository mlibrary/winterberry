#!/usr/bin/env ruby
# frozen_string_literal: true

# Generate publishing steps

require 'optparse'
require 'ostruct'
require 'os'

# Process the script parameters.
options = OpenStruct.new
options.bulleit1_dir = "/mnt/umptmm"
options.fulcrum_dir = OS.windows? ? "s:/Information\ Management/Fulcrum" : options.bulleit1_dir
#options.fulcrum_dir = "c:/Users/tbelc/Documents/Fulcrum"
options.press = :ebc
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-d <fulcrum_dir>] [-p press] <task_id> <monograph_id> [<monograph_id>..]"
  opts.on('-p', '--press [press]', 'Press amherst|bar|ebc|heb|ummaa') do |press|
    options.press = press.to_sym
  end
  opts.on('-d', '--directory [DIRECTORY]', 'Fulcrum directory') do |fulcrum_dir|
    options.fulcrum_dir = fulcrum_dir
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    puts opts
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 2
  puts option_parser.help
  return
end

task_id = ARGV[0]
monograph_id_list = ARGV[1..-1]

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require 'fileutils'
require_relative File.join(root_dir, "lib", "logger")
require_relative File.join(root_dir, "lib", "services")
require_relative File.join(root_dir, "lib", "fulcrum", "manifest")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Verify existence of the source/project root directories.
fulcrum_dir = File.expand_path(options.fulcrum_dir)
unless File.directory?(fulcrum_dir)
  script_logger.fatal("source directory #{fulcrum_dir} does not exist.")
  exit 1
end

# Verify press, either UM Press or MPS services.
press_dir = {
        amherst: "MPS",
        bar:   "MPS",
        ebc:   "UMP",
        elt:   "michelt",
        heb:   "MPS",
        maize: "MPS",
        ummaa: "UMMAA"
        }
sub_dir = {
        amherst: "Amherst",
        bar:   "BAR",
        heb:   "HEB",
        maize: "maize"
        }
unless press_dir.key?(options.press)
  script_logger.fatal("invalid press #{options.press}")
  exit 1
end

# Determine publishing directory
publish_dir = File.join(fulcrum_dir, "PTG", "PublishingSteps", \
    press_dir[options.press])
unless File.directory?(publish_dir)
  script_logger.fatal("processing directory #{publish_dir} does not exist.")
  exit 1
end
bulleit1_publish_dir = File.join(options.bulleit1_dir, "PTG", "PublishingSteps", \
                           press_dir[options.press])

# Determine the Fulcrum monograph directory
sd_dir = sub_dir.key?(options.press) ? \
    File.join(press_dir[options.press], sub_dir[options.press]) : \
    press_dir[options.press]
monograph_dept_dir = File.join(fulcrum_dir, sd_dir)
unless File.directory?(monograph_dept_dir)
  script_logger.fatal("monograph directory #{monograph_dept_dir} does not exist.")
  exit 1
end

# Create the task processing directory.
task_dir = File.join(publish_dir, task_id)
FileUtils.mkdir_p task_dir
bulleit1_task_dir = File.join(bulleit1_publish_dir, task_id)
script_logger.info("Using task directory #{File.basename(task_dir)}")

# Create the serivce for retrieving the NOID manifest.
service = UMPTG::Services::Heliotrope.new()

# For each monograph ID, retrieve NOID, DOI, and BAR number
monograph_info = {}
monograph_noid_list = []
monograph_date = {}
monograph_id_list.each do |monograph_id|
  # Process monograph ID.
  script_logger.info("*" * 10 + " #{monograph_id} " + "*" * 10)

  # Find the directory using the monograph id.
  monograph_dir_list = Dir.glob(File.join(monograph_dept_dir, monograph_id + "*"))
  if monograph_dir_list.empty?
    script_logger.warn("monograph directory using id #{monograph_id} not found.")
    monograph_dir = nil
  else
    monograph_dir = monograph_dir_list[0]
    script_logger.warn("Multiple monograph directories found for id #{monograph_id}. Using #{monograph_dir}") \
          if monograph_dir_list.count > 1
    script_logger.info("Using monograph directory #{monograph_dir}") if monograph_dir_list.count == 1
  end

  # Use the monograph ID to retrieve the manifest from Fulcrum.
  case options.press
  when :bar
    #identifier = "bar_number:#{monograph_id}"
    identifier = monograph_id
  when :heb
    identifier = "heb_id:#{monograph_id}"
  else
    identifier = monograph_id
  end
  manifest = UMPTG::Fulcrum::Manifest::Document.new(
                monograph_id: identifier
              )
=begin
  # Use the monograph ID to retrieve the NOID from Fulcrum.
  monograph_noid = service.monograph_noid(identifier: monograph_id)
  if monograph_noid.nil? or monograph_noid.empty?
    script_logger.error("no NOID found for monograph ID #{monograph_id}")
    next
  end

  # Use the monograph NOID to retrieve the monograph manifest from Fulcrum.
  csv_body = service.monograph_export(noid: monograph_noid)
  if csv_body.nil? or csv_body.empty?
    script_logger.error("no manifest found for id #{monograph_id}")
    next
  end
  manifest = UMPTG::Fulcrum::Manifest::Document.new(
                :csv_body => csv_body
              )
=end
  monograph_row = manifest.monograph_row
  monograph_noid = monograph_row['noid']

  # Find EPUB representative NOID
  epub_noid = nil
  epub_row = manifest.representative_row(kind: "epub")
  if epub_row.nil?
    script_logger.error("no EPUB row found for id #{monograph_id}")
  else
    epub_noid = epub_row['noid']
    script_logger.info("using EPUB NOID #{epub_noid} for id #{monograph_id}")
  end

  pdf_noid = nil
  pdf_row = manifest.representative_row(kind: "pdf_ebook")
  if pdf_row.nil?
    script_logger.error("no PDF row found for id #{monograph_id}")
  else
    pdf_noid = pdf_row['noid']
    script_logger.info("using PDF NOID #{pdf_noid} for id #{monograph_id}")
  end

  series_id = ""
  case options.press
  when :amherst, :ebc, :elt, :maize, :ummaa
    series_id = monograph_row["doi"]
  else
    id_list = monograph_row["identifier(s)"]
    unless id_list.nil?
      id_a = id_list.split(';')
      case options.press
      when :bar
        list = id_a.select {|id| id.strip.downcase.start_with?('bar_number:') }
        series_id = list.first.delete_prefix('bar_number:').strip unless list.empty?
      when :heb
        list = id_a.select {|id| id.strip.downcase.match?(/^heb[0-9]{5}\.[0-9]{4}\.[0-9]{3}/) }
        series_id = list.first.delete_prefix('bar_number:').strip unless list.empty?
      end
    end
  end

  pub_date_str = monograph_row['pub_year']
  if pub_date_str.nil?
    script_logger.warn("pub_year not specified for id #{monograph_id}")
    pub_date = Date.today
  else
    pub_date = Date.strptime(pub_date_str, '%Y')
  end

  open_access = ""
=begin
  # This is not for OA, but for Free to Read.
  unless monograph_row['open_access?'].nil? or monograph_row['open_access?'].downcase == 'no'
    open_access = "open_access"
  else
    open_access = ""
  end
=end

  minfo = {
       monograph_dir: monograph_dir,
       monograph_noid: monograph_noid,
       epub_noid: epub_noid,
       pdf_noid: pdf_noid,
       monograph_doi: monograph_row["doi"],
       monograph_series: series_id,
       monograph_pub_date: pub_date,
       monograph_open_access: open_access
       }

  monograph_info[monograph_id] = minfo
  monograph_noid_list << monograph_noid
end

# Write components file.
components_files = {}
case options.press
when :heb
  cfile = File.join(task_dir, "noid_heb.csv")
  File.open(cfile, "w") do |fp|
    monograph_info.each do |monograph_id,minfo|
      fp.puts "#{minfo[:monograph_noid]},#{minfo[:monograph_series]}"
    end
  end
  bulleit1_cfile = File.join(bulleit1_task_dir, File.basename(cfile))
  components_files["heb"] = bulleit1_cfile
else
  component_product = {}
  monograph_info.each do |monograph_id,minfo|
    pub_year = minfo[:monograph_pub_date].year

    if options.press == :ebc and pub_year <= 2011
      perd = "2011pre"
    elsif options.press == :bar and pub_year < 2020
      perd = "pre"
    else
      perd = pub_year.to_s
    end

    case options.press
    when :ebc, :elt, :ummaa
      product = "ebc_" + perd
    else
      product = options.press.to_s + "_" + perd
    end
    if component_product.key?(product)
      component_product[product] << minfo
    else
      component_product[product] = [minfo]
    end

    case options.press
    when :bar
      if minfo[:monograph_series][0].downcase == 'b'
        product += "_brit"
      else
        product += "_int"
      end
    when :ebc, :elt, :ummaa
      product = "ebc_backlist"
    end
    if component_product.key?(product)
      component_product[product] << minfo
    else
      component_product[product] = [minfo]
    end

    unless minfo[:monograph_open_access].empty?
      case options.press
      when :ebc, :elt, :ummaa, :amherst
        product = "ebc_open"
      else
        raise "Found open access for press #{options.press}"
      end
      if component_product.key?(product)
        component_product[product] << minfo
      else
        component_product[product] = [minfo]
      end
    end
  end

  component_product.each do |product,minfo_list|
    cfile = File.join(task_dir, "noid_#{product}.csv")
    File.open(cfile, "w") do |fp|
      minfo_list.each do |minfo|
        fp.puts "#{minfo[:monograph_noid]},#{minfo[:monograph_series]}"
      end
    end
    bulleit1_cfile = File.join(bulleit1_task_dir, File.basename(cfile))
    components_files[product] = bulleit1_cfile
  end
end

# Write the commands file.
cmds_file = File.join(task_dir, task_id + ".txt")
File.open(cmds_file, "w") do |fp|
  fp.puts "# Import resources"
  monograph_info.each do |monograph_id,minfo|
    noid = minfo[:monograph_noid]

    prefix = ""
    monograph_dir = minfo[:monograph_dir]
    unless monograph_dir.nil?
      resources_dir_list = Dir.glob(File.join(monograph_dir, "[Rr]esources"))

      bulleit1_monograph_dir = File.join(
                  options.bulleit1_dir,
                  sd_dir,
                  File.basename(monograph_dir)
                )
      if resources_dir_list.empty?
        script_logger.warn("no resources directory found for #{File.basename(monograph_dir)}")
        resources_dir = File.join(bulleit1_monograph_dir, "Resources")
        prefix = "#"
      else
        resources_dir = File.join(bulleit1_monograph_dir, File.basename(resources_dir_list.first))
      end
      fp.puts "#{prefix}sudo -u heliotrope-production RAILS_ENV=production bundle exec script/import -m #{noid} -d #{resources_dir}"
      fp.puts
    end
  end
  fp.puts "# Create components (nectar)"
  components_files.each do |product,comp_file|
    fp.puts "bundle exec ruby bin/restrict_items.rb -f #{comp_file} -p #{product} >& #{bulleit1_task_dir}/restrict_items_#{product}.log"
    fp.puts
  end
  fp.puts "# Rails console"
  fp.puts "sudo -u heliotrope-production RAILS_ENV=production bundle exec rails console"
  fp.puts
  fp.puts "# Unpack representatives"
  monograph_info.each do |monograph_id,minfo|
    mminfo = minfo.delete_if {|key,value| key == :monograph_dir}

    epub_noid = minfo[:epub_noid]
    pdf_noid = minfo[:pdf_noid]

    fp.puts "#{monograph_id}:"
    fp.puts "\tUnpackJob.perform_now('','')" if epub_noid.nil? and pdf_noid.nil?
    fp.puts "\tUnpackJob.perform_now('#{minfo[:epub_noid]}','epub')" unless epub_noid.nil?
    fp.puts "\tUnpackJob.perform_now('#{minfo[:pdf_noid]}','pdf_ebook')" unless pdf_noid.nil?
  end
  fp.puts

  fp.puts "# Publish monographs (bulleit-1)"
  fp.puts "%w[#{monograph_noid_list.join(' ')}].each do |noid|"
  fp.puts "  monograph = Monograph.find(noid)"
  fp.puts "  if monograph.nil?"
  fp.puts "    puts \"Error: no monograph for NOID \#{noid}.\""
  fp.puts "  else"
  fp.puts "    puts \"Publishing monograph \#{noid}.\""
  fp.puts "    PublishJob.perform_later(monograph)"
  fp.puts "  end"
  fp.puts "end;0"
  fp.puts

  fp.puts "# Monograph information"
  fp.puts monograph_info.keys.join(' ')
  monograph_info.each do |monograph_id,minfo|
    mminfo = minfo.delete_if {|key,value| key == :monograph_dir}
    fp.puts "#{monograph_id},#{mminfo.values.join(',')}"
  end

  fp.puts
  fp.puts "# Publishing ticket comment"
  fp.puts "[~mbakeryo]"
  fp.puts "Created the components *#{components_files.keys.join('*, *')}* and marked the monographs public. The results can be found in the attached zip files:"
  fp.puts
  fp.puts
  fp.puts "Reassigning to [~jvanderw]."
  fp.puts
  fp.puts "# Create monographs"
  fp.puts "find /mnt/umptmm/<monograph_dir>/ -maxdepth 1 -mindepth 1 -type d -print0 | sort -zn | xargs -0 -I '{}' echo sudo -u heliotrope-production RAILS_ENV=production bundle exec script/import -d '{}' -p <heb|michigan|um-pccn> -v private -q"
  fp.puts
  fp.puts "# Replace resources"
  fp.puts "sudo -u heliotrope-production RAILS_ENV=production bundle exec rake \"heliotrope:replace_files[/mnt/umptmm/<directory>, noid]\""
  fp.puts
  fp.puts "# Retrieve NOIDs"
  fp.puts "sudo -u heliotrope-production RAILS_ENV=production bundle exec rake \"heliotrope:qc_csv_heb[2018-06-08T00:00:00-04:00]\""
end

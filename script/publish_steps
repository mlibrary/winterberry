#!/usr/bin/env ruby
# frozen_string_literal: true

# Generate publishing steps data files
# Usage: publish_steps [-d <fulcrum_dir>] <task_id> <monograph_id> [<monograph_id>..]
#      -d, --directory [DIRECTORY]      Fulcrum directory
#      -h, --help
#      task_id                          JIRA task, e.g. FOPS-xxxx
#      monograph_id                     monograph ISBN|DOI|bar_number:[SB]xxxx|heb_id:hebxxxxx.xxxx.xxx

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "press")

# Process the script parameters.
options = OpenStruct.new
options.greensub_dir = "/mnt/umptmm"
options.application_dir = "/fulcrum/data/tmm"
options.fulcrum_dir = OS.windows? ? "s:/Information\ Management/Fulcrum" : options.application_dir
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-d <fulcrum_dir>] <task_id> <monograph_id> [<monograph_id>..]"
  opts.on('-d', '--directory [DIRECTORY]', 'Fulcrum directory') do |fulcrum_dir|
    options.fulcrum_dir = fulcrum_dir
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    puts opts
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 2
  puts option_parser.help
  exit 0
end
task_id = ARGV[0]
monograph_id_list = ARGV[1..-1]

require 'fileutils'
require_relative File.join(root_dir, "lib", "logger")
require_relative File.join(root_dir, "lib", "services")
require_relative File.join(root_dir, "lib", "fulcrum", "manifest")
require_relative File.join(root_dir, "lib", "fulcrum", "monographdir")

# Create a logger for the script
script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Verify existence of the Fulcrum shared directory.
fulcrum_dir = File.expand_path(options.fulcrum_dir)
unless File.directory?(fulcrum_dir)
  script_logger.fatal("source directory #{fulcrum_dir} does not exist.")
  exit 1
end

# Verify publishing steps directories
ptg_dir = "PTG"
publish_dir = File.join(fulcrum_dir, ptg_dir, "PublishingSteps", "AllPresses")
unless File.directory?(publish_dir)
  script_logger.fatal("processing directory #{publish_dir} does not exist.")
  exit 1
end
application_publish_dir = File.join(options.application_dir, ptg_dir, "PublishingSteps", "AllPresses")
greensub_publish_dir = File.join(options.greensub_dir, ptg_dir, "PublishingSteps", "AllPresses")

# Create the serivce for retrieving the NOID manifest.
service = UMPTG::Services::Heliotrope.new()

# Class for holding monograph shared directory info.
class MonographInfo
  attr_accessor :monograph_dir, :monograph_system_dir, :isbn, \
      :monograph_noid, :epub_noid, :pdf_noid

  def initialize(args = {})
    @monograph_noid = args[:monograph_noid]
    @monograph_dir = args[:monograph_dir]
    @monograph_system_dir = args[:monograph_system_dir]
    @isbn = args[:isbn]
    @epub_noid = args[:epub_noid]
    @pdf_noid = args[:pdf_noid]
  end
end

# For each monograph_id:
#   retrieve the monograph
#   determine/collect the monograph products
#   determine/collect the monograph shared directory info
#
monograph_info = {}
product_component_list = {}
monograph_id_list.each do |monograph_id|
  # Process monograph ID.
  script_logger.info("*" * 10 + " #{monograph_id} " + "*" * 10)
  STDOUT.flush

  manifest_response = service.monograph_export(identifier: monograph_id)
  manifest_response.values.each do |manifest_body_list|
    if manifest_body_list.empty?
      script_logger.warn("no manifest found")
      next
    end
    manifest_body_list.each do |manifest_body|
      # From the manifest CSV, create a Fulcrum manifest object.
      manifest = UMPTG::Fulcrum::Manifest::Document.new(
                    csv_body: manifest_body
                  )

      # Retrieve the monograph row entry.
      if manifest.monograph_row.nil?
        script_logger.error("Fulcrum monograph manifest not found")
        next
      end
      script_logger.info("Fulcrum monograph manifest found #{manifest.noid}")

      # Determine the press, Publication Date
      monograph_press = manifest.press.downcase
      pub_date_str = manifest.monograph_row['pub_year']
      if pub_date_str.nil?
        script_logger.warn("pub_year not specified for id #{monograph_id}")
        pub_date = Date.today
      else
        pub_date = Date.strptime(pub_date_str, '%Y')
      end

      # Determine the monograph products.
      # Generate a hash, mapping product name to
      # a list of NOID,SeriesId pairs.
      series_id = manifest.series_id
      entry = "#{manifest.noid},#{series_id}"
      products = []
      case monograph_press
      when "barpublishing"
        if series_id.nil?
          script_logger.warn("no series ID assigned. Skipping.")
          next
        end

        s = series_id.downcase.start_with?('b') ? 'brit' : 'int'
        p = pub_date.year > 2020 ? "bar_#{pub_date.year}" : "bar_pre"
        products += [p, "#{p}_#{s}"]
      when "michigan"
        p = pub_date.year > 2011 ? "ebc_#{pub_date.year}" : "ebc_2011pre"
        products += [p, "ebc_complete"]
        products << "ebc_oa" if manifest.open_access
      else
        products << monograph_press
      end
      products.each do |prod_id|
        product_component_list[prod_id] = product_component_list[prod_id].nil? ? \
            product_component_list[prod_id] = [entry] : \
            product_component_list[prod_id] << entry
      end

      # Determine the Fulcrum press shared directory
      case monograph_press
      when 'barpublishing'
        sd_dir = File.join('Fulcrum_Unsynced', monograph_press)
        monograph_press_dir = 's:/Information\ Management/Fulcrum/Fulcrum_Unsynced/barpublishing/Fulcrum/'
        #monograph_press_dir = File.join(fulcrum_dir, sd_dir, 'Fulcrum')
      else
        press_name = monograph_press == "michigan" ? "UMP" : monograph_press
        monograph_press_dir = sd_dir = nil
        ["Fulcrum_Synced", "Fulcrum_Unsynced"].each do |d|
          sd_dir = File.join(d, press_name)
          mdd = File.join(fulcrum_dir, sd_dir)
          next unless File.directory?(mdd)

          monograph_press_dir = mdd
          break
        end
      end
      if monograph_press_dir.nil?
        script_logger.error("no press directory found for #{monograph_press}.")
      else
        script_logger.info("found press directory #{monograph_press}.")
      end

      # Find the monograph shared directory within
      # the press directory using the monograph ISBNs.
      monograph_dir = isbn = nil
      manifest.isbn.each do |format,bn|
        monograph_dir_list = Dir.glob(File.join(monograph_press_dir, bn.gsub(/-/, '') + "*"))
        if monograph_dir_list.empty?
          script_logger.warn("monograph directory using id #{bn} not found.")
        else
          isbn = bn
          #monograph_dir_path = monograph_dir_list[0]
          monograph_dir_path = monograph_dir_list.last
          script_logger.warn("multiple monograph directories found for id #{monograph_id}. Using #{monograph_dir_path}") \
                if monograph_dir_list.count > 1
          #script_logger.info("using monograph directory #{monograph_dir_path}") if monograph_dir_list.count == 1

          mdir = UMPTG::Fulcrum::MonographDir.new(
                      monograph_dir: monograph_dir_path,
                      logger: script_logger
                  )
          if mdir.monograph_dir.nil?
            script_logger.error("monograph directory object not created #{monograph_dir_path}")
            next
          end
          monograph_dir = mdir
          script_logger.info("monograph directory object created #{monograph_dir.monograph_dir}")
          break
        end
      end

      # Create/store the monograph shared directory info object
      # and map the monograph ID to the object.
      epub_row = manifest.representative_row(kind: "epub")
      epub_noid = epub_row.nil? ? "" : epub_row['noid']
      pdf_row = manifest.representative_row(kind: "pdf_ebook")
      pdf_noid = pdf_row.nil? ? "" : pdf_row['noid']
      monograph_system_dir = File.join("#{File::SEPARATOR}#{monograph_dir.monograph_dir[0]}", monograph_dir.monograph_dir[2..-1].gsub(' ', '\ ')) \
            unless monograph_dir.nil?

      monograph_info[monograph_id] = MonographInfo.new(
              monograph_dir: monograph_dir,
              monograph_system_dir: monograph_system_dir,
              isbn: isbn,
              monograph_noid: manifest.noid,
              epub_noid: epub_noid,
              pdf_noid: pdf_noid
            )
    end
  end
end

# Create the task processing directory.
task_dir = File.join(publish_dir, task_id)
application_task_dir = File.join(application_publish_dir, task_id)
greensub_task_dir = File.join(greensub_publish_dir, task_id)
script_logger.info("Using task directory #{File.basename(task_dir)}")
FileUtils.mkdir_p task_dir

# Write components files.
product_component_list.each do |product,component_list|
  p = File.join(task_dir, product + ".csv")
  File.write(p, component_list.join("\n") + "\n")
end

# Write the commands file.
cmds_file = File.join(task_dir, task_id + ".txt")
File.open(cmds_file, "w") do |fp|
  fp.puts "# Server information fulcrum-21{1,2}"
  fp.puts "[tbelc@tang:~]$ eval `ssh-agent -s`"
  fp.puts "[tbelc@tang:~]$ ssh-add ~/.ssh/heliotrope-deploy"
  fp.puts "Enter passphrase for /home/tbelc/.ssh/heliotrope-deploy: deploy"
  fp.puts "Identity added: /home/tbelc/.ssh/heliotrope-deploy (/home/tbelc/.ssh/heliotrope-deploy)"
  fp.puts "[tbelc@tang:~]$ ssh -A fulcrum@fulcrum-211"
  fp.puts "[fulcrum@fulcrum-211:~]$ cd app/current"
  fp.puts "[fulcrum@fulcrum-211:~/app/current]$ "
  fp.puts

  fp.puts "# Migrate FMSLs"
  monograph_info.values.each do |minfo|
    next if minfo.monograph_dir.nil? or minfo.monograph_dir.fmsl_file.nil?
    f = File.join("/#{minfo.monograph_dir.fmsl_file[0]}", minfo.monograph_dir.fmsl_file[2..-1].gsub(' ', '\ '))
    fp.puts "bundle exec ruby script#{File::SEPARATOR}migrate_fmsl -c #{f}"
  end
  fp.puts
  fp.puts "# Process resources"
  monograph_info.values.each do |minfo|
    unless minfo.monograph_dir.nil?
      prefix = minfo.monograph_dir.fmsl_file.nil? ? "#" : ""

      fp.puts "#{prefix}bundle exec ruby script#{File::SEPARATOR}monograph_resource_metadata #{minfo.monograph_system_dir}"
    end
  end
  isbn_list = monograph_info.values.collect {|v| v.isbn.gsub(/-/,'') unless v.isbn.nil? }
  fp.puts
  fp.puts "# Review monographs"
  monograph_info.values.each do |v|
    fp.puts "bundle exec ruby script#{File::SEPARATOR}review_monograph -n -u #{v.monograph_system_dir}" \
        unless v.monograph_system_dir.nil?
  end
  fp.puts
  fp.puts "# Import resources"
  monograph_info.values.each do |minfo|
    prefix = ""
    unless minfo.monograph_dir.nil?
      application_monograph_dir = File.join(
                  options.application_dir,
                  minfo.monograph_dir.monograph_dir.delete_prefix(fulcrum_dir)
                )
      if minfo.monograph_dir.fmsl_file.nil?
        resources_dir = File.join(application_monograph_dir, "Resources")
        prefix = "#"
      else
        resources_dir = File.join(application_monograph_dir, File.basename(minfo.monograph_dir.resources_dir))
      end
      fp.puts "#{prefix}bundle exec script#{File::SEPARATOR}import -m #{minfo.monograph_noid} -v private -d #{resources_dir}"
    end
  end
  fp.puts
  fp.puts "# Create components (nectar)"
  product_component_list.keys.each do |product|
    cf = File.join(greensub_task_dir, product + ".csv")
    lf = File.join(greensub_task_dir, "restrict_items_" + product + ".log")
    fp.puts "bundle exec ruby bin#{File::SEPARATOR}restrict_items.rb -f #{cf} -p #{product} >& #{lf}"
  end
  fp.puts
  fp.puts "# DOI Submission"
  includes_file = File.join(task_dir, "doi_submission_includes.csv")
  File.open(includes_file, "w") do |f|
    f.puts "ISBN"
    f.puts isbn_list.join("\n")
  end
  tocrossref_dir = File.join(fulcrum_dir, "TMMDataTransfer", "ToCrossref")
  tocrossref_pattern = File.join(tocrossref_dir, "*_MPS_UMPRE.xml")
  src_tocrossref_file = Dir.glob(tocrossref_pattern).last
  dest_tocrossref_file = File.join(task_dir, File.basename(src_tocrossref_file))
  fp.puts "bundle exec ruby script#{File::SEPARATOR}crossref_generate -l fulcrum -i #{includes_file.gsub(' ', '\ ')} #{dest_tocrossref_file.gsub(' ', '\ ')}"
  FileUtils.copy(src_tocrossref_file, dest_tocrossref_file)
  fp.puts
  fp.puts "# Rails console"
  monograph_noid_list = monograph_info.values.collect {|v| v.monograph_noid}
  fp.puts "bundle exec rails console"
  fp.puts
  fp.puts "# Publish monographs (fulcrum-211)"
  fp.puts "%w[#{monograph_noid_list.join(' ')}].each do |noid|"
  fp.puts "\tPublishJob.perform_now(Monograph.find(noid))"
  fp.puts "end;0"
  fp.puts
  fp.puts "# Register fileset DOIs"
  fp.puts "%w[#{monograph_noid_list.join(' ')}].each do |noid|"
  fp.puts "\tdoc = Crossref::FileSetMetadata.new(\"noid\").build"
  fp.puts "\tresponse = Crossref::Register.new(doc.to_xml).post"
  fp.puts "end;0"
  fp.puts
  fp.puts "# Resource processing ticket comment"
  fp.puts "[~jilliand] [~mhylton] [~mbakeryo]"
  fp.puts "Resource processed the following titles:"
  monograph_info.each do |monograph_id,minfo|
    unless minfo.monograph_dir.nil? or minfo.monograph_dir.fmsl_file.nil?
      fp.puts "# #{File.basename(minfo.monograph_dir.monograph_dir)}"
    end
  end
  fp.puts "No Fulcrum EPUB Specification infractions found with the following titles. UnpackJob was executed in the Fulcrum Rails console to force the resources to be embedded and the EPUBs have been updated on Fulcrum."
  fp.puts "# "
  fp.puts
  fp.puts "Fulcrum EPUB Specification infractions were found for the following titles. The EPUBs for these were normalized and should be updated on Fulcrum overnight."
  fp.puts "# "
  fp.puts
  fp.puts "The following issues were encountered and corrected:"
  fp.puts "# "
  fp.puts
  fp.puts "# Publishing ticket comment"
  fp.puts "[~mbakeryo]"
  fp.puts "Created the components *#{product_component_list.keys.join('*, *')}* and marked the monographs public. Also, the DOIs were successfully submitted to Crossref for deposit. The results can be found in the attached zip files:"
  fp.puts "#{task_id}.zip"
  fp.puts
  fp.puts "Reassigning to [~mbakeryo]."
  fp.puts
  fp.puts "# Unpack EPUB representatives"
  epub_noid_list = monograph_info.values.collect {|minfo| minfo.epub_noid}
  fp.puts "%w[#{epub_noid_list.join(' ')}].each do |noid|"
  fp.puts "\tUnpackJob.perform_now(noid,'epub')"
  fp.puts "end;0"
  fp.puts
  fp.puts "# Unpack PDF representatives"
  pdf_noid_list = monograph_info.values.collect {|minfo| minfo.pdf_noid}
  fp.puts "%w[#{pdf_noid_list.join(' ')}].each do |noid|"
  fp.puts "\tUnpackJob.perform_now(noid,'pdf_ebook')"
  fp.puts "end;0"
  fp.puts
  fp.puts "# Create resource derivatives (missing thumbnails)"
  fp.puts "CreateDerivativesJob.perform_later(FileSet.find('fileset_noid'), FileSet.find('fileset_noid').original_file.id, nil)"
  fp.puts
  fp.puts "# Create monographs"
  fp.puts "find /mnt/umptmm/<monograph_dir>/ -maxdepth 1 -mindepth 1 -type d -print0 | sort -zn | xargs -0 -I '{}' echo bundle exec script/import -d '{}' -p <heb|michigan|um-pccn> -v private -q"
  fp.puts
  fp.puts "# Replace resources"
  fp.puts "bundle exec rake \"heliotrope:replace_files[#{File.join(options.application_dir, ptg_dir, "replace_files")}, noid]\""
  fp.puts
  fp.puts "# Retrieve NOIDs"
  fp.puts "bundle exec rake \"heliotrope:qc_csv_heb[2018-06-08T00:00:00-04:00]\""
end
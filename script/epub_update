#!/usr/bin/env ruby
# frozen_string_literal: true

# Script takes a list of EPUBs, determines the list of
# CSS stylesheets and outputs info about each, and
# possibly replaces stylesheets

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
options.css_file_list = []
options.force_update = false
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-f] [-c css_file] epub_file [epub_file...]"
  opts.on('-c', '--css [css_file]', 'CSS replacement') do |css_file|
    options.css_file_list << css_file
  end
  opts.on('-f', '--css [css_file]', 'CSS replacement') do |css_file|
    options.force_update = true
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end
epub_file_list = ARGV

require 'css_parser'

require_relative File.join(root_dir, 'lib', 'epub')

def fulcrum_css_version(css_content)
  # Check to see if this is a Fulcrum CSS stylesheet.
  matches = css_content.downcase.match('\/\/[ \t]*about:.*fulcrum[ \t]+')
  return '' if matches.nil?

  # Is Fulcrum CSS. Attempt to determine the version.
  matches = css_content.match('\/\/[ \t]+[Vv]ersion[ \t]+([0-9\.]+)')
  return '' if matches.nil?

  # Found the version.
  css_version = matches.captures.first
  return css_version
end

# Process the new Fulcrum CSS stylesheet.
# Load it and attempt to determine its version.
# Exit if it appears to be invalid.
css_file = options.css_file_list.first
if css_file.nil?
  script_logger.error("no Fulcrum CSS stylesheet specified.")
  exit 1
end

css_file_name = File.basename(css_file)
css_content = File.read(css_file)
css_parser = CssParser::Parser.new
css_parser.load_string!(css_content)
css_version = fulcrum_css_version(css_content)
if css_version.empty?
  script_logger.error("Fulcrum version not found for #{File.basename(css_file)}")
  exit 1
end
script_logger.info("version #{css_version} found for #{File.basename(css_file)}")

# Travese the list of EPUB files to update.
epub_file_list.each do |epub_file|
  epub_file = File.expand_path(epub_file)
  unless File.exists?(epub_file)
    script_logger.error("invalid EPUB file path #{epub_file}.")
    next
  end
  script_logger.info("*** processing #{File.basename(epub_file)} ***")
  STDOUT.flush

  # Load the EPUB.
  epub = UMPTG::EPUB::Archive.new(epub_file: epub_file)
  next if epub.nil?

  unless css_file.nil?
    # Traverse the list of EPUB CSS files and attempt
    # to determine the one to replace.
    epub_css_entry_list = {}
    epub.css.each do |epub_css_entry|
      script_logger.info("considering CSS file #{epub_css_entry.name}")

      # Check to see if this is a Fulcrum CSS stylesheet.
      epub_css_version = fulcrum_css_version(epub_css_entry.content)
      if epub_css_version.empty?
        if options.force_update
          script_logger.warn("appears to not be a Fulcrum CSS stylesheet. Forcing update.")
        else
          script_logger.warn("appears to not be a Fulcrum CSS stylesheet. Skipping update.")
          next
        end
      end
      epub_css_entry_list[epub_css_version] = epub_css_entry
      script_logger.info("version #{epub_css_version} found.")
    end
    STDOUT.flush

    # Traverse the list of EPUB CSS files.
    epub_css_entry_list.each do |epub_css_version,epub_css_entry|
      script_logger.info("processing CSS file #{epub_css_entry.name}")

      # Parse the CSS stylesheet and attempt to determine
      # which classes are used in the EPUB instances,
      # are defined in the original CSS,
      # but are not defined in the latest version of the CSS.
      # Checking for instances of:
      #   h1 {...}
      #   .my_class {..}
      #   h1.my_class {..}
      # These classes are considered to be necessary.
      epub_css_parser = CssParser::Parser.new
      epub_css_parser.load_string!(epub_css_entry.content)
      rulesets_found = {}
      epub.spine.each do |epub_entry|
        script_logger.info("processing spine entry #{epub_entry.name}")

        xml_doc = UMPTG::XMLUtil.parse(xml_content: epub_entry.content)

        # Retrieve all class names used in this HTML instance.
        xml_doc.xpath("//*[@class]").each do |node|
          node.classes.each do |cl|
            dot_cl = "." + cl
            elem_dot_cl = node.name + dot_cl

            # If this class has been processed, then we can skip it.
            next if rulesets_found.key?(cl) or rulesets_found.key?(dot_cl) or rulesets_found.key?(elem_dot_cl)

            # Process this class, starting with
            #   element_name {..} definition.
            key = cl
            epub_css_ruleset = epub_css_parser.find_by_selector(key)
            css_ruleset = css_parser.find_by_selector(key)
            if epub_css_ruleset.empty? and css_ruleset.empty?

              # No definitions found for this class in both CSS files. Try
              #   .my_class {..} definition.
              key = dot_cl
              epub_css_ruleset = epub_css_parser.find_by_selector(key)
              css_ruleset = css_parser.find_by_selector(key)
              if epub_css_ruleset.empty? and css_ruleset.empty?

                # No definitions found for this class in both CSS files. Try
                #   element_name.my_class {..} definition.
                key = elem_dot_cl
                epub_css_ruleset = epub_css_parser.find_by_selector(key)
                css_ruleset = css_parser.find_by_selector(key)
              end
            end

            if epub_css_ruleset.empty? and css_ruleset.empty?
              # No definitions found in both CSS files.
              status = :not_found
            elsif epub_css_ruleset.empty?
              # Definition found in the EPUB CSS, but not new CSS.
              status = :new_epub_found
            elsif css_ruleset.empty?
              # No definition found in the EPUB CSS, but found in new CSS.
              status = :epub_found
            else
              # Definition found in both CSS files.
              status = :both_found
            end

            # Record the determination to avoid duplication
            # and for later processing.
            rulesets_found[key] = status
          end
        end

        # If the name of the CSS file is to change,
        # need to update the reference within this
        # spine entry.
        entry_modified = false
        xpath = "/*[local-name()='html']/*[local-name()='head']/*[local-name()='link' and @type='text/css']"
        xml_doc.xpath(xpath).each do |node|
          entry_css_path = node['href']
          next unless File.basename(entry_css_path) == File.basename(epub_css_entry.name)

          new_entry_css_path = File.join(File.dirname(entry_css_path), css_file_name)
          node['href'] = new_entry_css_path
          entry_modified = true
        end

        if entry_modified
          epub.add(
              entry_name: epub_entry.name,
              entry_content: UMPTG::XMLUtil.doc_to_xml(xml_doc)
              )
        end
      end

      # Determine if any necessary classes were found.
      needed_rulesets = rulesets_found.select {|key,status| status == :epub_found}
      if needed_rulesets.empty?
        # None found.
        script_logger.info("no legacy definitions found for inclusion.")
      else
        # Found some. Update the new CSS file with these classes.
        css_content += "\n\n/* Legacy classes from version #{epub_css_version} */\n\n"
        needed_rulesets.each do |key,status|
          script_logger.info("adding definition #{key} to new CSS for inclusion.")
          epub_css_ruleset = epub_css_parser.find_by_selector(key)
          css_content += "#{key} {\n\t#{epub_css_ruleset.join("\n")}\n}\n"
        end
      end

      # Update the EPUB with the new CSS file.
      # Use the basename of the new CSS file as
      # the name of the updated EPUB CSS file.
      script_logger.info("replacing CSS stylesheet #{epub_css_entry.name} version #{epub_css_version} with #{css_version}.")
      #epub.add(entry_name: epub_css_entry.name, entry_content: css_content)
      epub.remove(entry_name: epub_css_entry.name)
      new_entry_name = File.join(File.dirname(epub_css_entry.name), css_file_name)
      epub.add(entry_name: new_entry_name, entry_content: css_content)
    end
  end

  if epub.modified
    # Update the OPF file to have the name
    # of the new CSS file.
    opf_doc = UMPTG::XMLUtil.parse(xml_content: epub.opf.content)
    xpath = "//*[local-name()='manifest']/*[local-name()='item' and @media-type='text/css']"
    opf_doc.xpath(xpath).each do |node|
      href = node['href']
      epub_css_entry_list.each do |epub_css_version,epub_css_entry|
        next unless File.basename(href) == File.basename(epub_css_entry.name)

        node['href'] = File.join(File.dirname(href), css_file_name)
        script_logger.info("EPUB OPF entry #{href} updated to #{node['href']}.")
      end
    end
    epub.add(
          entry_name: epub.opf.name,
          entry_content: UMPTG::XMLUtil.doc_to_xml(opf_doc)
          )
    script_logger.info("EPUB OPF updated")

    # EPUB updated. Save it to a new file.
    new_epub_file = File.join(File.dirname(epub_file), File.basename(epub_file, ".*") + "_replace" + File.extname(epub_file))
    script_logger.info("EPUB updated. Writing new EPUB file #{File.basename(new_epub_file)}")
    epub.save(epub_file: new_epub_file)
  else
    # No EPUB updates.
    script_logger.info("no updates for EPUB file #{File.basename(epub_file)}")
  end

  script_logger.info()
  STDOUT.flush
end

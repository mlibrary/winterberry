#!/usr/bin/env ruby
# frozen_string_literal: true

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require 'csv'
require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

require 'optparse'
require 'ostruct'

# Process the script parameters.
options = OpenStruct.new
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} csv_file [csv_file...]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end

csv_file_list = ARGV

require_relative File.join(root_dir, "lib", "csvfile")

csv_file_list.each do |csv_file|
  csv_file = File.expand_path(csv_file)
  if !File.file?(csv_file)
    script_logger.error("invalid CSV file #{csv_file}")
    next
  end
  script_logger.info("updating FMSL #{csv_file}")

  csv = CSVFile.read(:csv_path => csv_file)
  if csv.nil?
    script_logger.error("reading CSV #{csv_file}.")
    next
  end

  epub_row = csv.find {|row| File.extname(row['File Name']) == ".epub"}
  if epub_row.nil?
    script_logger.error("finding EPUB row in CSV #{csv_file}.")
    next
  end
  pdf_file = File.basename(epub_row['File Name'], ".*") + ".pdf"

  new_csv_file = File.join(File.dirname(csv_file), File.basename(csv_file, ".*") + "_with_pdf.csv")
  CSV.open(
          new_csv_file,
          "w",
          :write_headers=> true,
          :headers => csv.headers
        ) do |c|
    csv.each do |row|
      if row['File Name'] == "://:MONOGRAPH://:"
        c << {
                "File Name" => pdf_file,
                "Title" => pdf_file,
                "Representative Kind" => "pdf_ebook"
             }
      end
      c << row
    end
  end
end

#!/usr/bin/env ruby
# frozen_string_literal: true

# This script process a project directory by determining the necessary
# resource actions and invoking the proper action for each resource.
#
# Invoke this script without any parameters to display the usage.
#
# The main function of this script is to traverse each epub xhtml file
# and for each resource referenced, modify the markup to allow for
# the resource to be appear either embedded in the epub, or to provide a link
# to that resource Fulcrum resource page.

require 'optparse'
require 'ostruct'

require 'csv'
require 'fileutils'
require 'zip'

# Process the script parameters.
options = OpenStruct.new
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-e] [-d embed|link] <project_dir> [<project_dir>..]"
  opts.on('-d', '--default_action embed|link', 'Default action embed or link') do |da|
    options.default_action_str = da
  end
  opts.on('-e', '--execute', 'Execute actions') do |da|
    options.execute = true
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    puts opts
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  puts option_parser.help
  return
end

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, 'lib', 'csv_file')
require_relative File.join(root_dir, 'lib', 'manifest')
require_relative File.join(root_dir, 'lib', 'resources')

# Determine the default action, either embed or link.
default_action_str = options.default_action_str || "embed"

# Rest of the parameters is a list of project directories.
project_dir_list = ARGV

# Verify the default action.
if default_action_str != "embed" and default_action_str != "link"
  puts "Error: invalid default action \"#{default_action_str}\""
  exit
end
puts "Default action: #{default_action_str}"
STDOUT.flush

# Create the default action object.
default_action = {
                  "file_name" => "",
                  "resource_name" => "",
                  "resource_action" => default_action_str
                 }

# For each project directory, process the epub resources.
project_dir_list.each do |project_dir|
  project_dir = File.expand_path(project_dir)
  puts "Processing project #{File.basename(project_dir)}"

  # Locate resource mapping file.
  epub_src_dir = File.join(project_dir, "epub", "META-INF", "src")
  resource_map_file = File.join(epub_src_dir, "resource_map.csv")
  if !File.exists?(resource_map_file)
    puts "Error: no resource mapping file for project #{File.basename(project_dir)}"
    next
  end

  # Locate the resource manifest file.
  manifest_file = File.join(project_dir, "manifest.csv")
  if !File.exists?(manifest_file)
    puts "Error: no resource manifest file for project #{File.basename(project_dir)}"
    next
  end

  # Read the resource mapping/manifest files.
  resource_map_csv = CSVFile.read_file(:csv_path => resource_map_file)
  manifest_csv = CSVFile.read_file(:csv_path => manifest_file)

  # Generate the resource action list.
  actions_list = []
  resource_map_csv.each do |row|
    file_name = row['file_name']
    resource_name = row['resource_name']

    fileset_row = Manifest.find_fileset(manifest_csv, resource_name)
    if fileset_row['noid'].empty?
      puts "Error: no fileset row for resource #{resource_name}"
      link = fileset_row['link']
    else
      puts "Using resource #{resource_name}"
      link = fileset_row['link'].match('^[^\(]+\(\"([^\"]+)\".*') {|m| m[1] }
    end
    action_row = {
          "file_name" => file_name,
          "resource_action" => "default",
          "resource_name" => resource_name,
          "noid" => fileset_row['noid'],
          "link" => link,
          "embed_code" => fileset_row['embed_code']
    }
    actions_list << action_row
  end

  # For now, save the resource actions file.
  resource_actions_file = File.join(project_dir, "resource_actions.csv")
  puts "Saving resource action file #{File.basename(resource_actions_file)}"
  CSV.open(
          resource_actions_file,
          "w",
          :write_headers=> true,
          :headers => ["File Name", "Resource Name", "Resource Action", "NOID", "Link", "Embed Code"]
        ) do |csv|
    actions_list.each do |action_row|

      csv_row = [
              action_row['file_name'],
              action_row['resource_name'],
              action_row['resource_action'],
              action_row['noid'],
              action_row['link'],
              action_row['embed_code']
      ]

      #puts "Action: #{csv_row}"
      csv << csv_row
    end
  end

  # Find the epub file name.
  epub_file_name = Manifest.find_epub_file_name(manifest_csv)
  epub_file = File.join(project_dir, epub_file_name)
  if !File.exist?(epub_file)
    puts "Error: no #{epub_file} not found for project #{File.basename(project_dir)}"
    next
  end

  resource_processor = ResourceProcessor.new(
              :resource_metadata => manifest_csv,
              :resource_actions => actions_list,
              :default_action => default_action,
              :options => options
              )

  html_path_update_list = []
  remote_resources_list = []
  opf_path = nil
  opf_content = nil

  # Provide the directory path for adding the stylesheet link.
  # Possible option?
  fulcrum_css_name = 'fulcrum_default.css'
  fulcrum_src_css_file = File.join(root_dir, 'lib', 'css', fulcrum_css_name)
  #fulcrum_css_dir = "../Styles"
  fulcrum_dest_css_dir = "./"
  fulcrum_dest_css_file = File.join(fulcrum_dest_css_dir, fulcrum_css_name)

  # Determine the project directory for storing the modified .xhtml
  # and the OPF files.
  dest_epub_dir = File.join(project_dir, "epub")

  # For each .xhtml file, process the resources.
  Zip::File.open(epub_file) do |file|
    file.each do |entry|

      # Assign the output file name.
      dest_file = File.join(dest_epub_dir, entry.name)
      #entry.extract(dest_file)

      if File.extname(entry.name) == ".opf"
        # Found the OPF file. Save its name and content.
        opf_path = entry.name
        opf_content = entry.get_input_stream.read
        next
      end

      if File.extname(entry.name) == ".xhtml"
        # Found a xhtml file. Process the resources.
        puts "Processing file #{entry.name}"
        STDOUT.flush

        # Create the XML tree.
        content = entry.get_input_stream.read
        begin
          doc = Nokogiri::XML(content, nil, 'UTF-8')
        rescue Exception => e
          puts e.message
          next
        end

        # Determine the list of actions completed.
        # The -e flag must be specified for the actions
        # to be completed.
        action_list = resource_processor.process(doc)
        result = action_list.index { |action| action.status == Action.COMPLETED }
        if result

          # At last one action was completed. Remember that this
          # file was updated.
          html_path_update_list << dest_file

          # If resources were embedded, then we need to set the
          # remote-resource property in the OPF file.
          has_remote_resources = action_list.index { |action|
                      action.status == Action.COMPLETED and action.resource_action['resource_action'] == "embed"
          }
          if has_remote_resources
            remote_resources_list << dest_file
          end

          # Add the CSS stylesheet link that manages the Fulcrum resource display.
          XMLUtil.add_css(doc, fulcrum_dest_css_file)
          puts "Added CSS stylesheet \"#{fulcrum_css_name}\"."

          # Save the modified xhtml file.
          FileUtils.mkdir_p File.dirname(dest_file)
          XMLUtil.save(doc, dest_file)
        end
        puts "\n"
      end
    end
  end

  if html_path_update_list.count > 0
    # xhtml files were modified. Need to update the OPF file.
    if opf_path == nil
      puts "Error: OPF file not found."
    elsif options.execute
      # Create XML tree for the OPF file.
      begin
        doc = Nokogiri::XML(opf_content, nil, 'UTF-8')
      rescue Exception => e
        puts e.message
        exit
      end

      # Locate the <manifest>.
      manifest_node = doc.xpath("//*[local-name()='manifest']")
      if manifest_node == nil
        puts "No manifest node"
      else
        # Add the manifest entry for the Fulcrum CSS stylesheet.
        # If another CSS stylesheet is present, add it after.
        # Otherwise, add it as last child.
        item_node = doc.create_element(
                "item",
                :href => fulcrum_dest_css_file,
                :id => "fulcrum_default",
                )
        item_node['media-type'] = "text/css"

        node_list = manifest_node.xpath("./*[local-name()='item' and @media-type='text/css']")
        if node_list == nil
          manifest_node.add_child(item_node)
        else
          node_list.last.add_next_sibling(item_node)
        end

        # Copy the Fulcrum CSS stylesheet into the epub structure.
        FileUtils.cp(fulcrum_src_css_file, File.join(dest_epub_dir, "OEBPS", fulcrum_dest_css_file))
      end

      # Add remote resources to the OPF file.
      puts "Adding remote resources to OPF file #{File.basename(opf_path)}"
      remote_resources_list.each do |path|
        path_basename = File.basename(path)
        node_list = doc.xpath("//*[local-name()='manifest']/*[local-name()='item' and contains(@href, '#{path_basename}')]")
        node_list.each do |node|
          if node.has_attribute?("properties")
            node['properties'] += " remote-resources"
          else
            node['properties'] = "remote-resources"
          end
        end
      end

      # Save the OPF file.
      XMLUtil.save(doc, File.join(dest_epub_dir, opf_path))
    end
  end
end
#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'ostruct'

require 'csv'
require 'htmlentities'

options = OpenStruct.new

option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} <project_dir> [<project_dir>..]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    puts opts
    exit 0
  end
end
option_parser.parse!(ARGV)

if ARGV.count < 1
  puts option_parser.help
  return
end

require_relative '../lib/metadata'
require_relative '../lib/csv_file'

project_dir_list = ARGV

fig_proc = FigureProcessor.new
html_parser = HTMLParser.new(fig_proc)
parser = Nokogiri::XML::SAX::Parser.new(html_parser)

encoder = HTMLEntities.new

project_dir_list.each do |project_dir|
  puts "Processing #{project_dir}"

  # Find HTML files
  html_file_list = Dir.glob(File.join(project_dir, "epub", "**", "*.xhtml"))
  if html_file_list.count == 0
    puts "Warning: no HTML files found for project #{File.basename(project_dir)}"
    next
  end

  # Load the manifest
  manifest_path = File.join(project_dir, "manifest.csv")
  if !File.exist?(manifest_path)
    puts "Error: no manifest file for project #{File.basename(project_dir)}"
    next
  end
  manifest_csv = CSVFile.read_file(:csv_path => manifest_path)

  html_file_list.each do |html_file|
    parser.parse_file(html_file)
  end
  info_list = fig_proc.info_list

  actions_list = []
  caption_list = []
  info_list.each do |info|
    attrs_h = info.attrs.to_h

    src = attrs_h['src']
    file_name = File.basename(src)
    fileset_row = manifest_csv.find {|row| File.basename(row['file_name'], ".*") == File.basename(file_name, ".*") }

    if fileset_row == nil
      noid = file_name
      resource_name = file_name
      link = ""
      embed_code = ""
    else
      noid = fileset_row['noid']
      resource_name = fileset_row['file_name']
      link = fileset_row['link'].match('^[^\(]+\(\"([^\"]+)\".*') {|m| m[1] }
      embed_code = fileset_row['embed_code']
    end
    action_row = {
          "file_name" => file_name,
          "resource_action" => "default",
          "resource_name" => resource_name,
          "noid" => noid,
          "link" => link,
          "embed_code" => embed_code
    }
    actions_list << action_row

    caption_row = {
          "noid" => noid,
          "alternative_text" => encoder.encode(attrs_h['alt']),
          "caption" => encoder.encode(info.caption)
    }
    caption_list << caption_row
  end

  CSV.open(File.join(project_dir, "actions.csv"),
          "w",
          :write_headers=> true,
          :headers => ["File Name", "Resource Action", "Resource Name", "NOID", "Link", "Embed Code"]
        ) do |csv|
    actions_list.each do |action_row|

      csv_row = [
              action_row['file_name'],
              "default",
              action_row['resource_name'],
              action_row['noid'],
              action_row['link'],
              action_row['embed_code']
      ]

      #puts "Action: #{csv_row}"
      csv << csv_row
    end
  end

  CSV.open(File.join(project_dir, "alt_captions.csv"),
          "w",
          :write_headers=> true,
          :headers => ["NOID","Alternative Text","Caption"]
        ) do |csv|
    caption_list.each do |caption_row|

      csv_row = [
              caption_row['noid'],
              caption_row['alternative_text'],
              caption_row['caption']
            ]

      #puts "Caption: #{csv_row}"
      csv << csv_row
    end
  end

  fig_proc.reset
end
#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'ostruct'

require 'csv'
require 'fileutils'
require 'htmlentities'
require 'zip'

def expand_dir_path(dir_path)
  if dir_path == nil
    return Dir.pwd
  end

  full_dir = File.expand_path(dir_path)
  return full_dir if File.exists?(full_dir)

  puts "Error: directory #{dir_path} does not exist."
  return nil
end

options = OpenStruct.new

option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [--output_dir <output_dir>] <monograph_noid> [<monograph_noid>..]"
  opts.on('-d', '--input_dir [DIRECTORY]', 'Path of epub input directory') do |input_dir|
    options.input_dir = input_dir
  end
  opts.on('-o', '--output_dir [DIRECTORY]', 'Path of project output directory') do |output_dir|
    options.output_dir = output_dir
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    puts opts
    exit 0
  end
end
option_parser.parse!(ARGV)

if ARGV.count < 1
  puts option_parser.help
  return
end

require_relative '../lib/csv_file'
require_relative '../lib/metadata'
require_relative '../lib/resources'
require_relative '../lib/services'

input_dir = options.input_dir || ENV['WINTERBERRY_FULCRUM_UMP_DIR']
output_dir = options.output_dir
noid_list = ARGV

input_dir = expand_dir_path(input_dir)
exit if input_dir == nil
output_dir = expand_dir_path(output_dir)
exit if output_dir == nil

service = HeliotropeService.new

fig_proc = FigureProcessor.new
html_parser = HTMLParser.new(fig_proc)
parser = Nokogiri::XML::SAX::Parser.new(html_parser)

encoder = HTMLEntities.new

default_action = {
                  "file_name" => "",
                  "resource_name" => "",
                  "resource_action" => "embed"
                 }

noid_list.each do |noid|
  # Retrieve the monograph manifest. First look and see
  # the file exists in the input directory.
  src_manifest_file = File.join(input_dir, "#{noid}.csv")
  if File.exists?(src_manifest_file)
    puts "Loading manifest file #{File.basename(src_manifest_file)}"
    csv_body = File.read(src_manifest_file)
  else
    puts "Downloading manifest file for noid #{noid}"
    csv_body = service.monograph_noid_export(noid)
  end
  manifest_csv = CSVFile.read(:csv_body => csv_body)
  next if manifest_csv == nil

  # Find ebook monograph row.
  monograph_row = manifest_csv.find {|row| row['noid'] == noid }
  if monograph_row == nil
    puts "Warning: no monograph row for noid #{noid}"
    next
  end

  # Determine the ebook ISBN without dashes.
  isbns = monograph_row['isbn(s)']
  if isbns == nil or isbns.empty?
    puts "Warning: no isbns found for noid #{noid}"
    next
  end

  ebook_isbns = isbns.split(';').select {|isbn|
    isbn.strip.downcase.match('[0-9]+[ ]+\(ebook\)')
  }
  if ebook_isbns.empty?
    puts "Warning: no ebook isbn found for noid #{noid}"
    next
  end
  puts "Warning: multiple ebook isbns found for noid #{noid}" if ebook_isbns.count > 1

  ebook_isbn = ebook_isbns[0].sub('(ebook)', '').strip.gsub('-', '')

  # Find the epub file name.
  epub_row = manifest_csv.find {|row| row['representative_kind'] == 'epub' }
  if epub_row == nil
    puts "Warning: no epub row for noid #{noid}"
    next
  end
  epub_file_name = epub_row['file_name']

  epub_file = File.join(input_dir, epub_file_name)
  if !File.exist?(epub_file)
    puts "Error: no #{epub_file} not found"
    next
  end

  project_dir = File.join(output_dir, ebook_isbn)
  puts "Creating project #{project_dir}"
  STDOUT.flush

  src_epub_dir = File.join(project_dir, "src_epub")
  dest_epub_dir = File.join(project_dir, "dest_epub")

  FileUtils.mkdir_p project_dir
  #FileUtils.mkdir_p dest_epub_dir
  FileUtils.copy_file(epub_file, File.join(project_dir, epub_file_name))

  # Save the manifest file
  dest_manifest_path = File.join(project_dir, "manifest.csv")
  puts "Saving manifest file #{File.basename(dest_manifest_path)}"
  File.open(dest_manifest_path, "w") do |f|
    f.write(manifest_csv)
  end

  #puts "Extracting #{epub_file} to #{dest_epub_dir}"
  Zip::File.open(epub_file) do |file|
    file.each do |entry|
      #dest_file = File.join(dest_epub_dir, entry.name)
      #entry.extract(dest_file)

      if File.extname(entry.name) == ".xhtml"
        parser.parse(entry.get_input_stream.read)
      end
    end
  end
  info_list = fig_proc.info_list

  actions_list = []
  caption_list = []
  info_list.each do |info|
    attrs_h = info.attrs.to_h

    src = attrs_h['src']
    file_name = File.basename(src)
    fileset_row = manifest_csv.find {|row| File.basename(row['file_name'], ".*") == File.basename(file_name, ".*") }

    if fileset_row == nil
      noid = file_name
      resource_name = file_name
      link = ""
      embed_code = ""
    else
      noid = fileset_row['noid']
      resource_name = fileset_row['file_name']
      link = fileset_row['link'].match('^[^\(]+\(\"([^\"]+)\".*') {|m| m[1] }
      embed_code = fileset_row['embed_code']
    end
    action_row = {
          "file_name" => file_name,
          "resource_action" => "default",
          "resource_name" => resource_name,
          "noid" => noid,
          "link" => link,
          "embed_code" => embed_code
    }
    actions_list << action_row

    caption_row = {
          "noid" => noid,
          "alternative_text" => attrs_h['alt'],
          "caption" => info.caption
    #      "alternative_text" => encoder.encode(attrs_h['alt']),
    #      "caption" => encoder.encode(info.caption)
    }
    caption_list << caption_row
  end

  #dest_epub_src_dir = File.join(dest_epub_dir, "META-INF", "src")
  #FileUtils.mkdir_p dest_epub_src_dir

  resource_map_file = File.join(project_dir, "resource_map.csv")
  puts "Saving resource map file #{File.basename(resource_map_file)}"
  CSV.open(
          resource_map_file,
          "w",
          :write_headers=> true,
          :headers => ["File Name", "Resource Name", "Resource Action"]
        ) do |csv|
    actions_list.each do |action_row|

      csv_row = [
              action_row['file_name'],
              action_row['resource_name'],
              "default"
      ]

      csv << csv_row
    end
  end

  captions_file = File.join(project_dir, "alt_captions.csv")
  puts "Saving alt_text/captions file #{File.basename(captions_file)}"
  CSV.open(
          captions_file,
          "w",
          :write_headers=> true,
          :headers => ["NOID","Alternative Text","Caption"]
        ) do |csv|
    caption_list.each do |caption_row|

      csv_row = [
              caption_row['noid'],
              caption_row['alternative_text'],
              caption_row['caption']
            ]

      #puts "Caption: #{csv_row}"
      csv << csv_row
    end
  end

  fig_proc.reset

end

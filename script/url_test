#!/usr/bin/env ruby
# frozen_string_literal: true

# Script for testing a URL

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
options.manifest_file = nil
options.normalize = false
options.filter_list = []
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} url [url...]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end

require 'net/http'
require 'nokogiri'

# Process the command line parameters.
url_list = ARGV

url_list.each do |url|
  url_file = File.expand_path(url)
  if File.file?(url_file)
    url_path_list = File.readlines(url_file).map(&:chomp)
    logger_file = File.join(File.dirname(url_file), File.basename(url_file, ".*") + "_resolution.txt")
    out_logger = UMPTG::Logger.create(logger_file: logger_file)
  else
    url_path_list = [ url ]
    out_logger = UMPTG::Logger.create(logger_fp: STDOUT)
  end
  url_path_list.each do |url_path|
    script_logger.info(url_path)
    STDOUT.flush

    uri = URI(url_path)
    begin
      body = Net::HTTP.get(uri)
    rescue StandardError => e
      script_logger.error("#{url_path}: #{e.message}")
      out_logger.info("#{url_path}:failed")
      next
    end

    url_dest = ''
    unless body.nil? or body.empty?
      body_doc = Nokogiri::XML(body)
=begin
      node = body_doc.xpath("//*[local-name()='META' and @HTTP-EQUIV='Location']").first
      url_dest = node['Content'] unless node.nil?
=end
      node = body_doc.xpath("//*[local-name()='a']").first
      url_dest = node.nil? ? "(unknown)" : node["href"]
      url_dest = '' if url_dest == 'https://www.doi.org'
    end
    out_logger.info("#{url_path},#{url_dest}")
  end
end

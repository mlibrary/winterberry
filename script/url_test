#!/usr/bin/env ruby
# frozen_string_literal: true

# Script for testing a URL

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
options.manifest_file = nil
options.normalize = false
options.filter_list = []
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} url [url...]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end

require 'net/http'
require 'nokogiri'

# Process the command line parameters.
url_list = ARGV

url_list.each do |url|
  uri = URI(url)
  body = Net::HTTP.get(uri)
  url_dest = ''
  unless body.nil? or body.empty?
    body_doc = Nokogiri::XML(body)
=begin
    node = body_doc.xpath("//*[local-name()='META' and @HTTP-EQUIV='Location']").first
    url_dest = node['Content'] unless node.nil?
=end
    node = body_doc.xpath("//*[local-name()='a']").first
    url_dest = node["href"]
  end
  script_logger.info("#{url}:#{url_dest}")
end

#!/usr/bin/env ruby
# frozen_string_literal: true

# HELIO-3510, generate basic HTML instance from an EPUB,
# either reflowable or fixed layout.

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-h] epub_file [epub_file...]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    puts opts
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  puts option_parser.help
  return
end

epub_file_list = ARGV

require_relative File.join(root_dir, "lib", "epub")

epub_file_list.each do |epub_file|
  epub_file = File.expand_path(epub_file)
  unless File.exist?(epub_file)
    script_logger.error("invalid EPUB file path #{epub_file}.")
    next
  end

  epub = UMPTG::EPUB::Archive.new(epub_file: epub_file)
  script_logger.info("processing #{File.basename(epub_file)}, version #{epub.version}")

  UMPTG::EPUB::MigratorXSL.migrate(
        epub: epub,
        migrate_logger: script_logger
        )
end

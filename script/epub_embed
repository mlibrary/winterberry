#!/usr/bin/env ruby
# frozen_string_literal: true

# Script takes a list of EPUBs and embeds
# Fulcrum resources and additional resources.
# The manifest for each EPUB may be specified,
# otherwise the EPUB basename is used as the
# monograph ID.

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
options.fulcrum_host = nil
options.resource_css = :default
options.manifest_file_list = []
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-f production|preview|staging] [-m manifest_file] epub_file [epub_file...]"
  opts.on('-c', '--resource_css [default|enhanced]', 'Resource CSS styling') do |type|
    options.resource_css = type
  end
  opts.on('-f', '--fulcrum_host [production|preview|staging]', 'Fulcrum environment') do |fulcrum_host|
    options.fulcrum_host = fulcrum_host
  end
  opts.on('-m', '--manifest [manifest_file]', 'Manifest file') do |manifest_file|
    options.manifest_file_list << manifest_file
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end
epub_file_list = ARGV

require_relative File.join(root_dir, 'lib', 'fulcrum')
require_relative File.join(root_dir, 'lib', 'review')

options.embedders = {
        resources_embed: true
    }

# Provide the directory path for adding the stylesheet link.
fulcrum_css_name = options.resource_css == :default ? 'fulcrum_default.css' : 'fulcrum_enhanced.css'
fulcrum_css_file = File.join(root_dir, 'lib', 'css', fulcrum_css_name)

# Travese the list of EPUB files to update.
epub_file_list.each_index do |ndx|

  epub_file = File.expand_path(epub_file_list[ndx])
  unless File.exists?(epub_file)
    script_logger.error("invalid EPUB file path #{epub_file}.")
    next
  end
  script_logger.info("*** processing #{File.basename(epub_file)} ***")
  STDOUT.flush

  epub = UMPTG::EPUB::Archive.new(epub_file: epub_file)
  logger_file = File.join(File.dirname(epub_file), \
        File.basename(epub_file, ".*") + "_embed.log")

  manifest_file = options.manifest_file_list[ndx]
  manifest = UMPTG::Fulcrum::Manifest::Document.new(
        name: File.basename(manifest_file),
        csv_file: manifest_file
      )

  epub_embedder = UMPTG::Review::EPUBEmbedder.new(
        epub: epub,
        manifest: manifest,
        logger_file: logger_file
        )
  epub_embedder.embed(
      embed_options: options.embedders,
      css_file: fulcrum_css_file
      )

  if epub.modified
    # EPUB updated. Save it to a new file.
    new_epub_file = File.join(File.dirname(epub_file), File.basename(epub_file, ".*") + "_embed" + File.extname(epub_file))
    script_logger.info("EPUB updated. Writing new EPUB file #{File.basename(new_epub_file)}")
    epub.save(epub_file: new_epub_file)
  else
    # No EPUB updates.
    script_logger.info("no updates for EPUB file #{File.basename(epub_file)}")
  end

  script_logger.info()
  STDOUT.flush
end

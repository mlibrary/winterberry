#!/usr/bin/env ruby
# frozen_string_literal: true

# This script retrieves the copyright holder for the
# specified HEB IDs.
#

require 'optparse'
require 'ostruct'

require 'csv'

# Process the script parameters.
options = OpenStruct.new
options.directory_path = nil
options.fulcrum_host = nil
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-f production|preview|staging] <monograph_id> [<monograph_id>..]"
  opts.on('-f', '--fulcrum_host [production|preview|staging]', 'Fulcrum environment') do |fulcrum_host|
    options.fulcrum_host = fulcrum_host
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    puts opts
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  puts option_parser.help
  return
end

# Rest of the parameters is a list of monograph noids.
monograph_id_list = ARGV

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

require_relative File.join(root_dir, 'lib', 'fulcrum')

# Create the serivce for retrieving the NOID.
service = UMPTG::Services::Heliotrope.new(
                :fulcrum_host => options.fulcrum_host
              )

headers = [ "HEB ID", "Copyright Holder", "Updated Copyright Holder","Title","HEB Round","Comment" ]
csv_file = File.join(Dir.pwd, File.basename(__FILE__) + ".csv")
CSV.open(
        csv_file,
        "w",
        :write_headers=> true,
        :force_quotes => true,
        :headers => headers
      ) do |csv|
  monograph_id_list.each do |monograph_id|
    # Use the monograph ID to retrieve the NOID from Fulcrum.
    script_logger.info("*" * 10 + " #{monograph_id} " + "*" * 10)

    # Attempt to download the monograph manifest.
    identifier = "heb_id:#{monograph_id}"
    body_list = service.monograph_export(identifier: identifier)
    if body_list[identifier].empty?
      script_logger.warn("no manifest found for id #{monograph_id}")
    else
      manifest = UMPTG::Fulcrum::Manifest::Document.new(
                    csv_body: body_list[identifier].first
                  )
      if manifest.nil?
        script_logger.error("generating manifest CSV for #{monograph_id}")
        next
      end
    end

    mrow = manifest.monograph_row
    title = mrow['link'][0..-2] + ",\"#{mrow['title']}\")"
=begin
    crow = {
        "HEB ID" => monograph_id,
        "Copyright Holder" => mrow['copyright_holder'],
        "Monograph Link" => mrow['link'],
        "Title" => mrow['title']
        }
=end
    crow = {
        "HEB ID" => monograph_id,
        "Copyright Holder" => mrow['copyright_holder'],
        "Title" => title
        }
    csv << crow
  end
end

=begin
puts "HEB ID,Copyright Holder,Link,Title"
monograph_id_list.each do |monograph_id|
  # Attempt to download the monograph manifest.
  identifier = "heb_id:#{monograph_id}"
  body_list = service.monograph_export(identifier: identifier)
  if body_list[identifier].empty?
    script_logger.warn("no manifest found for id #{monograph_id}")
  else
    manifest = UMPTG::Fulcrum::Manifest::Document.new(
                  csv_body: body_list[identifier].first
                )
    if manifest.nil?
      script_logger.error("generating manifest CSV for #{monograph_id}")
      next
    end
  end

  mrow = manifest.monograph_row
  puts "\"#{monograph_id}\",\"#{mrow['copyright_holder']}\",\"#{mrow['link']}\",\"#{mrow['title']}\""
end
=end
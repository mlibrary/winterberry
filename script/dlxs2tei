#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'ostruct'

# Process the script parameters.
options = OpenStruct.new
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} <dlxs_file> [<dlxs_file>...]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    puts opts
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  puts option_parser.help
  return
end

# Process the command line parameters.
dlxs_file_list = ARGV

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, 'lib', 'xslt')

dlxs2tei_xsl_file = File.join(root_dir, "lib", "xsl", "dlxs2tei.xsl")

dlxs_file_list.each do |dlxs_file|
  # Verify the directory path.
  dlxs_file = File.expand_path(dlxs_file)
  if !File.exist?(dlxs_file)
    puts "Error: invalid DLXS file #{dlxs_file}"
    next
  end

  # Construct the TEI file path.
  tei_file = File.join(File.dirname(dlxs_file), File.basename(dlxs_file, ".*") + "_tei.xml")

  XSLT.transform(
          :xslpath => dlxs2tei_xsl_file,
          :srcpath => dlxs_file,
          :destpath => tei_file
          )
end

#!/usr/bin/env ruby
# frozen_string_literal: true

# Script inputs a Fulcrum monograph CSV file and
# determines if multiple monograph directories
# exist for a title.

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
options.write_mono_file = false
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} <csv_file> <monograph_dir>"
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 2
  script_logger.info(option_parser.help)
  exit 0
end

csv_file = ARGV[0]
monograph_dir = ARGV[1]

require 'csv'

require_relative File.join(root_dir, 'lib', 'fulcrum', 'manifest')

csv_file = File.expand_path(csv_file)
unless File.exists?(csv_file)
  script_logger.error("invalid CSV file path #{csv_file}.")
  exit 1
end
script_logger.info("*** processing #{File.basename(csv_file)} ***")
STDOUT.flush

fulcrum_body = File.read(csv_file)

fulcrum_csv = CSV.parse(
          fulcrum_body,
          headers: true,
          return_headers: false
          )

monograph_dir = File.expand_path(monograph_dir)
unless File.directory?(monograph_dir)
  script_logger.error("directory \"#{File.basename(monograph_dir)}\" does not exist.")
  exit(1)
end
script_logger.info("processing directory \"#{File.basename(monograph_dir)}\"")

fulcrum_csv.each do |row|
  script_logger.info("*** title \"#{row['Title']}\" ***")

  isbn_list = row['ISBN(s)']
  isbns = isbn_list.strip.split(';')
  exist_dirs = []
  isbns.each do |isbn|
    isbn = isbn.gsub(/\-/, '')
    isbn = isbn[0..12]
    mdir = File.join(monograph_dir, isbn)
    if Dir.exist?(mdir)
      script_logger.info("exists #{File.basename(mdir)}")
      exist_dirs << mdir
    else
      script_logger.info("not exists #{File.basename(mdir)}")
    end
  end
  script_logger.info("multiple directories exist") if exist_dirs.count > 1
end

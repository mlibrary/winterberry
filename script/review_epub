#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'ostruct'

# Process the script parameters.
options = OpenStruct.new
options.publisher_dir = Dir.pwd
options.reviews = {
        :figure => true,
        :image => false,
        :link => false,
        :list => false,
        :table => true
    }
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-link] [-list] epub_file [epub_file...]"
  opts.on('-link', '--link', 'Review links.') do |da|
    options.reviews[:link] = true
  end
  opts.on('-list', '--list', 'Review lists.') do |da|
    options.reviews[:list] = true
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    puts opts
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  puts option_parser.help
  return
end

epub_file_list = ARGV

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "review")
require_relative File.join(root_dir, "lib", "epubprocessor")

review_processors = {
        :figure => FigureProcessor.new,
        :image => ImgProcessor.new,
        :link => LinkProcessor.new,
        :list => ListProcessor.new,
        :table => TableProcessor.new
    }
processors = []
options.reviews.each do |name,flag|
  processors << review_processors[name] if flag
end

epub_file_list.each do |epub_file|

  # Process the epub and generate the image information.
  item_fragments = EpubProcessor.process(
        :epub_file => epub_file,
        :processors => processors
      )
  item_fragments.each do |name, fragments|
    puts name
    fragments.each do |fragment|
      fragment.review_msg_list.each do |msg|
        puts "\t#{msg}"
      end
    end
  end
end

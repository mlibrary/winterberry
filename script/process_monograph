#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'ostruct'

# Process the script parameters.
options = OpenStruct.new
options.publisher_dir = Dir.pwd
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-e] [-p <publisher_dir>] [embed_resources|link_resources] <monograph_noid> [<monograph_noid>..]"
  opts.on('-p', '--publisher_directory [DIRECTORY]', 'Publisher site directory') do |publisher_dir|
    options.publisher_dir = publisher_dir
  end
  opts.on('-e', '--execute', 'Execute embed|link actions') do |da|
    options.execute = true
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    puts opts
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 2
  puts option_parser.help
  return
end

TASK_LIST = [ "embed_resources", "link_resources" ]

task = ARGV[0].downcase
abort("Error: invalid task #{task}.") unless TASK_LIST.find {|t| t == task }
puts "Invoking task #{task}"

monograph_noid_list = ARGV[1..-1]

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

# Verify existence of the source/project root directories.
publisher_dir = File.expand_path(options.publisher_dir)
if !File.exists?(publisher_dir)
  puts "Error: source directory #{publisher_dir} does not exist."
  exit
end

require 'csv'
require 'fileutils'
require 'zip'

require_relative File.join(root_dir, 'lib', 'resourcemap')
require_relative File.join(root_dir, 'lib', 'manifest')
require_relative File.join(root_dir, 'lib', 'metadata')
require_relative File.join(root_dir, 'lib', 'resources')
require_relative File.join(root_dir, 'lib', 'epub')

# Initialize the processor that scans the monograph epub .xhtml
# files and collects information concerning the contained resources.
fig_proc = nil
parser = nil

# Create the default action object.
default_action_str = task == "embed_resources" ? "embed" : "link"

resource_map_file_headers = [ "File Name", "Resource Name" ]
resource_action_short_file_headers = ["File Name", "Resource Name", "Resource Action"]
resource_action_full_file_headers = ["File Name", "Resource Name", "Resource Action", "NOID", "Resource Type", "Link", "Embed Code"]
caption_file_headers = [ "File Name", "Resource Name", "Alternative Text", "Caption" ]

monograph_noid_list.each do |monograph_noid|
  # Use the noid to retrieve the monograph manifest from Fulcrum.
  puts "*" * 10 + " #{monograph_noid} " + "*" * 10

  manifest = Manifest.new(:noid => monograph_noid)

  # From the manifest, determine the ebook ISBN without dashes.
  ebook_isbn = manifest.isbn(:format => "open access")
  ebook_isbn = manifest.isbn(:format => "ebook") if ebook_isbn.nil?
  next if ebook_isbn == nil

  # Find the ebook source folder
  ebook_isbn = ebook_isbn.strip.gsub('-', '')
  monograph_dir_list = Dir.glob(File.join(publisher_dir, "#{ebook_isbn}_*"))
  if monograph_dir_list.count == 0
    puts "Error: ebook source directory not found for noid #{monograph_noid}."
    next
  end
  monograph_dir = monograph_dir_list[0]
  puts "Multiple ebook source directories found for noid #{monograph_noid}. Using #{monograph_dir}" \
        if monograph_dir_list.count > 1
  puts "Using directory #{monograph_dir}" if monograph_dir_list.count == 1

  # Determine if the resources directory exists.
  resources_dir = File.join(monograph_dir, "resources")
  if !File.exists?(resources_dir) or !File.directory?(resources_dir)
    puts "Error: #{File.basename(resources_dir)} is not a valid directory."
    next
  end

  # Determine if the resources directory contains any files.
  resource_file_list = Dir.glob(File.join(resources_dir, "*"))
  if resource_file_list.count == 0
    puts "Error: #{File.basename(resources_dir)} contains no resources."
    next
  end
  puts "Resources directory exists containing #{resource_file_list.count} files."

  # Find the epub file name and determine whether it exists.
  epub_row = manifest.representative_row(:kind => "epub")
  epub_file_name = epub_row['file_name']
  epub_file = File.join(monograph_dir, epub_file_name)
  if !File.exist?(epub_file)
    puts "Error: #{epub_file_name} not found in manifest for noid #{monograph_noid}"
    next
  end
  puts "#{epub_file_name} found in manifest for noid #{monograph_noid}"

  # Determine the resource_processing directory.
  process_dir = File.join(monograph_dir, "resource_processing")

  # Determine the project directory for storing the modified .xhtml
  # and the OPF files.
  dest_epub_dir = File.join(process_dir, "epub")

  # Verify that the resource_processing directory exists.
  if !File.exists?(process_dir) or !File.directory?(process_dir)
    puts "Error: directory #{File.basename(process_dir)} is not a valid directory."
    next
  end

  # Load the resource map file, if it exists.
  resource_map_file = File.join(process_dir, "resource_map.xml")
  if !File.exists?(resource_map_file)
    puts "Error: resource map file #{File.basename(resource_map_file)} must exist."
    next
  end

  # Provide the directory path for adding the stylesheet link.
  # Possible option?
  fulcrum_css_name = 'fulcrum_default.css'
  fulcrum_css_file = File.join(root_dir, 'lib', 'css', fulcrum_css_name)

  EpubResourceProcessor.process(
        :epub_file => epub_file,
        :default_action_str => default_action_str,
        :processing_dir => process_dir,
        :resource_metadata => manifest,
        :resource_map_file => resource_map_file,
        :fulcrum_css_file => fulcrum_css_file,
        :options => options
      )
end

#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'ostruct'

# Process the script parameters.
options = OpenStruct.new
options.publisher_dir = Dir.pwd
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-e] [-p <publisher_dir>] [embed_resources|link_resources] <monograph_noid> [<monograph_noid>..]"
  opts.on('-p', '--publisher_directory [DIRECTORY]', 'Publisher site directory') do |publisher_dir|
    options.publisher_dir = publisher_dir
  end
  opts.on('-e', '--execute', 'Execute embed|link actions') do |da|
    options.execute = true
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    puts opts
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 2
  puts option_parser.help
  return
end

TASK_LIST = [ "embed_resources", "link_resources" ]

task = ARGV[0].downcase
abort("Error: invalid task #{task}.") unless TASK_LIST.find {|t| t == task }
puts "Invoking task #{task}"

monograph_noid_list = ARGV[1..-1]

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

# Verify existence of the source/project root directories.
publisher_dir = File.expand_path(options.publisher_dir)
if !File.exists?(publisher_dir)
  puts "Error: source directory #{publisher_dir} does not exist."
  exit
end

require 'csv'
require 'fileutils'
require 'zip'

require_relative File.join(root_dir, 'lib', 'resourcemap')
require_relative File.join(root_dir, 'lib', 'manifest')
require_relative File.join(root_dir, 'lib', 'metadata')
require_relative File.join(root_dir, 'lib', 'resources')

# Initialize the processor that scans the monograph epub .xhtml
# files and collects information concerning the contained resources.
fig_proc = nil
parser = nil

# Create the default action object.
default_action_str = task == "embed_resources" ? "embed" : "link"
default_action = {
                  "file_name" => "",
                  "resource_name" => "",
                  "resource_action" => default_action_str
                 }

resource_map_file_headers = [ "File Name", "Resource Name" ]
resource_action_short_file_headers = ["File Name", "Resource Name", "Resource Action"]
resource_action_full_file_headers = ["File Name", "Resource Name", "Resource Action", "NOID", "Resource Type", "Link", "Embed Code"]
caption_file_headers = [ "File Name", "Resource Name", "Alternative Text", "Caption" ]

monograph_noid_list.each do |monograph_noid|
  # Use the noid to retrieve the monograph manifest from Fulcrum.
  puts "*" * 10 + " #{monograph_noid} " + "*" * 10

  manifest = Manifest.new(:noid => monograph_noid)

  # From the manifest, determine the ebook ISBN without dashes.
  ebook_isbn = manifest.isbn(:format => "open access")
  ebook_isbn = manifest.isbn(:format => "ebook") if ebook_isbn.nil?
  next if ebook_isbn == nil

  # Find the ebook source folder
  ebook_isbn = ebook_isbn.strip.gsub('-', '')
  monograph_dir_list = Dir.glob(File.join(publisher_dir, "#{ebook_isbn}_*"))
  if monograph_dir_list.count == 0
    puts "Error: ebook source directory not found for noid #{monograph_noid}."
    next
  end
  monograph_dir = monograph_dir_list[0]
  puts "Multiple ebook source directories found for noid #{monograph_noid}. Using #{monograph_dir}" \
        if monograph_dir_list.count > 1
  puts "Using directory #{monograph_dir}" if monograph_dir_list.count == 1

  # Determine if the resources directory exists.
  resources_dir = File.join(monograph_dir, "resources")
  if !File.exists?(resources_dir) or !File.directory?(resources_dir)
    puts "Error: #{File.basename(resources_dir)} is not a valid directory."
    next
  end

  # Determine if the resources directory contains any files.
  resource_file_list = Dir.glob(File.join(resources_dir, "*"))
  if resource_file_list.count == 0
    puts "Error: #{File.basename(resources_dir)} contains no resources."
    next
  end
  puts "Resources directory exists containing #{resource_file_list.count} files."

  # Find the epub file name and determine whether it exists.
  epub_row = manifest.representative_row(:kind => "epub")
  epub_file_name = epub_row['file_name']
  epub_file = File.join(monograph_dir, epub_file_name)
  if !File.exist?(epub_file)
    puts "Error: #{epub_file_name} not found in manifest for noid #{monograph_noid}"
    next
  end
  puts "#{epub_file_name} found in manifest for noid #{monograph_noid}"

  # Determine the resource_processing directory.
  process_dir = File.join(monograph_dir, "resource_processing")

  # Determine the project directory for storing the modified .xhtml
  # and the OPF files.
  dest_epub_dir = File.join(process_dir, "epub")

  # Verify that the resource_processing directory exists.
  if !File.exists?(process_dir) or !File.directory?(process_dir)
    puts "Error: directory #{File.basename(process_dir)} is not a valid directory."
    next
  end

  # Load the resource map file, if it exists.
  resource_map_file = File.join(process_dir, "resource_map.xml")
  if !File.exists?(resource_map_file)
    puts "Error: resource map file #{File.basename(resource_map_file)} must exist."
    next
  end

  puts "Using resource map file #{File.basename(resource_map_file)}"
  resource_map = ResourceMap.new(
        :xml_path => resource_map_file,
        :default_action => default_action_str
      )

  # Generate the resource action list.
  actions_list = []
  map_actions = resource_map.actions
  map_actions.each do |map_action|
    reference_name = map_action.reference.name
    resource_name = map_action.resource.name

    if resource_name == nil or resource_name.strip.empty?
      puts "Warning: no resource  mapping found for reference #{File.basename(reference_name)}"
      next
    end

    # Use file_name to find manifest row. Could use the NOID found in
    # the resource map, but it is possible that these may be invalid if
    # the monograph has been moved or fileset have been replaced.
    fileset_row = manifest.fileset(resource_name)
    if fileset_row['noid'].empty?
      puts "Error: no fileset row for resource #{resource_name}"
      link = fileset_row['link']
    else
      puts "Reference #{File.basename(reference_name)} mapped to resource #{resource_name}"
      link = fileset_row['link'].match('^[^\(]+\(\"([^\"]+)\".*') {|m| m[1] }
    end
    action_row = {
          "file_name" => reference_name,
          "resource_name" => resource_name,
          "resource_action" => map_action.type,
          "noid" => fileset_row['noid'],
          "resource_type" => fileset_row['resource_type'],
          "link" => link,
          "embed_code" => fileset_row['embed_code']
    }
    actions_list << action_row
  end

  if options.execute
    # Save the resource actions file within a new epub structure
    # for archival purposes.
    epub_src_dir = File.join(dest_epub_dir, "META-INF", "src")
    FileUtils.mkdir_p epub_src_dir
    epub_resource_map_file = File.join(epub_src_dir, File.basename(resource_map_file))
    resource_map.save(epub_resource_map_file,
           :save_csv => true
         )
  end

  resource_processor = ResourceProcessor.new(
              :resource_metadata => manifest,
              :resource_actions => actions_list,
              :default_action => default_action,
              :options => options
              )

  html_path_update_list = []
  remote_resources_list = []
  opf_path = nil
  opf_content = nil

  # Provide the directory path for adding the stylesheet link.
  # Possible option?
  fulcrum_css_name = 'fulcrum_default.css'
  fulcrum_src_css_file = File.join(root_dir, 'lib', 'css', fulcrum_css_name)
  #fulcrum_css_dir = "../Styles"
  fulcrum_dest_css_dir = "./"
  fulcrum_dest_css_file = File.join(fulcrum_dest_css_dir, fulcrum_css_name)

  # For each .xhtml file, process the resources.
  Zip::File.open(epub_file) do |file|
    file.each do |entry|

      # Assign the output file name.
      dest_file = File.join(dest_epub_dir, entry.name)
      #entry.extract(dest_file)

      if File.extname(entry.name) == ".opf"
        # Found the OPF file. Save its name and content.
        opf_path = entry.name
        opf_content = entry.get_input_stream.read
        next
      end

      if File.extname(entry.name) == ".xhtml"
        # Found a xhtml file. Process the resources.
        puts "Processing file #{entry.name}"
        STDOUT.flush

        # Create the XML tree.
        content = entry.get_input_stream.read
        begin
          doc = Nokogiri::XML(content, nil, 'UTF-8')
        rescue Exception => e
          puts e.message
          next
        end

        # Determine the list of actions completed.
        # The -e flag must be specified for the actions
        # to be completed.
        action_list = resource_processor.process(doc)
        result = action_list.index { |action| action.status == Action.COMPLETED }
        if result

          # At last one action was completed. Remember that this
          # file was updated.
          html_path_update_list << dest_file

          # If resources were embedded, then we need to set the
          # remote-resource property in the OPF file.
          has_remote_resources = action_list.index { |action|
                      action.status == Action.COMPLETED and action.resource_action['resource_action'] == "embed"
          }
          if has_remote_resources
            remote_resources_list << dest_file
          end

          # Add the CSS stylesheet link that manages the Fulcrum resource display.
          level = File.dirname(entry.name).split(File::SEPARATOR).count
          if level == 1
            XMLUtil.add_css(doc, fulcrum_dest_css_file)
          else
            fpath = (('..' + File::SEPARATOR) * (level-1)) + fulcrum_css_name
            XMLUtil.add_css(doc, fpath)
          end
          puts "Added CSS stylesheet \"#{fulcrum_css_name}\"."

          # Save the modified xhtml file.
          FileUtils.mkdir_p File.dirname(dest_file)
          XMLUtil.save(doc, dest_file)
        end
        puts "\n"
      end
    end
  end

  if html_path_update_list.count > 0
    # xhtml files were modified. Need to update the OPF file.
    if opf_path == nil
      puts "Error: OPF file not found."
    elsif options.execute
      # Create XML tree for the OPF file.
      begin
        doc = Nokogiri::XML(opf_content, nil, 'UTF-8')
      rescue Exception => e
        puts e.message
        exit
      end

      # Locate the <manifest>.
      manifest_node = doc.xpath("//*[local-name()='manifest']")
      if manifest_node == nil
        puts "No manifest node"
      else
        # Add the manifest entry for the Fulcrum CSS stylesheet.
        # If another CSS stylesheet is present, add it after.
        # Otherwise, add it as last child.
        item_node = doc.create_element(
                "item",
                :href => fulcrum_dest_css_file,
                :id => "fulcrum_default",
                )
        item_node['media-type'] = "text/css"

        node_list = manifest_node.xpath("./*[local-name()='item' and @media-type='text/css']")
        if node_list == nil
          manifest_node.add_child(item_node)
        else
          node_list.last.add_next_sibling(item_node)
        end

        # Copy the Fulcrum CSS stylesheet into the epub structure.
        FileUtils.cp(fulcrum_src_css_file, File.join(dest_epub_dir, "OEBPS", fulcrum_dest_css_file))
        #FileUtils.cp(fulcrum_src_css_file, File.join(dest_epub_dir, "OPS", fulcrum_dest_css_file))
      end

      # Add remote resources to the OPF file.
      puts "Adding remote resources to OPF file #{File.basename(opf_path)}"
      remote_resources_list.each do |path|
        path_basename = File.basename(path)
        node_list = doc.xpath("//*[local-name()='manifest']/*[local-name()='item' and contains(@href, '#{path_basename}')]")
        node_list.each do |node|
          if node.has_attribute?("properties")
            node['properties'] += " remote-resources"
          else
            node['properties'] = "remote-resources"
          end
        end
      end

      # Save the OPF file.
      XMLUtil.save(doc, File.join(dest_epub_dir, opf_path))
    end

    # Create the new epub. Remove the old one if it exists.
    processed_epub_file = File.join(process_dir, File.basename(epub_file))
    FileUtils.remove_file(processed_epub_file, true)

    # Create the new epub by reading the original one,
    # and replacing the files found in the epub directory.
    Zip::File.open(epub_file, false) do |input_file|
      Zip::File.open(processed_epub_file, true) do |output_file|

        # Replace existing entries.
        input_file.each do |input_entry|
          if !input_entry.name_is_directory?
            new_entry = File.expand_path(input_entry.name, dest_epub_dir)

            if File.exists?(new_entry)
              puts "Replacing file #{input_entry.name}"
              output_file.get_output_stream(input_entry.name) do |output_entry_stream|
                output_entry_stream.write(File.read(new_entry))
              end
            else
              puts "Using file #{input_entry.name}"
              input_entry.get_input_stream do |input_entry_stream|
                output_file.get_output_stream(input_entry.name) do |output_entry_stream|
                  output_entry_stream.write(input_entry_stream.read)
                end
              end
            end
          end
        end

        # Add any new entries.
        dest_epub_file_list = Dir.glob(File.join(dest_epub_dir, "**", "*"))
        dest_epub_file_list.each do |dest_epub_file|
          dest_epub_file_name = dest_epub_file.delete_prefix(dest_epub_dir + File::SEPARATOR)
          if !input_file.find_entry(dest_epub_file_name)
            if File.directory?(dest_epub_file)
              puts "Adding new directory #{dest_epub_file_name}"
              output_file.mkdir(dest_epub_file_name)
            else
              puts "Adding new file #{dest_epub_file_name}"
              output_file.get_output_stream(dest_epub_file_name) do |output_entry_stream|
                output_entry_stream.write(File.read(dest_epub_file))
              end
            end
          end
        end
      end
    end
  end
end

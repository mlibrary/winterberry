#!/usr/bin/env ruby
# frozen_string_literal: true

# Script inputs HEB ID and unpacks monograph PDF.

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")
require_relative File.join(root_dir, "lib", "fulcrum")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} heb_id [heb_id...]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end

# Process the command line parameters.
heb_id_list = ARGV

require_relative File.join(root_dir, "lib", "services")

# Create the serivce for retrieving the NOID.
service = UMPTG::Services::Heliotrope.new(
                :fulcrum_host => options.fulcrum_host
              )

pdf_noid_list = []
heb_id_list.each do |heb_id|
  script_logger.info("*" * 10 + " #{heb_id} " + "*" * 10)

  identifier = "heb_id:#{heb_id}"
  manifest = UMPTG::Fulcrum::Manifest::Document.new(
                monograph_id: identifier
              )
  pdf_row = manifest.representative_row(kind: "pdf_ebook")
  next if pdf_row.nil?
  puts "#{heb_id}:#{pdf_row['noid']}"
  pdf_noid_list << pdf_row['noid']
end
pdf_noid_list_str = pdf_noid_list.join(' ')
puts "%w[#{pdf_noid_list.join(' ')}].each do |noid|"
puts "UnpackJob.perform_now(noid,'pdf_ebook')"
puts "end;0"


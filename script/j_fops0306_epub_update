#!/usr/bin/env ruby
# frozen_string_literal: true

# Script takes a list of EPUBs, normalizes each
# if necessary, then determines the list of
# CSS stylesheets and outputs info about each, and
# possibly replaces stylesheets

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
options.reviews = {
        package: true,
        link: false,
        list: false,
        move_coverrole: true,
        resources: true,
        role_remove: true,
        table: true
    }
options.vendor = :default
options.default_actions = {
        resources: :embed
    }
options.normalize = {
        move_coverrole: true,
        resources: true,
        role_remove: true
    }
options.css_file_list = []
options.force_update = false
options.epubcheck = false
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-e] [-f] [-c css_file] epub_file [epub_file...]"
  opts.on('-c', '--css [css_file]', 'CSS replacement') do |css_file|
    options.css_file_list << css_file
  end
  opts.on('-e', '--epubcheck', 'Invoke EPUBCheck') do |ec|
    options.epubcheck = true
  end
  opts.on('-f', '--force', 'Force update') do |css_file|
    options.force_update = true
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end
epub_file_list = ARGV

require_relative File.join(root_dir, 'lib', 'review')
require_relative File.join(root_dir, 'lib', 'epubcheck')

epub_updater = UMPTG::Review::EPUBUpdater.new

# Travese the list of EPUB files to update.
epub_file_list.each do |epub_file|
  epub_file = File.expand_path(epub_file)
  unless File.exists?(epub_file)
    script_logger.error("invalid EPUB file path #{epub_file}.")
    next
  end
  script_logger.info("*** processing #{File.basename(epub_file)} ***")
  STDOUT.flush

  epub = UMPTG::EPUB::Archive.new(epub_file: epub_file)

  # Log the processing into a file for this monograph.
  epub_log_file = File.join(File.dirname(epub_file), \
        File.basename(epub_file, ".*") + "_epub_update" + ".log")

  # Process the epub and generate the image information.
  epub_reviewer = UMPTG::Review::EPUBReviewer.new(
        epub: epub,
        logger_file: epub_log_file
      )

  epub_reviewer.review(
        review_options: options.reviews,
        normalize: options.normalize[:resources]
      )

  epub_updater.logger = epub_reviewer.review_logger
  epub_updater.update(
      epub: epub,
      css_file_list: options.css_file_list,
      css_force_update: options.force_update
      )

  if epub.modified
    # EPUB updated. Save it to a new file.
    new_epub_file = File.join(File.dirname(epub_file), File.basename(epub_file, ".*") + "_epub_update" + File.extname(epub_file))
    script_logger.info("EPUB updated. Writing new EPUB file #{File.basename(new_epub_file)}")
    epub.save(epub_file: new_epub_file)
    STDOUT.flush

    if options.epubcheck
      log_file = File.join(File.dirname(new_epub_file), File.basename(new_epub_file, ".*") + "_epubcheck.xml")
      UMPTG::EpubCheck.check_file(
          epub_file: new_epub_file,
          :logfile => log_file
          )
    end
  else
    # No EPUB updates.
    script_logger.info("no updates for EPUB file #{File.basename(epub_file)}")
  end

  script_logger.info()
  STDOUT.flush
end

#!/usr/bin/env ruby
# frozen_string_literal: true

# Script inputs a list of monograph directories
# and inserts the specified CC license.

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
options.license = :cc_project
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-l license] monograph_dir [<monograph_dir>..]"
  opts.on('-l', '--license [license]', 'License') do |license|
    options.license = license.to_sym
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  exit 0
end
monograph_dir_list = ARGV

require_relative File.join(root_dir, 'lib', 'review')
require_relative File.join(root_dir, 'lib', 'fulcrum')

# Class containing CC license info.
class CCLicense
  attr_reader :badge, :license_file, :license_doc, :license_body_node, :img_file_list

  def initialize(args = {})
    @badge = args[:badge]
    @license_file = args[:license_file]
    @license_doc = args[:license_doc]
    @license_body_node = args[:license_body_node]
    @img_file_list = args[:img_file_list]
  end
end

# Create cache for the CC license files.
license_file_list = Dir.glob(File.join(root_dir, "lib", "license", "cc_badges", "*.xhtml"))
badge2license = {}
license_file_list.each do |license_file|
  script_logger.info("caching license file #{File.basename(license_file)}")

  license_doc = Nokogiri::XML(File.read(license_file))
  license_body_node = license_doc.xpath("//*[local-name()='body']").first
  if license_body_node.nil?
    script_logger.error("unable to find license body element.")
    next
  end

  img_file_list = []
  license_body_node.xpath(".//*[local-name()='img']").each do |img_node|
    src = img_node['src']
    img_file = File.expand_path(src, File.dirname(license_file))
    unless File.exist?(img_file)
      script_logger.error("image file #{img_file} not found in license file #{license_file}")
      next
    end
    img_file_list << img_file
  end

  badge = File.basename(license_file, ".*").gsub('_', '-')

  cc_license = CCLicense.new(
          badge: badge,
          license_file: license_file,
          license_doc: license_doc,
          license_body_node: license_body_node,
          img_file_list: img_file_list
        )
  badge2license[badge] = cc_license
end
if badge2license.empty?
  script_logger.error("no license files found.")
  exit(1)
end

epub_updater = UMPTG::Review::EPUBUpdater.new(
      logger: script_logger
      )

monograph_dir_list.each do |monograph_dir|
  monograph_dir = File.expand_path(monograph_dir)
  unless File.directory?(monograph_dir)
    script_logger.error("directory \"#{File.basename(monograph_dir)}\" does not exist.")
    next
  end
  script_logger.info("processing directory \"#{File.basename(monograph_dir)}\"")

  # Load the monograph manifest.
  manifest_file = File.join(monograph_dir, "manifest.csv")
  unless File.file?(manifest_file)
    script_logger.error("directory \"#{File.basename(manifest_file)}\" does not exist.")
    next
  end
  manifest = UMPTG::Fulcrum::Manifest::Document.new(
                csv_file: manifest_file
              )
  if manifest.monograph_row.nil?
    script_logger.error("no monograph row found for monograph #{monograph_dir}")
    next
  end

  # Determine the title CC license.
  cc_license_id = manifest.monograph_row['cc_license']
  # https://creativecommons.org/licenses/by-nc-nd/4.0/
  badge = cc_license_id.split(/\//)[4]
  cc_license = badge2license["cc-" + badge]
  if cc_license.nil?
    script_logger.error("no CC license found for badge #{badge}.")
    next
  end
  script_logger.info("CC license found for badge #{badge}.")

  # Get the EPUB path.
  epub_row = manifest.representative_row(kind: "epub")
  if epub_row.nil?
    script_logger.error("no EPUB row found for monograph #{monograph_dir}")
    next
  end
  epub_file = File.join(monograph_dir, epub_row['file_name'])
  #epub_file = File.join(monograph_dir, File.basename(monograph_dir, ".*") + ".epub")
  epub = UMPTG::EPUB::Archive.new(epub_file: epub_file)

  license_frag = cc_license.license_body_node.dup

=begin
  funder_display = manifest.monograph_row['funder_display']
  funder_display_node = license_frag.xpath(".//*[@id='funder_description']").first
  if funder_display_node.nil?
    script_logger.warn("funder display node not found.")
  else
    funder_display_node.content = funder_display
    script_logger.info("funder display inserted.")
  end
=end

  oa_isbn = manifest.isbn['open access']
  oa_isbn = manifest.isbn['oa ebook'] if oa_isbn.nil?
  #oa_isbn = File.basename(monograph_dir, ".*")
  isbn_oa_node = license_frag.xpath(".//*[@id='isbn_open_access']").first
  if isbn_oa_node.nil?
    script_logger.warn("OA ISBN node not found.")
  else
    isbn_oa_node.content = "ISBN: #{oa_isbn} (open access)"
    script_logger.info("OA ISBN inserted.")
  end

  cc_license.img_file_list.each do |img_file|
    img_file = File.expand_path(img_file)
    script_logger.info("adding manifest item #{img_file}")

    epub_updater.add_item(
        epub: epub,
        item_file: img_file
        )
  end

  # Process the epub and generate the image information.
  epub_reviewer = UMPTG::Review::EPUBReviewer.new(
        epub: epub,
        logger: script_logger
      )
  epub_reviewer.review(
        review_options: { add_license: true },
        license_fragment: license_frag,
        normalize: true
      )

  if epub.modified
    epub_reviewer = UMPTG::Review::EPUBReviewer.new(
          epub: epub,
          logger: script_logger
        )

    epub_reviewer.review(
          review_options: { fix_img_ref: true },
          normalize: true
        )

    # EPUB updated. Save it to a new file.
    new_epub_file = File.join(File.dirname(epub_file), File.basename(epub_file, ".*") + "_cc_license" + File.extname(epub_file))
    script_logger.info("EPUB updated. Writing new EPUB file #{File.basename(new_epub_file)}")
    epub.save(epub_file: new_epub_file)
  else
    # No EPUB updates.
    script_logger.info("no updates for EPUB file #{File.basename(epub_file)}")
  end

  STDOUT.flush
end

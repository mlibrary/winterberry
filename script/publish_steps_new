#!/usr/bin/env ruby
# frozen_string_literal: true

# Generate publishing steps data files
# Usage: publish_steps [-d <fulcrum_dir>] [-p press] <task_id> <monograph_id> [<monograph_id>..]
#      -p, --press [press]              Press aberdeenunipress|amherst|atg|bridwell|bar|cjs|csas|cseas|ebc|heb|leverpress|livedplaces|lrccs|maizebooks|ummaa|michigan|vermont|westminster
#      -d, --directory [DIRECTORY]      Fulcrum directory
#      -h, --help
#      task_id                          JIRA task, e.g. FOPS-xxxx
#      monograph_id                     monograph ISBN

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "press")

# Process the script parameters.
options = OpenStruct.new
options.greensub_dir = "/mnt/umptmm"
options.application_dir = "/fulcrum/data/tmm"
options.fulcrum_dir = OS.windows? ? "s:/Information\ Management/Fulcrum" : options.application_dir
#options.fulcrum_dir = "c:/Users/tbelc/Documents/Fulcrum"
options.press = :ebc
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-d <fulcrum_dir>] [-p press] <task_id> <monograph_id> [<monograph_id>..]"
  opts.on('-p', '--press [press]', "Press #{UMPTG::Press.press_list()}") do |press|
    options.press = press.to_sym
  end
  opts.on('-d', '--directory [DIRECTORY]', 'Fulcrum directory') do |fulcrum_dir|
    options.fulcrum_dir = fulcrum_dir
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    puts opts
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 2
  puts option_parser.help
  return
end

task_id = ARGV[0]
monograph_id_list = ARGV[1..-1]

require 'fileutils'
require_relative File.join(root_dir, "lib", "logger")
require_relative File.join(root_dir, "lib", "services")
require_relative File.join(root_dir, "lib", "fulcrum", "manifest")

# Create a logger for the script
script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Verify existence of the source/project root directories.
fulcrum_dir = File.expand_path(options.fulcrum_dir)
unless File.directory?(fulcrum_dir)
  script_logger.fatal("source directory #{fulcrum_dir} does not exist.")
  exit 1
end

# Determine publishing directory
ptg_dir = "PTG"
publish_dir = File.join(fulcrum_dir, ptg_dir, "PublishingSteps")
unless File.directory?(publish_dir)
  script_logger.fatal("processing directory #{publish_dir} does not exist.")
  exit 1
end
application_publish_dir = File.join(options.application_dir, ptg_dir, "PublishingSteps")
greensub_publish_dir = File.join(options.greensub_dir, ptg_dir, "PublishingSteps")

# Create the task processing directory.
task_dir = File.join(publish_dir, task_id)
application_task_dir = File.join(application_publish_dir, task_id)
greensub_task_dir = File.join(greensub_publish_dir, task_id)
script_logger.info("Using task directory #{File.basename(task_dir)}")

# Create the serivce for retrieving the NOID manifest.
service = UMPTG::Services::Heliotrope.new()

monograph_manifest_list = {}
product_component_list = {}
monograph_id_list.each do |monograph_id|
  # Process monograph ID.
  script_logger.info("*" * 10 + " #{monograph_id} " + "*" * 10)
  STDOUT.flush

  manifest_response = service.monograph_export(identifier: monograph_id)
  manifest_response.values.each do |manifest_body_list|
    if manifest_body_list.empty?
      script_logger.warn("no manifest found")
      next
    end
    manifest_body_list.each do |manifest_body|
      # From the manifest CSV, create a Fulcrum manifest object.
      manifest = UMPTG::Fulcrum::Manifest::Document.new(
                    csv_body: manifest_body
                  )

      # Retrieve the monograph row entry.
      monograph_row = manifest.monograph_row
      if monograph_row.nil?
        script_logger.error("manifest monograph row not found")
        next
      end
      monograph_manifest_list[monograph_id] = manifest
      script_logger.info("manifest monograph row found")

      # Determine the monograph noid, press, DOI, Identifier(s)
      # Publication Date
      monograph_noid = manifest.noid
      monograph_press = manifest.press.downcase
      series_id = manifest.series_id

      pub_date_str = monograph_row['pub_year']
      if pub_date_str.nil?
        script_logger.warn("pub_year not specified for id #{monograph_id}")
        pub_date = Date.today
      else
        pub_date = Date.strptime(pub_date_str, '%Y')
      end

      # Determine the monograph products
      entry = "#{manifest.noid},#{series_id}"
      products = []
      case monograph_press
      when "barpublishing"
        s = series_id.downcase.start_with?('b') ? 'brit' : 'int'
        p = pub_date.year > 2020 ? \
              "bar_#{pub_date.year}" : "bar_pre"
        products += [p, "#{p}_#{s}"]
      when "michigan"
        p = pub_date.year > 2011 ? \
                "ebc_#{pub_date.year}" : "ebc_2011pre"
        products += ["ebc_complete", p]
        products += ["ebc_oa"] if manifest.open_access
      else
        products << monograph_press
      end
      products.each do |p|
        if product_component_list[p].nil?
          product_component_list[p] = [entry]
        else
          product_component_list[p] << entry
        end
      end
    end
  end
end

FileUtils.mkdir_p task_dir

# Write components file.
product_component_list.each do |product,component_list|
  p = File.join(task_dir, "noid_" + product + ".csv")
  File.write(p, component_list.join("\n"))
end

# Write the commands file.
cmds_file = File.join(task_dir, task_id + ".txt")
File.open(cmds_file, "w") do |fp|
  fp.puts "# Server information fulcrum-21{1,2}"
  fp.puts "[tbelc@tang:~]$ eval `ssh-agent -s`"
  fp.puts "[tbelc@tang:~]$ ssh-add ~/.ssh/heliotrope-deploy"
  fp.puts "Enter passphrase for /home/tbelc/.ssh/heliotrope-deploy: deploy"
  fp.puts "Identity added: /home/tbelc/.ssh/heliotrope-deploy (/home/tbelc/.ssh/heliotrope-deploy)"
  fp.puts "[tbelc@tang:~]$ ssh -A fulcrum@fulcrum-211"
  fp.puts "[fulcrum@fulcrum-211:~]$ cd app/current"
  fp.puts "[fulcrum@fulcrum-211:~/app/current]$ "
  fp.puts

#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'ostruct'

require 'nokogiri'
require 'csv'

options = OpenStruct.new
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} <mpress|heb> <embed|link> <resource_path|monograph_noid> <output_dir>  <html_path> [<html_path>..]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    puts opts
    exit 0
  end
end
option_parser.parse!(ARGV)

if ARGV.count < 5
  puts option_parser.help
  return
end

#require File.expand_path('../config/environment', __dir__)
require_relative '../lib/resources'

press = ARGV[0].downcase
action = ARGV[1].downcase
resource_path = ARGV[2]
output_dir = ARGV[3]
html_path_list = ARGV[4..-1]

case press
when "mpress", "heb"
else
  puts "Error: \"#{press} is not a valid press."
  return
end

case action
when "embed", "link"
else
  puts "Error: \"#{action} is not a valid action."
  return
end

r_path = File.expand_path(resource_path)
monograph_noid = nil
if File.exists?(r_path)
  resource_path = r_path
else
  monograph_noid = resource_path
  resource_path = nil
end

output_dir = File.expand_path(output_dir)

if output_dir == "" or !Dir.exists?(output_dir)
  puts "Error: \"#{output_dir} is not a valid directory."
  return
end

require_relative '../lib/services'

begin
  resources = resource_path == nil ? HeliotropeService.new.monograph_noid_export(monograph_noid) : File.read(resource_path)
  resource_metadata = CSV.parse(resources,
            :headers => true, :converters => :all, :header_converters => lambda { |h| h.downcase.gsub(' ', '_') })
rescue Exception => e
  puts e.message
end

case press
when "mpress"
  resource_locator = PressResourceLocator.new
when "heb"
  #resource_locator = HEBResourceLocator.new
  raise NotImplementedError
end

case action
when "embed"
  processor = ResourceEmbedder.new(
                :resource_metadata => resource_metadata,
                :resource_locator => resource_locator
                )
when "link"
  processor = ResourceLinker.new(
                :resource_metadata => resource_metadata,
                :resource_locator => resource_locator
                )
end

html_path_list.each do |html_path|

  begin
    doc = Nokogiri::XML(File.open(File.expand_path(html_path)))
  rescue Exception => e
    puts e.message
    next
  end

  resource_marker_node_list = resource_locator.find_resources(doc)
  resource_marker_node_list.each do |resource_marker_node|
    processor.process(:marker => resource_marker_node)
  end

  dest_path = File.join(output_dir, File.basename(html_path))
  puts "Writing #{dest_path}"
  STDOUT.flush

  begin
    File.write(dest_path, doc.to_xml)
  rescue Exception => e
    puts e.message
  end
end





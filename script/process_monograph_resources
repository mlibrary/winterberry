#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'ostruct'

require 'nokogiri'
require 'csv'
require 'fileutils'

options = OpenStruct.new

options.default_action_str = "none"
options.execute = false

option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-e] [-a <action_file>] [-d <embed|link|none>] [-o <output_dir>] [-p <opf_file>] [-r <resource_metadata_file|monograph_node>] <html_file> [<html_file>..]"
  opts.on('-a', '--action_file [FILE]', 'Path for file specifying resource actions') do |fpath|
    options.action_path = fpath
  end
  opts.on('-d', '--default_action [embed|link|none]', 'Default action') do |da|
    options.default_action_str = da.downcase
  end
  opts.on('-e', '--execute', 'Execute actions') do |da|
    options.execute = true
  end
  opts.on('-o', '--output_dir [DIR]', 'Directory to store output files') do |dpath|
    options.output_dir = dpath
  end
  opts.on('-p', '--opf_file [FILE]', 'Path to the OPF file') do |opath|
    options.opf_path = opath
  end
  opts.on('-r', '--resource_metadata_file [FILE]', 'Path containing resource metadata') do |rpath|
    options.resource_path = rpath
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    puts opts
    exit 0
  end
end
option_parser.parse!(ARGV)

if ARGV.count < 1
  puts option_parser.help
  return
end

#require File.expand_path('../config/environment', __dir__)
require_relative '../lib/resources'

default_action_str = options.default_action_str
opf_path = options.opf_path
resource_path = options.resource_path
output_dir = options.output_dir
html_path_list = ARGV

action_path = ""
if options.action_path != nil and !options.action_path.empty?
  action_path = File.expand_path(options.action_path)
end

resource_actions = nil
if !action_path.empty? and File.exists?(action_path)
  resource_actions = CSV.read(action_path,
                :headers => true, :converters => :all,
                :header_converters => lambda { |h| h.downcase.gsub(' ', '_') })
end

case default_action_str
when "embed", "link", "none"
else
  puts "Error: \"#{default_action_str} is not a valid action."
  return
end
default_action = {
                  "file_name" => "",
                  "resource_name" => "",
                  "resource_action" => default_action_str
                 }

monograph_noid = nil
if resource_path != nil
  r_path = File.expand_path(resource_path)
  if File.exists?(r_path)
    resource_path = r_path
  else
    monograph_noid = resource_path
    resource_path = nil
  end
end

if options.execute
  if output_dir == nil
    output_dir = File.join(Dir.pwd, "xhtml")
    FileUtils.mkdir_p output_dir
  else
    output_dir = File.expand_path(output_dir)
    if !Dir.exists?(output_dir)
      puts "Error: \"#{output_dir} is not a valid directory."
      return
    end
  end
end

require_relative '../lib/services'

resource_metadata = nil
if resource_path != nil or monograph_noid != nil
  begin
    resources = resource_path == nil ?
          HeliotropeService.new.monograph_noid_export(monograph_noid) :
          File.read(resource_path)
    resource_metadata = CSV.parse(resources,
              :headers => true, :converters => :all,
              :header_converters => lambda { |h| h.downcase.gsub(' ', '_') })
  rescue Exception => e
    puts e.message
  end
end

resource_processor = ResourceProcessor.new(
            :resource_metadata => resource_metadata,
            :resource_actions => resource_actions,
            :default_action => default_action,
            :options => options
            )

html_path_update_list = []
remote_resources_list = []
html_path_list.each do |html_path|

  hpath = File.expand_path(html_path)
  puts "Processing file #{File.basename(hpath)}"
  STDOUT.flush

  begin
    doc = Nokogiri::XML(File.read(hpath), nil, 'UTF-8')
  rescue Exception => e
    puts e.message
    next
  end

  action_list = resource_processor.process(doc)
  result = action_list.index { |action| action.status == Action.COMPLETED }

  if result
    if options.execute

      html_path_update_list << hpath

      has_remote_resources = action_list.index { |action|
                  action.status == Action.COMPLETED and action.resource_action['resource_action'] == "embed"
      }
      if has_remote_resources
        remote_resources_list << hpath
      end

      # Add stylesheet link
      #href_base = "../styles"
      href_base = "./"
      #href_base = "c:/Users/tbelc/Documents/winterberry_test/styles"

      XMLUtil.add_css(doc, File.join(href_base, "fulcrum_default.css"))
      #XMLUtil.add_css(doc, File.join(href_base, "fulcrum_enhanced.css"))

      dest_path = File.join(output_dir, File.basename(html_path))
      XMLUtil.save(doc, dest_path)
    end
  end
  puts "\n"
end

if options.execute and opf_path != nil
  puts "opf_path: #{opf_path}"
  opf_path = File.expand_path(opf_path)
  if File.exists?(opf_path) and (html_path_update_list.count > 0 or remote_resource_list.count > 0)

    begin
      doc = Nokogiri::XML(File.read(opf_path), nil, 'UTF-8')
    rescue Exception => e
      puts e.message
      exit
    end

    manifest_node = doc.xpath("//*[local-name()='manifest']")
    if manifest_node == nil
      puts "No manifest node"
      exit
    end

    if html_path_update_list.count > 0
      item_node = doc.create_element(
              "item",
              :href => "fulcrum_default.css",
              :id => "fulcrum_default",
              )
      item_node['media-type'] = "text/css"
      
      node_list = manifest_node.xpath("./*[local-name()='item' and @media-type='text/css']")
      if node_list == nil
        manifest_node.add_child(item_node)
      else
        node_list.last.add_next_sibling(item_node)
      end
    end

    puts "Adding remote resources to OPF file #{File.basename(opf_path)}"

    remote_resources_list.each do |path|
      path_basename = File.basename(path)
      node_list = doc.xpath("//*[local-name()='manifest']/*[local-name()='item' and contains(@href, '#{path_basename}')]")
      node_list.each do |node|
        if node.has_attribute?("properties")
          node['properties'] += " remote-resources"
        else
          node['properties'] = "remote-resources"
        end
      end
    end

    dest_path = File.join(output_dir, File.basename(opf_path))
    XMLUtil.save(doc, dest_path)
  else
    puts "OPF file #{File.basename(opf_path)} does not exist."
  end

end





#!/usr/bin/env ruby
# frozen_string_literal: true

# Script displays a list of press monographs

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} press [press..]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end

press_list = ARGV

#require_relative File.join(root_dir, 'lib', 'services')
require_relative File.join(root_dir, 'lib', 'fulcrum')

# Create the serivce for retrieving the NOID.
service = UMPTG::Services::Heliotrope.new(
                :fulcrum_host => options.fulcrum_host
              )

monographs_list = service.monographs(press_list: press_list)
noid_list = []
monographs_list.each do |monograph|
  noid = monograph["id"]
  manifest = UMPTG::Fulcrum::Manifest::Document.new(
                monograph_id: noid
              )
  isbn = manifest.isbn['open access'] if manifest.isbn.key?('open access')
  isbn = manifest.isbn['ebook'] if isbn.nil?
  isbn = manifest.isbn['oa ebook'] if isbn.nil?
  isbn = manifest.isbn['epub'] if isbn.nil?
  isbn = manifest.isbn['pdf'] if isbn.nil?
  if isbn.nil?
    script_logger.error("no ISBN for #{noid}")
    next
  end

  doi = manifest.monograph_row['doi']
  if doi.nil?
    script_logger.error("no DOI for #{noid}")
    doi = ""
    #next
  end
  ee = "#{noid},#{isbn},#{doi.strip.delete_prefix("https://doi.org/")},#{manifest.monograph_row['link'][12..-3]}"
  noid_list << ee
  script_logger.info(manifest.monograph_row['link'][12..-3])
  STDOUT.flush
  next

  nlist = service.monograph_noid(identifier: isbn)
  STDOUT.flush
  next unless nlist.count == 1

  noid_list << noid
  #rep_list = manifest.representatives()
  #next if rep_list.key?('pdf_ebook')
  #puts noid
  #STDOUT.flush
end
File.write("xref_list.tsv", noid_list.join("\n"))
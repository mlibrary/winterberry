#!/usr/bin/env ruby
# frozen_string_literal: true

# Script replaces current EPUB with normalized EPUB to from review
# directory.

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} <isbn> [<isbn> ...]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end

# Process the command line parameters.
isbn_list = ARGV

require 'fileutils'

base_path = File.expand_path("s:/Information Management/Fulcrum/UMP")
#base_path = File.expand_path("C:/Users/tbelc/Documents/Fulcrum/UMP")

isbn_list.each do |isbn|
  script_logger.info("*" * 10 + " #{isbn} " + "*" * 10)

  mon_dir_list = Dir.glob(File.join(base_path, "#{isbn}*"))
  if mon_dir_list.count != 1
    script_logger.info("#{isbn} monograph directory count #{mon_dir_list.count}.")
    next
  end
  mon_dir = mon_dir_list.first

  epub_list = Dir.glob(File.join(mon_dir, "#{isbn}*.epub"))
  if epub_list.count != 1
    script_logger.info("#{isbn} monograph EPUB count #{epub_list.count}.")
    next
  end
  epub = epub_list.first

  arch_epub_list = Dir.glob(File.join(mon_dir, "archive", "*.epub"))
  arch_ver_num = arch_epub_list.count + 1
  arch_epub = File.join(mon_dir, "archive", "#{isbn}_fulcrum1.epub")

  norm_epub_list = Dir.glob(File.join(base_path, "#{isbn}*", "review", "#{isbn}*.epub"))
  if norm_epub_list.empty?
    script_logger.info("#{isbn} normalized epub not found.")
    next
  end
  if norm_epub_list.count > 1
    script_logger.warn("#{isbn} #{norm_epub_list.count} normalized epubs found. Skipping.")
    next
  end
  norm_epub = norm_epub_list.first

  script_logger.info("cp \"#{epub}\" \"#{arch_epub}\"")
  FileUtils.cp(epub, arch_epub, preserve: true)
  script_logger.info("cp \"#{norm_epub}\" \"#{epub}\"")
  FileUtils.cp(norm_epub, epub, preserve: true)
  STDOUT.flush
end

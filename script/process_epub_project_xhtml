#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'ostruct'

require 'fileutils'
require 'zip'

# Process the script parameters.
options = OpenStruct.new
options.xhtml = false
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} <project_dir> <xhtml_file> [<xhtml_file>..]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    puts opts
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  puts option_parser.help
  return
end

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, 'lib', 'epub')

project_dir = ARGV[0]
html_file_list = ARGV[1..-1]

if !File.exist?(project_dir)
  puts "Error: project directory \"#{project_dir}\" does not exist."
  exit
end
puts "Project: #{File.basename(project_dir)}"

html_file_list.each do |html_file|
  src_output_dir = File.join(project_dir, 'src')
  dest_output_dir = File.join(project_dir, 'dest')

  src_list = Dir.glob(File.join(src_output_dir, '**', File.basename(html_file)))
  if src_list.count == 0
    puts "Warning: no instances for \"#{File.basename(html_file)}\" found."
    next
  end
  if src_list.count > 1
    puts "Warning: multiple instances for \"#{File.basename(html_file)}\" found. Using first."
  end

  html_file = src_list.first
  fname = "." + html_file.delete_prefix(src_output_dir)
  srcpath = File.expand_path(fname, src_output_dir)
  destpath = File.expand_path(fname, dest_output_dir)
  puts "src:  #{srcpath}"
  puts "dest: #{destpath}"

  update_xhtml(
      :srcpath => srcpath,
      :destpath => destpath
      )
end


#!/usr/bin/env ruby
# frozen_string_literal: true

# This script retrieves one or more monograph manifest files from Fulcrum
# and returns the specified metadata field values. If no fields are
# specified, then all are returned.
#
# Invoke this script without any parameters to display the usage.

require 'optparse'
require 'ostruct'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
options.fulcrum_column_list = []
options.fulcrum_host = nil
options.output_file = File.join(Dir.pwd, "monograph_manifest.csv")
options.include_representatives = false
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-c <column_header>] [-f production|preview|staging] [-o <output_file>] [-p bar|ebc|heb] [-r] <monograph_id|press> [<monograph_id|press>..]"
  opts.on('-c', '--manifest_column <column_header>', 'Fulcrum manifest metadata field') do |col|
    options.fulcrum_column_list << col
  end
  opts.on('-f', '--fulcrum_host [production|preview|staging]', 'Fulcrum environment') do |fulcrum_host|
    options.fulcrum_host = fulcrum_host
  end
  opts.on('-o', '--output_file <output_file>', 'Output file path') do |output_file|
    options.output_file = output_file
  end
  opts.on('-r', '--representatives', 'Include all representatives') do |flag|
    options.include_representatives = true
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  exit 0
end

require_relative File.join(root_dir, 'lib', 'fulcrum', 'manifest')
require_relative File.join(root_dir, 'lib', 'press')
require_relative File.join(root_dir, 'lib', 'services')

# Rest of the parameters is a list of monograph identifiers.
monograph_id_list = ARGV

if options.fulcrum_column_list.empty?
  script_logger.info("using all manifest metadata fields.")
else
  options.fulcrum_column_list.prepend('Monograph ID')
  script_logger.info("using Fulcrum metadata field(s) #{options.fulcrum_column_list.join(',')}")
end

# Create the serivce for retrieving the NOID manifest.
service = UMPTG::Services::Heliotrope.new()

monograph_id_noid = {}

monograph_id_list.each do |monograph_id|
  script_logger.info("*** #{monograph_id} **")
  STDOUT.flush

  if UMPTG::Press.valid(monograph_id)
    monographs_list = service.monographs(press_list: [monograph_id])
    puts monographs_list.first
    noid_list = monographs_list.collect {|m| m['id'] }
    monograph_id_noid[monograph_id] = noid_list
  else
    noid_list = service.monograph_noid(identifier: monograph_id)
    monograph_id_noid[monograph_id] = noid_list[monograph_id]
  end
end

monograph_manifest_rows = []
manifest_headers = options.fulcrum_column_list
manifest_headers << "Representative" if options.include_representatives

monograph_id_noid.each do |identifier,noid_list|
  if noid_list.empty?
    script_logger.warn("no manifest(s) found for identifier #{identifier}")
    field_values = []
    manifest_headers.each do |h|
      if h == "Monograph ID"
        field_values << identifier
        next
      end
      field_values << ""
    end
    monograph_manifest_rows << field_values
    next
  end

  script_logger.info("#{identifier}:#{noid_list.count} manifest(s) found.")

  noid_list.each do |noid|
    script_logger.info("manifest for NOID #{noid}")
    STDOUT.flush

    manifest_body_list = service.monograph_export(identifier: noid)
    manifest_body_list[noid].each do |manifest_body|
      manifest = UMPTG::Fulcrum::Manifest::Document.new(
                    csv_body: manifest_body
                  )

      manifest_headers = manifest.headers if manifest_headers.empty?

      if options.include_representatives
        manifest.representatives().each do |kind,rep_row|
          #next unless ["epub","pdf","pdf_ebook"].include?(kind)
          next unless ["epub"].include?(kind)

          field_values = []
          manifest_headers.each do |h|
            next if h == "Representative"
            if h == "Monograph ID"
              #field_values << rep_row['file_name']
              field_values << identifier
              next
            end

            new_h = h.strip.downcase.gsub(' ', '_')
            unless manifest.monograph_row.key?(new_h)
              script_logger.error("invalid metadata field \"#{h}\".")
              next
            end
            field_values << manifest.monograph_row[new_h]
          end
          field_values << rep_row['file_name']
          monograph_manifest_rows << field_values
        end
      else
        component = nil
        field_values = []
        manifest_headers.each do |h|
          case h
          when "Monograph ID"
            field_values << identifier
            next
          when "Title/Link"
            #fv = manifest.monograph_row['link'][0..-2] + ",\"\"" +  + "\"\")"
            fv = manifest.monograph_row['link'][0..-2] + ",\"#{manifest.monograph_row['title']}\")"
            field_values << fv
            next
          when "NOID/Link"
            fv = manifest.monograph_row['link'][0..-2] + ",\"#{manifest.monograph_row['noid']}\")"
            field_values << fv
            next
          when "Component"
            component = service.connection.get("component", noid: noid).body if component.nil?
            if component.nil?
              fv = ""
            else
              fv = "=HYPERLINK(\"https://www.fulcrum.org/greensub/components/#{component['id']}\",\"#{component['id']}\")"
            end
            field_values << fv
            next
          when "Products"
            component = service.connection.get("component", noid: noid).body if component.nil?
            if component.nil?
              fv = ""
            else
              products = service.connection.get("components/#{component['id']}/products").body
              p_list = products.collect {|p| p['identifier'] }
              fv = p_list.join(';')
            end
            field_values << fv
            next
          end

          new_h = h.strip.downcase.gsub(' ', '_')
          unless manifest.monograph_row.key?(new_h)
            script_logger.error("invalid metadata field \"#{h}\".")
            next
          end
          field_values << manifest.monograph_row[new_h]
        end
        monograph_manifest_rows << field_values
      end
    end
  end
end

# Write CSV file.
CSV.open(
        options.output_file,
        "w",
        write_headers: false,
      ) do |csv|
  csv << manifest_headers
  monograph_manifest_rows.each {|r| csv << r }
end
script_logger.info("saved CSV file #{options.output_file}")

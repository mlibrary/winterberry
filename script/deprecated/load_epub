#!/usr/bin/env ruby
# frozen_string_literal: true

# HELIO-3510, generate basic HTML instance from an EPUB,
# either reflowable or fixed layout.

require 'optparse'
require 'ostruct'

# Process the script parameters.
options = OpenStruct.new
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-h] epub_file [epub_file...]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    puts opts
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  puts option_parser.help
  return
end

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.expand_path(File.join(script_dir, ".."))

epub_file_list = ARGV

require_relative File.join(root_dir, "lib", "epub")

epub_file_list.each do |epub_file|
  epub_file = File.expand_path(epub_file)
  unless File.exists?(epub_file)
    puts "Error: invalid EPUB file path #{epub_file}."
    #next
  end
  puts "Processing #{File.basename(epub_file)}"

  epub_new = UMPTG::EPUB::Archive.new(epub_file: epub_file)
  epub_new_file = File.join(File.dirname(epub_file), File.basename(epub_file, ".*") + "_new.epub")
  puts "Saving EPUB #{File.basename(epub_new_file)}"
  epub_new.save(epub_file: epub_new_file)
end

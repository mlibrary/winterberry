#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'ostruct'

require 'csv'
require 'fileutils'
require 'zip'

def expand_dir_path(dir_path)
  if dir_path == nil
    return Dir.pwd
  end

  full_dir = File.expand_path(dir_path)
  return full_dir if File.exists?(full_dir)

  puts "Error: directory #{dir_path} does not exist."
  return nil
end

options = OpenStruct.new

option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-p <project_root_dir>] [-s <source_root_dir>] <monograph_noid> [<monograph_noid>..]"
  opts.on('-p', '--project_root_dir [DIRECTORY]', 'Root directory containing ebook project directories') do |project_root_dir|
    options.project_root_dir = project_root_dir
  end
  opts.on('-s', '--source_root_dir [DIRECTORY]', 'Root directory containing ebook source directories') do |source_root_dir|
    options.source_root_dir = source_root_dir
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    puts opts
    exit 0
  end
end
option_parser.parse!(ARGV)

if ARGV.count < 1
  puts option_parser.help
  return
end

require_relative '../lib/csv_file'
require_relative '../lib/metadata'
require_relative '../lib/resources'
require_relative '../lib/services'

source_root_dir = options.source_root_dir || ENV['WINTERBERRY_FULCRUM_UMP_DIR']
project_root_dir = options.project_root_dir || ENV['WINTERBERRY_PRODUCTION_DIR']
noid_list = ARGV

source_root_dir = expand_dir_path(source_root_dir)
exit if source_root_dir == nil
project_root_dir = expand_dir_path(project_root_dir)
exit if project_root_dir == nil

fig_proc = FigureProcessor.new
html_parser = HTMLParser.new(fig_proc)
parser = Nokogiri::XML::SAX::Parser.new(html_parser)

noid_list.each do |noid|
  # Retrieve the monograph manifest. First look and see
  # the file exists in the input directory.
  src_manifest_file = File.join(source_root_dir, "#{noid}.csv")
  if File.exists?(src_manifest_file)
    puts "Loading manifest file #{File.basename(src_manifest_file)}"
    csv_body = File.read(src_manifest_file)
  else
    puts "Downloading manifest file for noid #{noid}"
    csv_body = HeliotropeService.new.monograph_noid_export(noid)
  end
  manifest_csv = CSVFile.read(:csv_body => csv_body)
  next if manifest_csv == nil

  # Find ebook monograph row.
  monograph_row = manifest_csv.find {|row| row['noid'] == noid }
  if monograph_row == nil
    puts "Error: no monograph row for noid #{noid}"
    next
  end

  # Determine the ebook ISBN without dashes.
  isbns = monograph_row['isbn(s)']
  if isbns == nil or isbns.empty?
    puts "Error: no isbns found for noid #{noid}"
    next
  end

  ebook_isbns = isbns.split(';').select {|isbn|
    isbn.strip.downcase.match('[0-9]+[ ]+\(ebook\)')
  }
  if ebook_isbns.empty?
    puts "Error: no ebook isbn found for noid #{noid}"
    next
  end
  puts "Warning: multiple ebook isbns found for noid #{noid}" if ebook_isbns.count > 1

  ebook_isbn = ebook_isbns[0].sub('(ebook)', '').strip.gsub('-', '')

  # Find the ebook source folder
  puts File.join(source_root_dir, "#{ebook_isbn}_*")
  source_dir_list = Dir.glob(File.join(source_root_dir, "#{ebook_isbn}_*"))
  if source_dir_list.count == 0
    puts "Error: ebook source directory not found for noid #{noid}."
    next
  end
  source_dir = source_dir_list[0]
  puts "Multiple ebook source directories found for noid #{noid}. Using #{source_dir}" \
        if source_dir_list.count > 1
  puts "Using #{source_dir}" if source_dir_list.count == 1

  # Find the epub file name.
  epub_row = manifest_csv.find {|row| row['representative_kind'] == 'epub' }
  if epub_row == nil
    puts "Error: no epub row for noid #{noid}"
    next
  end
  epub_file_name = epub_row['file_name']
  src_epub_file = File.join(source_dir, epub_file_name)
  if !File.exist?(src_epub_file)
    puts "Error: no #{epub_file_name} not found for noid #{noid}"
    next
  end

  project_dir = File.join(project_root_dir, File.basename(source_dir))
  puts "Creating project #{project_dir}"
  STDOUT.flush

  FileUtils.mkdir_p project_dir

  # Save the manifest file
  dest_manifest_file = File.join(project_dir, "manifest.csv")
  puts "Saving manifest file #{File.basename(dest_manifest_file)}"
  File.open(dest_manifest_file, "w") do |f|
    f.write(manifest_csv)
  end

  # Copy the epub file.
  epub_file = File.join(project_dir, epub_file_name)
  puts "Copying epub file #{File.basename(epub_file)}"
  FileUtils.cp(src_epub_file, epub_file)

  # Find resources.
  Zip::File.open(epub_file) do |file|
    file.each do |entry|
      if File.extname(entry.name) == ".xhtml"
        parser.parse(entry.get_input_stream.read)
      end
    end
  end
  info_list = fig_proc.info_list

  actions_list = []
  info_list.each do |info|
    attrs_h = info.attrs.to_h

    src = attrs_h['src']
    file_name = File.basename(src)
    file_name_base = File.basename(file_name, ".*")
    fileset_row = manifest_csv.find {|row| File.basename(row['file_name'], ".*") == file_name_base }

    if fileset_row == nil
      puts "Warning: no resource mapping found for file #{file_name}"
      noid = ""
      resource_name = ""
      link = ""
      embed_code = ""
    else
      resource_name = fileset_row['file_name']
      puts "File #{file_name} mapped to resource #{resource_name}"
      noid = fileset_row['noid']
      link = fileset_row['link'].match('^[^\(]+\(\"([^\"]+)\".*') {|m| m[1] }
      embed_code = fileset_row['embed_code']
    end
    action_row = {
          "file_name" => file_name,
          "resource_action" => "default",
          "resource_name" => resource_name,
          "noid" => noid,
          "link" => link,
          "embed_code" => embed_code
    }
    actions_list << action_row
  end

  resource_map_file = File.join(project_dir, "resource_map.csv")
  puts "Saving resource map file #{File.basename(resource_map_file)}"
  CSV.open(
          resource_map_file,
          "w",
          :write_headers=> true,
          :headers => ["NOID","File Name", "Resource Name", "Resource Action"]
        ) do |csv|
    actions_list.each do |action_row|

      csv_row = [
              action_row['noid'],
              action_row['file_name'],
              action_row['resource_name'],
              "default"
      ]

      csv << csv_row
    end
  end

  fig_proc.reset

end

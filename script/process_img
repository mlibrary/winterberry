#!/usr/bin/env ruby
# frozen_string_literal: true

# Script for generating a CSV containing the alt text/captions for
# images found within the specified list of HTML files.

require 'optparse'
require 'ostruct'

require 'csv'
require 'htmlentities'
require 'nokogiri'

options = OpenStruct.new
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-a <actions_file>] [-r <resource_metadata_file>] <output_csv_path> <html_path> [<html_path>..]"
  opts.on('-a', '--action_file [FILE]', 'Path for file specifying resource actions') do |fpath|
    options.actions_path = fpath
  end
  opts.on('-r', '--resource_metadata_file [FILE]', 'Path containing resource metadata') do |rpath|
    options.resource_path = rpath
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    puts opts
    exit 0
  end
end
option_parser.parse!(ARGV)

if ARGV.count < 2
  puts option_parser.help
  return
end

#require File.expand_path('../config/environment', __dir__)
require_relative '../lib/metadata'
require_relative '../lib/csv_file'

resource_path = options.resource_path
actions_path = options.actions_path
output_csv_path = ARGV[0]
html_path_list = ARGV[1..-1]

resource_metadata = CSVFile.read_file(:csv_path => resource_path)
resource_actions = CSVFile.read_file(:csv_path => actions_path)

fig_proc = FigureProcessor.new
html_parser = HTMLParser.new(fig_proc)
parser = Nokogiri::XML::SAX::Parser.new(html_parser)

html_path_list.each do |html_path|
  puts "Path: #{html_path}"
  STDOUT.flush
  parser.parse_file(html_path)
end
info_list = fig_proc.info_list

encoder = HTMLEntities.new

CSV.open(output_csv_path,'w',
    :write_headers=> true,
    :headers => ["NOID","Alternative Text","Caption"]
  ) do |csv|
  info_list.each do |info|
    attrs_h = info.attrs.to_h

    src = File.basename(attrs_h['src'])
    if src != nil
      if resource_actions != nil
        row = resource_actions.find {|r| r['file_name'] == src }
        if row != nil
          src = row['resource_name']
        end
      end

      if resource_metadata != nil
        noid = resource_metadata.find
        row = resource_metadata.find { |r| r['file_name'] == src }
        if row != nil
          src = row['noid']
        else
          src = ""
        end
      end
    end
    if src == ""
      puts "Error: no noid for #{File.basename(attrs_h['src'])}"
    else
      row = [ src, encoder.encode(attrs_h['alt']), encoder.encode(info.caption) ]
      csv << row
      puts "NOID: #{src}"
    end
  end
end

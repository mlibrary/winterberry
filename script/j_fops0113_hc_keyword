#!/usr/bin/env ruby
# frozen_string_literal: true

# Script used for FOPS-0113 to modify CSV
# to add 'Historical Character' to the list
# of keywords.

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
options.output_dir = Dir.pwd()
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} <csv_file> [<csv_file>...]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end

# Process the command line parameters.
csv_file_list = ARGV

require_relative File.join(root_dir, "lib", "fulcrum", "manifest")

csv_file_list.each do |csv_file|
  csv_file = File.expand_path(csv_file)
  unless File.file?(csv_file)
    script_logger.error("invalid CSV file #{csv_file}")
    next
  end
  script_logger.info("Processing CSV #{File.basename(csv_file)}")
  icsv = CSV.parse(
            File.read(csv_file),
            :headers => true,
            :return_headers => false,
            )

  new_csv_file = File.join(File.dirname(csv_file), File.basename(csv_file, ".*") + "_update" + File.extname(csv_file))
  CSV.open(
          new_csv_file,
          "w",
          write_headers: true,
          headers: icsv.headers
        ) do |ocsv|
    icsv.each do |irow|
      keywords = irow['Keywords']
      keywords = keywords.nil? ? "" : keywords.strip
      irow['Keywords'] = "Historical Character; " + keywords unless keywords.empty?
      irow['Keywords'] = "Historical Character" if keywords.empty?
      puts irow['Keywords']
      ocsv << irow
    end
  end
  script_logger.info("wrote new CSV #{File.basename(new_csv_file)}")
end

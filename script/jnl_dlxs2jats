#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'ostruct'

# Process the script parameters.
options = OpenStruct.new
options.gen_html = false
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-h] dlxs_file [dlxs_file...]"
  opts.on('-h', '--html', 'Generate HTML') do |da|
    options.gen_html = true
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    puts opts
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  puts option_parser.help
  return
end

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

dlxs_file_list = ARGV

require 'uri'

require_relative File.join(root_dir, 'lib', 'xslt')

dlxs2jats_xsl_file = File.join(root_dir, "lib", "journal", "xsl", "dlxs2jats.xsl")
jats2html_xsl_file = File.join(root_dir, "lib", "journal", "xsl", "jats-html.xsl")

dlxs_file_list.each do |dlxs_file|
    dlxs_file = File.expand_path(dlxs_file)
    if !File.file?(dlxs_file)
        puts "Error: invalid file #{dlxs_file}"
        next
    end

    jats_file = File.join(File.dirname(dlxs_file), File.basename(dlxs_file, ".*") + "_jats.xml")
    XSLT.transform(
            :xslpath => dlxs2jats_xsl_file,
            :srcpath => dlxs_file,
            :destpath => jats_file
            )

    if options.gen_html
      html_file = File.join(File.dirname(jats_file), File.basename(jats_file, ".*") + ".html")
      XSLT.transform(
              :xslpath => jats2html_xsl_file,
              :srcpath => jats_file,
              :destpath => html_file
              )
  end
end

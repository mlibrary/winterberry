#!/usr/bin/env ruby
# frozen_string_literal: true

# Script inputs a TMM DOI Report xml file and generates
# a CrossRef xml file for DOI deposit.

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
options.monograph_link = :default
options.xsl_version_2 = false
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-l default|fulcrum|ump] [-v] doi_report_file monograph_id [monograph_id...]"
  opts.on('-l', '--link default|fulcrum|ump', 'Use which link as resource') do |link|
    options.monograph_link = link.to_sym
  end
  opts.on('-v', '--version2.0', 'Use XSLT 2.0') do |flag|
    options.xsl_version_2 = true
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end

# Process the command line parameters.
doi_report_file = File.expand_path(ARGV[0])
monograph_id_list = ARGV[1..-1]

unless [:default,:fulcrum,:ump].include?(options.monograph_link)
  script_logger.error("invalid link type #{options.monograph_link}")
  exit 1
end

doi_report_file = File.expand_path(doi_report_file)
unless File.file?(doi_report_file)
  script_logger.error("invalid DOI Report file #{doi_report_file}")
  exit 1
end
script_logger.info("processing DOI Report file #{File.basename(doi_report_file)}")

require 'nokogiri'

require_relative File.join(root_dir, "lib", "fulcrum")
require_relative File.join(root_dir, 'lib', 'xslt')

doi_report_doc = Nokogiri::XML(File.open(doi_report_file))

# Create the serivce for retrieving the NOID.
service = UMPTG::Services::Heliotrope.new(
                :fulcrum_host => options.fulcrum_host
              )

book_node_list = []
if monograph_id_list.empty?
  book_node_list = doi_report_doc.xpath("//*[local-name()='book']")
else
  monograph_id_list.each do |monograph_id|
    script_logger.info("*" * 10 + " #{monograph_id} " + "*" * 10)
    STDOUT.flush

    manifest = nil

    # Assume the monograph ID is a book key.
    bnode_list = doi_report_doc.xpath("//*[local-name()='bookkey' and string()='#{monograph_id}']/ancestor::*[local-name()='book'][1]")
    if bnode_list.empty?
      script_logger.warn("book key #{monograph_id} not found.")

      # Book key not found. Try it as ISBN
      bnode_list = doi_report_doc.xpath("//*[(local-name()='eISBN' or local-name()='printISBN') and string()='#{monograph_id}']/ancestor::*[local-name()='book'][1]")
      script_logger.warn("ISBN #{monograph_id} found.") unless bnode_list.empty?
      script_logger.warn("ISBN #{monograph_id} not found.") if bnode_list.empty?
    else
      script_logger.info("book key #{monograph_id} found.")
    end

    if bnode_list.empty? or options.monograph_link == :fulcrum
      # Assume the monograph ID is a Fulcrum Identifer.
      manifest_body_list = service.monograph_export(
                    monograph_id: monograph_id
                  )
      if manifest_body_list[monograph_id].empty?
        script_logger.warn("no manifest found for ID #{monograph_id}.")
      else
        manifest = UMPTG::Fulcrum::Manifest::Document.new(
                      csv_body: manifest_body_list[monograph_id].first
                    )
        monograph_link = manifest.monograph_row['link'][12..-3]
        script_logger.info("manifest found for ID #{monograph_id}, using link #{monograph_link}.")

        if bnode_list.empty?
          script_logger.info("try using the ISBNs.")
          manifest.isbn.each do |format,isbn|
            isbn = isbn.gsub(/\-/,'')
            script_logger.info("format #{format} ISBN #{isbn}.")
            case format
            when 'ebook','open access'
              bnode_list = doi_report_doc.xpath("//*[local-name()='eISBN' and string()='#{isbn}']/ancestor::*[local-name()='book'][1]")
            else
              bnode_list = doi_report_doc.xpath("//*[local-name()='printISBN' and string()='#{isbn}']/ancestor::*[local-name()='book'][1]")
            end
            break unless bnode_list.empty?

            script_logger.warn("no #{format} nodes found for ID #{isbn}.")
            STDOUT.flush
          end
        end
        if bnode_list.empty?
          # Try using the monograph NOID.
          script_logger.warn("manifest ISBNs not found for #{monograph_id}. Try using the monograph NOID #{manifest.noid}.")
          bnode_list = doi_report_doc.xpath("//*[local-name()='resource' and contains(string(),'" + manifest.noid + "')]/ancestor::*[local-name()='book'][1]")
        end
      end
    end

    if bnode_list.empty? and !manifest.nil?
      bnode_list = doi_report_doc.xpath("//*[local-name()='resource' and contains(string(),'" + manifest.noid + "')]/ancestor::*[local-name()='book'][1]")
    end
    bnode_list.each do |bn|
      book_node_list << bn
    end
    script_logger.info("found #{bnode_list.count} book nodes for ID #{monograph_id}.")
  end
end

if book_node_list.empty?
  script_logger.warn("no book nodes found")
  exit 0
end

book_node_list.each do |bn|
  case options.monograph_link
  when :fulcrum
    unless monograph_link.nil?
      res_node_list = bn.xpath(".//*[local-name()='resource']")
      unless res_node_list.empty?
        res_node_list.first.content = monograph_link
      end
    end
  when :ump
    res_node_list = bn.xpath(".//*[local-name()='resource']")
    unless res_node_list.empty?
      isbn_node_list = bn.xpath(".//*[local-name()='printISBN']")
      unless isbn_node_list.empty?
        res_node_list.first.content = "https://press.umich.edu/isbn/#{isbn_node_list.first.content}"
      end
    end
  end
end

crossref_doc = Nokogiri::XML('<?xml version="1.0" encoding="utf-8"?><root></root>')
root_node = crossref_doc.first_element_child
book_node_list.each do |book_node|
  root_node.add_child(book_node)
end

doi_report_edit_file = File.join(File.dirname(doi_report_file), File.basename(doi_report_file, ".*") + "_edited" + File.extname(doi_report_file))
File.write(doi_report_edit_file, crossref_doc.to_xml)
script_logger.info("wrote XML file #{File.basename(doi_report_edit_file)}.")

crossref_xsl_file = options.xsl_version_2 ? \
        File.join(root_dir, "lib", "tmm", "xsl", "tmm_to_crossref_xsl2_0.xsl") : \
        File.join(root_dir, "lib", "tmm", "xsl", "tmm_to_crossref.xsl")
crossref_xml_file = File.join(
      File.dirname(doi_report_edit_file),
      File.basename(doi_report_edit_file, ".*") + "_crossref" + File.extname(doi_report_edit_file)
      )

script_logger.info("transforming XML file #{File.basename(doi_report_edit_file)} to #{File.basename(crossref_xml_file)} using XSL #{File.basename(crossref_xsl_file)}.")

UMPTG::XSLT.transform(
      xslpath: crossref_xsl_file,
      srcdoc: crossref_doc,
      srcpath: doi_report_edit_file,
      destpath: crossref_xml_file
      )

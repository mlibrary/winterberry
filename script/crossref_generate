#!/usr/bin/env ruby
# frozen_string_literal: true

# Script inputs a TMM DOI Report xml file and generates
# a CrossRef xml file for DOI deposit.

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} doi_report_file isbn [isbn...]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 2
  script_logger.info(option_parser.help)
  return
end

# Process the command line parameters.
doi_report_file = File.expand_path(ARGV[0])
isbn_list = ARGV[1..-1]

doi_report_file = File.expand_path(doi_report_file)
if !File.file?(doi_report_file)
  script_logger.error("invalid DOI Report file #{doi_report_file}")
  exit 1
end
script_logger.info("processing DOI Report file #{File.basename(doi_report_file)}")

require 'nokogiri'

require_relative File.join(root_dir, "lib", "services")
require_relative File.join(root_dir, 'lib', 'xslt')

doi_report_doc = Nokogiri::XML(File.open(doi_report_file))

# Create the serivce for retrieving the NOID.
service = UMPTG::Services::Heliotrope.new(
                :fulcrum_host => options.fulcrum_host
              )

book_node_list = []
isbn_list.each do |isbn|
  script_logger.info("*" * 10 + " #{isbn} " + "*" * 10)

  bnode_list = doi_report_doc.xpath("//*[local-name()='eISBN' and string()='#{isbn}']/ancestor::*[local-name()='book'][1]")
  if bnode_list.empty?
    script_logger.warn("no book nodes found for ISBN #{isbn}.")
    noid_map = service.monograph_noid(identifier: isbn)
    noid_list = noid_map[isbn]
    if noid_list.empty?
      script_logger.warn("no NOIDs found for ISBN #{isbn}.")
      next
    end
    script_logger.info("found #{noid_list.count} NOIDs (#{noid_list.join(',')}) for ISBN #{isbn}.")
    noid_list.each do |noid|
      blist = doi_report_doc.xpath("//*[local-name()='resource' and contains(string(),'" + noid + "')]/ancestor::*[local-name()='book'][1]")
      blist.each do |n|
        bnode_list << n
      end
    end
  end
  bnode_list.each do |bn|
    book_node_list << bn
  end
  script_logger.info("found #{bnode_list.count} book nodes for ISBN #{isbn}.")
end

crossref_doc = Nokogiri::XML('<?xml version="1.0" encoding="utf-8"?><root></root>')
root_node = crossref_doc.first_element_child
book_node_list.each do |book_node|
  root_node.add_child(book_node)
end

doi_report_edit_file = File.join(File.dirname(doi_report_file), File.basename(doi_report_file, ".*") + "_edited" + File.extname(doi_report_file))
File.write(doi_report_edit_file, crossref_doc.to_xml)
script_logger.info("wrote XML file #{File.basename(doi_report_edit_file)}.")

crossref_xsl_file = File.join(root_dir, "lib", "xsl", "tmm_to_crossref_5_3_1.xsl")
crossref_xml_file = File.join(File.dirname(doi_report_edit_file), File.basename(doi_report_edit_file, ".*") + "_crossref" + File.extname(doi_report_edit_file))

script_logger.info("transforming XML file #{File.basename(doi_report_edit_file)} to #{File.basename(crossref_xml_file)} using XSL #{File.basename(crossref_xsl_file)}.")
UMPTG::XSLT.transform(
        xslpath: crossref_xsl_file,
        srcpath: doi_report_edit_file,
        destpath: crossref_xml_file
        )

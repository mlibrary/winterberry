#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'ostruct'

require 'fileutils'
require 'zip'

# Process the script parameters.
options = OpenStruct.new
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} <epub_file> [<epub_file>..]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    puts opts
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  puts option_parser.help
  return
end

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, 'lib', 'epub')

epub_file_list = ARGV

def extract(args)
  zip = args[:zip]
  pattern = args[:pattern]
  outputdir = args[:outputdir]

  entry_list = zip.glob(pattern)
  entry_list.each do |entry|
    path = File.join(outputdir, entry.name)
    FileUtils.mkdir_p File.dirname(path)
    entry.extract(path) { true }
  end
end

epub_file_list.each do |epub_file|
  epub_file = File.expand_path(epub_file)

  puts "Processing #{File.basename(epub_file)}"

  output_dir = File.join(File.dirname(epub_file), File.basename(epub_file, ".*") + "_output")
  src_output_dir = File.join(output_dir, 'src')
  dest_output_dir = File.join(output_dir, 'dest')
  FileUtils.mkdir_p src_output_dir
  FileUtils.mkdir_p dest_output_dir
  puts "Created output directory #{File.basename(output_dir)}"

  Zip::File.open(epub_file) do |zip|
    zip.each do |entry|
      path = File.expand_path(entry.name, dest_output_dir)
      if File.extname(entry.name) != '.plist'
        FileUtils.mkdir_p File.dirname(path)
        entry.extract(path) { true }
      end
    end
    extract(
        :zip => zip,
        :pattern => File.join('**', '*.ncx'),
        :outputdir => src_output_dir
        )
    extract(
        :zip => zip,
        :pattern => File.join('**', '*.opf'),
        :outputdir => src_output_dir
        )

    entry_list = zip.glob(File.join('**', '*.{html,xhtml}'))
    entry_list.each do |entry|
      content = entry.get_input_stream.read
      begin
        doc = Nokogiri::XML(content, nil, 'UTF-8')
      rescue Exception => e
        puts e.message
        return
      end

      path = File.expand_path(entry.name, src_output_dir)
      FileUtils.mkdir_p File.dirname(path)
      XMLUtil.save(doc, path)
    end
  end
end


#!/usr/bin/env ruby
# frozen_string_literal: true

# Test script for XML::Reviewer class

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
options.normalize = false
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-n] html_file [html_file...]"
  opts.on('-n', '--normalize', 'Use which link as resource') do |flag|
    options.normalize = true
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end

# Process the command line parameters.
html_file_list = ARGV

require 'nokogiri'

require_relative File.join(root_dir, "lib", "html")

processor = UMPTG::HTML::Processor(
      name: "HTMLProcessor",
      options: {
          html_img_alttext: true
      }
    )

html_file_list.each do |html_file|
  unless File.file?(html_file)
    script_logger.error("invalid XML file #{html_file}")
    exit 1
  end
  script_logger.info("processing XML file #{File.basename(html_file)}")

  logger_file =  File.join(
            File.dirname(html_file),
            File.basename(html_file, ".*") + "_" + File.basename(__FILE__) + ".log"
            )
  processor.logger = UMPTG::Logger.create(logger_file: logger_file)
  processor.logger.info("Processing EPUB file #{File.basename(html_file)}")

  html_doc = Nokogiri::XML(File.read(html_file))
  result = processor.run(
        html_doc,
        {
          normalize: options.normalize
        }
      )

  if result.modified
    new_html_file = File.join(
            File.dirname(html_file),
            File.basename(html_file, ".*") + "_reviewed" + File.extname(html_file)
            )
    UMPTG::XML.save(html_doc, new_html_file)
    script_logger.info("Saved #{new_html_file}.")
  end
end

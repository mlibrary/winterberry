#!/usr/bin/env ruby
# frozen_string_literal: true

# Script inputs EBC backlist CSV and
# creates monograph directories. Name
# used is mapped from bar code to ISBN.
#
# bundle exec ruby fops0105/ebc_backlist_import \
#   /s/Information\ Management/Fulcrum/PTG/tickets/FOPS-0105/Trigonix_Scans_Metadata_Template.csv \
#   /s/Information\ Management/Fulcrum/PTG/tickets/FOPS-0105/ocr/ocr_completed/39015000*.pdf

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
options.cover_dir = nil
options.output_dir = nil
options.fulcrum_create = false
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [-f] [-o output_dir] [-c cover_dir] input_dir csv_file [csv_file...]"
  opts.on('-c', '--cover_dir directory', 'Cover directory') do |path|
    options.cover_dir = path
  end
  opts.on('-f', '--fulcrum', 'Create Fulcrum directory') do |flag|
    options.fulcrum_create = flag
  end
  opts.on('-o', '--output_dir directory', 'Output directory') do |path|
    options.output_dir = path
  end
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 2
  script_logger.info(option_parser.help)
  return
end

input_dir = ARGV[0]
csv_file_list = ARGV[1..-1]

require 'fileutils'

require_relative File.join(root_dir, 'lib', 'csvfile')

input_dir = File.expand_path(input_dir)
unless File.directory?(input_dir)
  script_logger.error("invalid input directory #{input_dir}")
  exit(1)
end
input_file_list = Dir.glob(File.join(input_dir, "*.pdf"))
script_logger.info("using input directory #{input_dir}, found #{input_file_list.count} PDFs")

output_logger = nil
output_dir = options.output_dir
if output_dir.nil? or output_dir.strip.empty?
  output_logger = nil
  script_logger.warn("output directory not specified")
else
  output_dir = File.expand_path(output_dir)
  unless File.directory?(output_dir)
    script_logger.error("invalid output directory #{options.output_dir}")
    exit(1)
  end
  script_logger.info("using output directory #{output_dir}")

  output_logger_path = File.join(output_dir, File.basename(__FILE__) + ".log")
  output_logger = UMPTG::Logger.create(logger_file: output_logger_path)
end

cover_dir = options.cover_dir
if cover_dir.nil? or cover_dir.strip.empty?
  cover_dir = nil
  script_logger.warn("cover directory not specified")
else
  cover_dir = File.expand_path(cover_dir)
  unless File.directory?(cover_dir)
    script_logger.error("invalid cover directory #{options.cover_dir}")
    exit(1)
  end
  script_logger.info("using cover directory #{cover_dir}")
end

found_cnt = 0
script_logger.info("CSV file:#{csv_file_list.count}")
csv_file_list.each do |csv_file|
  csv_file = File.expand_path(csv_file)
  unless File.exist?(csv_file)
    script_logger.error("CSV file #{csv_file} not found")
    output_logger.info("CSV file #{csv_file} not found") unless output_logger.nil?
    next
  end
  script_logger.info("processing CSV file #{csv_file}")
  output_logger.info("processing CSV file #{csv_file}") unless output_logger.nil?

  csv = UMPTG::CSVFile.read(csv_path: csv_file)
  csv.each do |csv_row|
    bar_code = csv_row["Publisher File ID"]
    if bar_code.nil? or bar_code.strip.empty?
      title = csv_row["Title"]
      script_logger.warn("bar code missing for title \"#{title}\"")
      output_logger.warn("bar code missing for title \"#{title}\"") unless output_logger.nil?
      next
    end

    #ebook_file_list = Dir.glob(File.join(input_dir, bar_code + "*.pdf"))
    ebook_file_list = input_file_list.select {|f| File.basename(f).start_with?(bar_code) }
    script_logger.info("bar code #{bar_code} found #{ebook_file_list.count} EBooks")
    output_logger.info("bar code #{bar_code} found #{ebook_file_list.count} EBooks") unless output_logger.nil?

    found_cnt += ebook_file_list.count
    ebook_file_list.each do |ebook_file|
      script_logger.info("processing PDF file #{ebook_file}")
      output_logger.info("processing PDF file #{ebook_file}") unless output_logger.nil?

      isbns = csv_row['ISBN']
      if isbns.nil? or isbns.strip.empty?
        output_logger.warn("no ISBN(s) found for bar code #{bar_code}") unless output_logger.nil?
        next
      end
      #output_logger.info("ISBN(s) found for bar code #{bar_code}") unless output_logger.nil?

      isbn_list = []
      isbns.strip.split(';').each {|n| isbn_list << n.strip } \
          unless isbns.nil? or isbns.strip.empty?
      if isbn_list.empty?
        output_logger.warn("no ISBN(s) exist for bar code #{bar_code}") unless output_logger.nil?
        next
      end
      isbn = isbn_list.find {|n| n[0] == "9" }
      if isbn.nil?
        output_logger.warn("no valid ISBN found for bar code #{bar_code}") unless output_logger.nil?
        next
      end
      script_logger.info("ISBN #{isbn} found for bar code #{bar_code}")
      output_logger.info("ISBN #{isbn} found for bar code #{bar_code}") unless output_logger.nil?

      if options.fulcrum_create
        isbn_name = isbn.gsub(/[ \-]/, '')
        fulcrum_dir = File.join(output_dir, isbn_name)
        FileUtils.mkdir_p(fulcrum_dir)
        output_logger.info("created Fulcrum directory #{fulcrum_dir}")

        fulcrum_archive_dir = File.join(output_dir, isbn_name, "archive")
        FileUtils.mkdir_p(fulcrum_archive_dir)
        output_logger.info("created Fulcrum archive directory #{File.basename(fulcrum_archive_dir)}")

        isbn_file = File.join(fulcrum_dir, isbn_name + File.extname(ebook_file))
        FileUtils.cp(ebook_file, isbn_file)
        output_logger.info("copied #{File.basename(ebook_file)} to #{File.basename(isbn_file)} to Fulcrum directory")

        FileUtils.cp(ebook_file, fulcrum_archive_dir)
        output_logger.info("copied #{File.basename(ebook_file)} to Fulcrum archive directory")

        unless cover_dir.nil?
          cover_file = Dir.glob(File.join(cover_dir, bar_code + "*")).first
          if cover_file.nil?
            output_logger.warn("cover not found for bar code #{bar_code}")
          else
            fulcrum_cover_file = File.join(fulcrum_dir, isbn_name + File.extname(cover_file))
            FileUtils.cp(cover_file, fulcrum_cover_file)
            output_logger.info("copied cover #{File.basename(cover_file)} to #{File.basename(fulcrum_cover_file)}")
          end
        end
      end
    end
  end
end
script_logger.info("found #{found_cnt} EBooks")

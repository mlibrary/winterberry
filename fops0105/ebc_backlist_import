#!/usr/bin/env ruby
# frozen_string_literal: true

# Script inputs EBC backlist CSV and
# creates monograph directories. Name
# used is mapped from bar code to ISBN.
#
# bundle exec ruby fops0105/ebc_backlist_import \
#   /s/Information\ Management/Fulcrum/PTG/tickets/FOPS-0105/Trigonix_Scans_Metadata_Template.csv \
#   /s/Information\ Management/Fulcrum/PTG/tickets/FOPS-0105/ocr/ocr_completed/39015000*.pdf

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} csv_file ebook_file [ebook_file...]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 2
  script_logger.info(option_parser.help)
  return
end

csv_file = ARGV[0]
ebook_file_list = ARGV[1..-1]

require_relative File.join(root_dir, 'lib', 'csvfile')

csv_file = File.expand_path(csv_file)
unless File.exist?(csv_file)
  script_logger.error("missing sheet file #{csv_file}")
  exit(1)
end
csv = UMPTG::CSVFile.read(csv_path: csv_file)

ebook_file_list.each do |ebook_file|
  ebook_file = File.expand_path(ebook_file)
  unless File.exist?(ebook_file)
    script_logger.error("missing PDF file #{ebook_file}")
    next
  end
  script_logger.info("processing PDF file #{ebook_file}")

  bar_code = File.basename(ebook_file, ".*")[0..13]
  csv_entry = csv.find {|row| row['File Identifier'] == bar_code}
  if csv_entry.nil?
    script_logger.warn("no CSV entry for bar code #{bar_code}")
    next
  end
  isbns = csv_entry['ISBN(s)']
  if isbns.nil? or isbns.strip.empty?
    script_logger.warn("no ISBN(s) found for bar code #{bar_code}")
    next
  end
  isbn_list = []
  isbns.strip.split(';').each {|n| isbn_list << n.strip } \
      unless isbns.nil? or isbns.strip.empty?
  if isbn_list.empty?
    script_logger.warn("no ISBN(s) found for bar code #{bar_code}")
    next
  end
  isbn = isbn_list.find {|n| n[0] == "9" }
  if isbn.nil?
    script_logger.warn("no valid ISBN found for bar code #{bar_code}")
    next
  end
  script_logger.info("#{bar_code}:#{isbn}")
end

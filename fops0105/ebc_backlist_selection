#!/usr/bin/env ruby
# frozen_string_literal: true

# Script inputs EBC backlist CSV and
# determines the titles to be processed.

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} sheet_file [sheet_file...]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end

sheet_file_list = ARGV

require 'find'
require 'xsv'

require_relative File.join(root_dir, 'lib', 'csvfile')

base_dir = File.expand_path('I:/MPublishing/ump2ht')
# I:\MPublishing\ump2ht\Fulcrum Bookmarking\Ready for Fulcrum

=begin
phase_dirs = [
      File.join(base_dir, "phase 1", "originals from Trigonix"),
      File.join(base_dir, "phase 2", "b1b2", "originals"),
      File.join(base_dir, "phase 2", "b3", "originals"),
      File.join(base_dir, "phase 2", "b4", "originals"),
      File.join(base_dir, "phase 2", "b5", "originals"),
      File.join(base_dir, "phase 2", "b6", "originals"),
      File.join(base_dir, "phase 2", "b7", "originals"),
      File.join(base_dir, "phase 2", "b8", "originals"),
      File.join(base_dir, "phase 2", "b9", "originals"),
      File.join(base_dir, "phase 2", "b10", "originals"),
      File.join(base_dir, "phase 2", "b11", "originals"),
      File.join(base_dir, "phase 2", "b12", "originals"),
      File.join(base_dir, "phase 2", "b13", "originals"),
      File.join(base_dir, "phase 2", "b14", "originals"),
      File.join(base_dir, "phase 2", "b15", "originals"),
      File.join(base_dir, "phase 2", "b16", "originals"),
      File.join(base_dir, "phase 3")
  ]
=end

process_csv_str = CSV.generate(
        force_quotes: true,
        headers: ["Decision", "ISBN", "Barcode"]
        ) do |process_csv|
  sheet_file_list.each do |sheet_file|
    sheet_file = File.expand_path(sheet_file)
    unless File.exist?(sheet_file)
      script_logger.error("missing sheet file #{sheet_file}")
      next
    end
    script_logger.info("processing PDF file #{sheet_file}")

    case File.extname(sheet_file)
    when ".csv"
      csv = UMPTG::CSVFile.read(csv_path: sheet_file)
      csv.each do |row|
        next if row.compact.empty?
        next if row['Decision'].nil? or row['Decision'].strip.downcase != 'yes'
        next if row['ISBN'].nil?

        isbn = row['ISBN'].to_s[0..12].strip.gsub(/\-/, '')
        next if isbn.empty? or isbn.downcase == 'none'

        barcode = row['Barcode'].to_s[0..12]
        process_csv << {
            "Decision" => row["Decision"],
            "ISBN" => isbn,
            "Barcode" => barcode
        }
      end
    when ".xlsx"
      x = Xsv::Workbook.open(sheet_file, parse_headers: true)
      x.sheets.each do |s|
        s.each do |row|
          next if row.compact.empty?
          next if row['Decision'].nil? or row['Decision'].strip.downcase != 'yes'
          next if row['ISBN'].nil?

          isbn = row['ISBN'].to_s[0..12].strip.gsub(/\-/, '')
          next if isbn.empty? or isbn.downcase == 'none'

          barcode = row['Barcode'].to_s[0..12]

          process_csv << {
              "Decision" => row["Decision"],
              "ISBN" => isbn,
              "Barcode" => barcode
          }
        end
      end
    else
      script_logger.error("unsupported sheet file #{sheet_file}")
      next
    end
  end
end
process_csv = CSV.parse(
      process_csv_str,
      headers: ["Decision", "ISBN", "Barcode"]
      )

idents = []
idents_map = {}
process_csv.each do |row|
  isbn = row['ISBN']
  bar_code = row['Barcode']
  #script_logger.info("#{isbn},#{bar_code}")
  idents << isbn unless isbn.nil? or isbn.strip.empty?
  idents << bar_code unless bar_code.nil? or bar_code.strip.empty?
  #idents_map[isbn] = row
  idents_map[bar_code] = row
end
STDOUT.flush
#script_logger.info(idents)
#exit 0

search_dir = File.join(base_dir, "Fulcrum Bookmarking", "Ready for Fulcrum")
dest_dir = File.join(base_dir, "Fulcrum Bookmarking", "Fulcrum_new")
#search_dir = File.join(base_dir, "phase_2_PDFs")
script_logger.info("*** search_dir:#{search_dir} ***")
rows_found = {}
Find.find(search_dir) do |f|
  next if File.directory?(f) or File.extname(f) != '.pdf'
  b = File.basename(f)
  key = b[0..12]
  row = idents_map[key]
  next if row.nil?
  #script_logger.info("key:#{key},#{row}")
  rows_found[key] = row
  idents_map[key] = nil

  new_b = row['ISBN'] + b.delete_prefix(b[0..12])
  script_logger.info("#{b},#{new_b}") unless row.nil?
  STDOUT.flush

  new_f = File.join(dest_dir, new_b)
  FileUtils.cp(f, new_f)
end

script_logger.info("*** not found ***")
idents_map.each do |k,v|
  script_logger.info("#{k},#{v['ISBN'].to_s[0..12]}") unless v.nil?
end

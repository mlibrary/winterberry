#!/usr/bin/env ruby
# frozen_string_literal: true

# Script inputs EBC backlist CSV and
# generates a CSV for updating monograph descriptions
#
# bundle exec ruby fops0105/ebc_update_desc \
#   /s/Information\ Management/Fulcrum/UMP_backlist/Round_2024_09/UMP_FIT_Import_Revised_Backlist_description_review.csv

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} noid_csv_file descr_csv_file"
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 2
  script_logger.info(option_parser.help)
  return
end

noid_csv_file = ARGV[0]
descr_csv_file = ARGV[1]
output_file = ARGV[2]

require_relative File.join(root_dir, 'lib', 'csvfile')

noid_csv = UMPTG::CSVFile.read(csv_path: noid_csv_file)
descr_csv = UMPTG::CSVFile.read(csv_path: descr_csv_file)

found_cnt = 0
update_cnt = 0

# Write CSV file.
CSV.open(
        output_file,
        "w",
        #headers: ["ISBN", "NOID", "Description"],
        headers: ["NOID", "Description"],
        write_headers: true,
      ) do |csv|
  noid_csv.each do |nrow|
    noid = nrow['NOID']
    next if noid.nil? or noid.strip.empty?

    found_cnt += 1
    n_isbn = nrow['ISBN']
    raise "invalid ISBN: #{found_cnt}" if n_isbn.nil? or n_isbn.strip.empty?

    descr = nil
    descr_csv.each do |r|
      d_isbn = r['ISBN']
      next if d_isbn.nil? or d_isbn.strip.empty?

      d_isbn = d_isbn.gsub(/\-/, '')
      if n_isbn == d_isbn
        row = {
              #"ISBN" => n_isbn,
              "NOID" => noid,
              "Description" => r['Description']
          }
        csv << row
        update_cnt += 1
        break
      end
    end
    #script_logger.error("no description for ISBN #{n_isbn}") if descr.nil?
  end
end
script_logger.info("found #{found_cnt} records, updated #{update_cnt} records")
script_logger.info("saved CSV file #{output_file}")

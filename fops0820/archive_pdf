#!/usr/bin/env ruby
# frozen_string_literal: true

# Script archives PDFs within a monograph directory.

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} monograph_dir [monograph_dir...]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  exit 0
end

# Process the command line parameters.
monograph_dir_list = ARGV

monograph_dir_list.each do |monograph_dir|
  monograph_dir = File.expand_path(monograph_dir)
  unless File.directory?(monograph_dir)
    script_logger.error("invalid monograph directory #{monograph_dir}")
    next
  end
  script_logger.info("processing monograph directory #{monograph_dir}")

  pdf_file = File.join(monograph_dir, File.basename(monograph_dir, ".*") + ".pdf")
  unless File.file?(pdf_file)
    script_logger.error("invalid PDF file #{pdf_file}")
    next
  end

  replace_pdf_file = File.join(monograph_dir, File.basename(monograph_dir, ".*") + "_pdf_insert_license_page.pdf")
  unless File.file?(replace_pdf_file)
    script_logger.error("invalid replace PDF file #{replace_pdf_file}")
    next
  end

  archive_dir = File.join(monograph_dir, "archive")
  FileUtils.mkdir_p(archive_dir)

  archive_pdf_file = File.join(archive_dir, File.basename(pdf_file, ".*") + "_version1" + File.extname(pdf_file))
  FileUtils.mv(pdf_file, archive_pdf_file)
  script_logger.info("mv #{pdf_file} #{archive_pdf_file}")
  FileUtils.mv(replace_pdf_file, pdf_file)
  script_logger.info("mv #{replace_pdf_file} #{pdf_file}")
end

#!/usr/bin/env ruby
# frozen_string_literal: true

# Test new version of EPUB renditions.

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} epub_path [epub_path...]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end

# Process the command line parameters.
epub_path_list = ARGV

require_relative File.join(script_dir, "lib", "epub")

epub_path_list.each do |epub_path|
  epub_path = File.expand_path(epub_path)
  unless File.exist?(epub_path)
    script_logger.error("invalid path #{epub_path}")
    next
  end
  is_dir = File.directory?(epub_path)
  script_logger.info("processing file #{File.basename(epub_path)}") unless is_dir
  script_logger.info("processing directory #{File.basename(epub_path)}") if is_dir
  STDOUT.flush

  epub = UMPTG::EPUB(epub_path: epub_path)

  rend = epub.rendition
  raise 'epub.rendition' if rend.nil?
  script_logger.info('epub.rendition' + " #{rend.class}")

  rend = epub.rendition(rendition_name: "content.opf")
  raise 'epub.rendition(rendition_name: "content.opf")' if rend.nil?
  script_logger.info('epub.rendition(rendition_name: "content.opf")' + " #{rend.class}")

  rend = epub.container.rendition
  raise 'epub.container.rendition' if rend.nil?
  script_logger.info('epub.container.rendition' + " #{rend.class}")

  rend = epub.container.rendition(rendition_name: "content.opf")
  raise 'epub.container.rendition(rendition_name: "content.opf")' if rend.nil?
  script_logger.info('epub.container.rendition(rendition_name: "content.opf")' + " #{rend.class}")
end


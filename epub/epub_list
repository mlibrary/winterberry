#!/usr/bin/env ruby
# frozen_string_literal: true

# Test new version of EPUB renditions.

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} epub_path [epub_path...]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 1
  script_logger.info(option_parser.help)
  return
end

# Process the command line parameters.
epub_path_list = ARGV

require_relative File.join(script_dir, "lib", "epub")

def dump(label, items)
  puts "==== #{label} ==========="
  puts "items:#{items.count}"
  items.each do |n|
    case n.class.name
    when "Nokogiri::XML::Element"
      puts "#{n.name}:#{n['idref']}" if n.name == "itemref"
      puts "#{n.name}:#{n['id']},#{n['href']}" if n.name == "item"
    when "UMPTG::EPUB::Archive::FileEntry"
      puts "#{n.name}:#{n.media_type}"
    else
      puts "unsupported class:#{n.class.name}"
    end
  end
end

epub_path_list.each do |epub_path|
  epub_path = File.expand_path(epub_path)
  unless File.exist?(epub_path)
    script_logger.error("invalid path #{epub_path}")
    next
  end
  is_dir = File.directory?(epub_path)
  script_logger.info("processing file #{File.basename(epub_path)}") unless is_dir
  script_logger.info("processing directory #{File.basename(epub_path)}") if is_dir
  STDOUT.flush

  epub = UMPTG::EPUB(epub_path: epub_path)

  items = epub.rendition.spine.find
  dump('epub.rendition.spine.find', items)

  items = epub.rendition.spine.find(entry_idref: "Rossini-0008")
  dump('epub.rendition.spine.find(entry_idref: "Rossini-0008")', items)

  items = epub.rendition.spine.items
  dump('epub.rendition.spine.items', items)

  entries = epub.rendition.spine.entries
  dump('epub.rendition.spine.entries', entries)

  items = epub.rendition.manifest.find(entry_mediatype: "application/xhtml+xml")
  dump('epub.rendition.manifest.find(entry_mediatype: "application/xhtml+xml")', items)

  items = epub.rendition.manifest.find(entry_ids: ["Rossini-0002", "Rossini-0004", "Rossini-0006"])
  dump('epub.rendition.manifest.find(entry_ids: ["Rossini-0002", "Rossini-0004", "Rossini-0006"])', items)

  entries = epub.rendition.manifest.entries
  dump('epub.rendition.manifest.entries', entries)

  entries = epub.files.find(entry_name: UMPTG::EPUB::Archive::OEBPS::Rendition.DEFAULT_PATH)
  dump('epub.files.find(entry_name: UMPTG::EPUB::Archive::OEBPS::Rendition.DEFAULT_PATH)', entries)

  entries = epub.files.find(media_type: "application/oebps-package+xml")
  dump('epub.files.find(media_type: "application/oebps-package+xml")', entries)
end


#!/usr/bin/env ruby
# frozen_string_literal: true

# Test new version of EPUB.

require 'optparse'
require 'ostruct'
require 'os'

# Determine the root directory of the code base.
script_dir = File.expand_path(File.dirname(__FILE__))
root_dir = File.dirname(script_dir)

require_relative File.join(root_dir, "lib", "logger")

script_logger = UMPTG::Logger.create(logger_fp: STDOUT)

# Process the script parameters.
options = OpenStruct.new
option_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} dir [dir...]"
  opts.on_tail('-h', '--help', 'Print this help message') do
    script_logger.info(opts)
    exit 0
  end
end
option_parser.parse!(ARGV)
if ARGV.count < 0
  script_logger.info(option_parser.help)
  return
end

# Process the command line parameters.
dir_list = ARGV

require 'find'
require 'mime/types'

require_relative File.join(script_dir, "lib", "epub")

    XHTML_TEMPLATE = <<-NTEMP
<?xml version="1.0" encoding="UTF-8"?>
<html lang="en-US" xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head><title>Navigation</title></head><body/>
</html>
    NTEMP

dir_list.each do |d|
  d = File.expand_path(d)
  unless File.directory?(d)
    script_logger.error("invalid directory #{d}")
    next
  end
  script_logger.info("processing directory #{File.basename(d)}")

  epub = UMPTG::EPUB()
  Find.find(d) do |f|
    bname = File.basename(f).downcase
    if bname.start_with?('.') or bname.downcase == "meta-inf"
      Find.prune
      next
    end
    next if File.directory?(f)
    next if bname == "mimetype"

    entry_name = f.delete_prefix(d + File::SEPARATOR)
    script_logger.info("add entry #{entry_name}")

    entry_mediatype = UMPTG::EPUB::Entry.media_type(entry_name: f)
    raise "no media type" if entry_mediatype.nil?

    case entry_mediatype.media_type
    when "image"
      entry_content = File.open(f, "rb") {|fp| fp.read }
    else
      entry_content = File.read(f) if entry_content.nil?
    end

    epub.container.rendition.manifest.add(
          entry_name: entry_name,
          entry_content: entry_content
        )

    if File.extname(f) == ".xhtml"
      epub.container.rendition.spine.add(entry_name: entry_name)
      epub.container.rendition.navigation.toc.add(entry_name: entry_name)
    end
  end

  epub_file = File.join(File.dirname(d), File.basename(d, ".*") + "_test1.epub")
  epub.save(epub_file: epub_file)
  script_logger.info("wrote EPUB file #{epub_file}")
end

